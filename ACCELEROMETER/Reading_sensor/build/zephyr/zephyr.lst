
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	60 1c 00 20 ed 52 00 00 a1 bb 00 00 c1 52 00 00     `.. .R.......R..
  10:	c1 52 00 00 c1 52 00 00 c1 52 00 00 00 00 00 00     .R...R...R......
	...
  2c:	c5 4f 00 00 c1 52 00 00 00 00 00 00 6d 4f 00 00     .O...R......mO..
  3c:	c1 52 00 00                                         .R..

00000040 <_irq_vector_table>:
  40:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  50:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  60:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  70:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  80:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  90:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  a0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  b0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  c0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  d0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  e0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..
  f0:	79 50 00 00 79 50 00 00 79 50 00 00 79 50 00 00     yP..yP..yP..yP..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0x52>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <CONFIG_SHELL_HISTORY_BUFFER+0x1c>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <CONFIG_SHELL_HISTORY_BUFFER+0x30>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0x3e>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <CONFIG_SHELL_HISTORY_BUFFER+0x5e>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <CONFIG_SHELL_HISTORY_BUFFER+0x7c>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <CONFIG_SHELL_HISTORY_BUFFER+0x92>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <CONFIG_SHELL_HISTORY_BUFFER+0xd0>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <CONFIG_SHELL_HISTORY_BUFFER+0xb8>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0xa4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <CONFIG_SHELL_HISTORY_BUFFER+0xb8>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_SHELL_HISTORY_BUFFER+0x11a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_SHELL_HISTORY_BUFFER+0x116>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_SHELL_HISTORY_BUFFER+0x130>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0x36>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__data_size+0x1e>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <CONFIG_SHELL_HISTORY_BUFFER+0x38>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0xb2>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0x76>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x94>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <CONFIG_SHELL_HISTORY_BUFFER+0xe4>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <CONFIG_SHELL_HISTORY_BUFFER+0xe4>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <CONFIG_SHELL_HISTORY_BUFFER+0xe4>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <CONFIG_SHELL_HISTORY_BUFFER+0x92>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <CONFIG_SHELL_HISTORY_BUFFER+0x92>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     94c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f8ce 	bl	afc <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <__aeabi_dcmpun>:
     a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a88:	d102      	bne.n	a90 <__aeabi_dcmpun+0x10>
     a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a8e:	d10a      	bne.n	aa6 <__aeabi_dcmpun+0x26>
     a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a98:	d102      	bne.n	aa0 <__aeabi_dcmpun+0x20>
     a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a9e:	d102      	bne.n	aa6 <__aeabi_dcmpun+0x26>
     aa0:	f04f 0000 	mov.w	r0, #0
     aa4:	4770      	bx	lr
     aa6:	f04f 0001 	mov.w	r0, #1
     aaa:	4770      	bx	lr

00000aac <__aeabi_d2iz>:
     aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     ab4:	d215      	bcs.n	ae2 <__aeabi_d2iz+0x36>
     ab6:	d511      	bpl.n	adc <__aeabi_d2iz+0x30>
     ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     ac0:	d912      	bls.n	ae8 <__aeabi_d2iz+0x3c>
     ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     ad2:	fa23 f002 	lsr.w	r0, r3, r2
     ad6:	bf18      	it	ne
     ad8:	4240      	negne	r0, r0
     ada:	4770      	bx	lr
     adc:	f04f 0000 	mov.w	r0, #0
     ae0:	4770      	bx	lr
     ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ae6:	d105      	bne.n	af4 <__aeabi_d2iz+0x48>
     ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     aec:	bf08      	it	eq
     aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     af2:	4770      	bx	lr
     af4:	f04f 0000 	mov.w	r0, #0
     af8:	4770      	bx	lr
     afa:	bf00      	nop

00000afc <__udivmoddi4>:
     afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b00:	4607      	mov	r7, r0
     b02:	468c      	mov	ip, r1
     b04:	4608      	mov	r0, r1
     b06:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b08:	4615      	mov	r5, r2
     b0a:	463c      	mov	r4, r7
     b0c:	4619      	mov	r1, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	f040 80c6 	bne.w	ca0 <__udivmoddi4+0x1a4>
     b14:	4282      	cmp	r2, r0
     b16:	fab2 f782 	clz	r7, r2
     b1a:	d946      	bls.n	baa <__udivmoddi4+0xae>
     b1c:	b14f      	cbz	r7, b32 <__udivmoddi4+0x36>
     b1e:	f1c7 0e20 	rsb	lr, r7, #32
     b22:	fa24 fe0e 	lsr.w	lr, r4, lr
     b26:	fa00 f307 	lsl.w	r3, r0, r7
     b2a:	40bd      	lsls	r5, r7
     b2c:	ea4e 0c03 	orr.w	ip, lr, r3
     b30:	40bc      	lsls	r4, r7
     b32:	ea4f 4815 	mov.w	r8, r5, lsr #16
     b36:	fa1f fe85 	uxth.w	lr, r5
     b3a:	fbbc f9f8 	udiv	r9, ip, r8
     b3e:	0c22      	lsrs	r2, r4, #16
     b40:	fb08 c319 	mls	r3, r8, r9, ip
     b44:	fb09 fa0e 	mul.w	sl, r9, lr
     b48:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     b4c:	459a      	cmp	sl, r3
     b4e:	d928      	bls.n	ba2 <__udivmoddi4+0xa6>
     b50:	18eb      	adds	r3, r5, r3
     b52:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     b56:	d204      	bcs.n	b62 <__udivmoddi4+0x66>
     b58:	459a      	cmp	sl, r3
     b5a:	d902      	bls.n	b62 <__udivmoddi4+0x66>
     b5c:	f1a9 0002 	sub.w	r0, r9, #2
     b60:	442b      	add	r3, r5
     b62:	eba3 030a 	sub.w	r3, r3, sl
     b66:	b2a4      	uxth	r4, r4
     b68:	fbb3 f2f8 	udiv	r2, r3, r8
     b6c:	fb08 3312 	mls	r3, r8, r2, r3
     b70:	fb02 fe0e 	mul.w	lr, r2, lr
     b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b78:	45a6      	cmp	lr, r4
     b7a:	d914      	bls.n	ba6 <__udivmoddi4+0xaa>
     b7c:	192c      	adds	r4, r5, r4
     b7e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     b82:	d203      	bcs.n	b8c <__udivmoddi4+0x90>
     b84:	45a6      	cmp	lr, r4
     b86:	d901      	bls.n	b8c <__udivmoddi4+0x90>
     b88:	1e93      	subs	r3, r2, #2
     b8a:	442c      	add	r4, r5
     b8c:	eba4 040e 	sub.w	r4, r4, lr
     b90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b94:	b11e      	cbz	r6, b9e <__udivmoddi4+0xa2>
     b96:	40fc      	lsrs	r4, r7
     b98:	2300      	movs	r3, #0
     b9a:	6034      	str	r4, [r6, #0]
     b9c:	6073      	str	r3, [r6, #4]
     b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba2:	4648      	mov	r0, r9
     ba4:	e7dd      	b.n	b62 <__udivmoddi4+0x66>
     ba6:	4613      	mov	r3, r2
     ba8:	e7f0      	b.n	b8c <__udivmoddi4+0x90>
     baa:	b902      	cbnz	r2, bae <__udivmoddi4+0xb2>
     bac:	deff      	udf	#255	; 0xff
     bae:	bb87      	cbnz	r7, c12 <__udivmoddi4+0x116>
     bb0:	1a83      	subs	r3, r0, r2
     bb2:	2101      	movs	r1, #1
     bb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     bb8:	b2aa      	uxth	r2, r5
     bba:	fbb3 fcfe 	udiv	ip, r3, lr
     bbe:	0c20      	lsrs	r0, r4, #16
     bc0:	fb0e 331c 	mls	r3, lr, ip, r3
     bc4:	fb0c f802 	mul.w	r8, ip, r2
     bc8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     bcc:	4598      	cmp	r8, r3
     bce:	d963      	bls.n	c98 <__udivmoddi4+0x19c>
     bd0:	18eb      	adds	r3, r5, r3
     bd2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     bd6:	d204      	bcs.n	be2 <__udivmoddi4+0xe6>
     bd8:	4598      	cmp	r8, r3
     bda:	d902      	bls.n	be2 <__udivmoddi4+0xe6>
     bdc:	f1ac 0002 	sub.w	r0, ip, #2
     be0:	442b      	add	r3, r5
     be2:	eba3 0308 	sub.w	r3, r3, r8
     be6:	b2a4      	uxth	r4, r4
     be8:	fbb3 fcfe 	udiv	ip, r3, lr
     bec:	fb0e 331c 	mls	r3, lr, ip, r3
     bf0:	fb0c f202 	mul.w	r2, ip, r2
     bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bf8:	42a2      	cmp	r2, r4
     bfa:	d94f      	bls.n	c9c <__udivmoddi4+0x1a0>
     bfc:	192c      	adds	r4, r5, r4
     bfe:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     c02:	d204      	bcs.n	c0e <__udivmoddi4+0x112>
     c04:	42a2      	cmp	r2, r4
     c06:	d902      	bls.n	c0e <__udivmoddi4+0x112>
     c08:	f1ac 0302 	sub.w	r3, ip, #2
     c0c:	442c      	add	r4, r5
     c0e:	1aa4      	subs	r4, r4, r2
     c10:	e7be      	b.n	b90 <__udivmoddi4+0x94>
     c12:	f1c7 0c20 	rsb	ip, r7, #32
     c16:	fa20 f80c 	lsr.w	r8, r0, ip
     c1a:	fa00 f307 	lsl.w	r3, r0, r7
     c1e:	fa24 fc0c 	lsr.w	ip, r4, ip
     c22:	40bd      	lsls	r5, r7
     c24:	ea4c 0203 	orr.w	r2, ip, r3
     c28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c2c:	b2ab      	uxth	r3, r5
     c2e:	fbb8 fcfe 	udiv	ip, r8, lr
     c32:	0c11      	lsrs	r1, r2, #16
     c34:	fb0e 801c 	mls	r0, lr, ip, r8
     c38:	fb0c f903 	mul.w	r9, ip, r3
     c3c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     c40:	4581      	cmp	r9, r0
     c42:	fa04 f407 	lsl.w	r4, r4, r7
     c46:	d923      	bls.n	c90 <__udivmoddi4+0x194>
     c48:	1828      	adds	r0, r5, r0
     c4a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     c4e:	d204      	bcs.n	c5a <__udivmoddi4+0x15e>
     c50:	4581      	cmp	r9, r0
     c52:	d902      	bls.n	c5a <__udivmoddi4+0x15e>
     c54:	f1ac 0102 	sub.w	r1, ip, #2
     c58:	4428      	add	r0, r5
     c5a:	eba0 0009 	sub.w	r0, r0, r9
     c5e:	b292      	uxth	r2, r2
     c60:	fbb0 fcfe 	udiv	ip, r0, lr
     c64:	fb0e 001c 	mls	r0, lr, ip, r0
     c68:	fb0c f803 	mul.w	r8, ip, r3
     c6c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     c70:	4598      	cmp	r8, r3
     c72:	d90f      	bls.n	c94 <__udivmoddi4+0x198>
     c74:	18eb      	adds	r3, r5, r3
     c76:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     c7a:	d204      	bcs.n	c86 <__udivmoddi4+0x18a>
     c7c:	4598      	cmp	r8, r3
     c7e:	d902      	bls.n	c86 <__udivmoddi4+0x18a>
     c80:	f1ac 0202 	sub.w	r2, ip, #2
     c84:	442b      	add	r3, r5
     c86:	eba3 0308 	sub.w	r3, r3, r8
     c8a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     c8e:	e791      	b.n	bb4 <__udivmoddi4+0xb8>
     c90:	4661      	mov	r1, ip
     c92:	e7e2      	b.n	c5a <__udivmoddi4+0x15e>
     c94:	4662      	mov	r2, ip
     c96:	e7f6      	b.n	c86 <__udivmoddi4+0x18a>
     c98:	4660      	mov	r0, ip
     c9a:	e7a2      	b.n	be2 <__udivmoddi4+0xe6>
     c9c:	4663      	mov	r3, ip
     c9e:	e7b6      	b.n	c0e <__udivmoddi4+0x112>
     ca0:	4283      	cmp	r3, r0
     ca2:	d905      	bls.n	cb0 <__udivmoddi4+0x1b4>
     ca4:	b10e      	cbz	r6, caa <__udivmoddi4+0x1ae>
     ca6:	e9c6 7000 	strd	r7, r0, [r6]
     caa:	2100      	movs	r1, #0
     cac:	4608      	mov	r0, r1
     cae:	e776      	b.n	b9e <__udivmoddi4+0xa2>
     cb0:	fab3 f183 	clz	r1, r3
     cb4:	b981      	cbnz	r1, cd8 <__udivmoddi4+0x1dc>
     cb6:	4283      	cmp	r3, r0
     cb8:	d301      	bcc.n	cbe <__udivmoddi4+0x1c2>
     cba:	42ba      	cmp	r2, r7
     cbc:	d80a      	bhi.n	cd4 <__udivmoddi4+0x1d8>
     cbe:	1abc      	subs	r4, r7, r2
     cc0:	eb60 0303 	sbc.w	r3, r0, r3
     cc4:	2001      	movs	r0, #1
     cc6:	469c      	mov	ip, r3
     cc8:	2e00      	cmp	r6, #0
     cca:	d068      	beq.n	d9e <__udivmoddi4+0x2a2>
     ccc:	e9c6 4c00 	strd	r4, ip, [r6]
     cd0:	2100      	movs	r1, #0
     cd2:	e764      	b.n	b9e <__udivmoddi4+0xa2>
     cd4:	4608      	mov	r0, r1
     cd6:	e7f7      	b.n	cc8 <__udivmoddi4+0x1cc>
     cd8:	f1c1 0c20 	rsb	ip, r1, #32
     cdc:	408b      	lsls	r3, r1
     cde:	fa22 f40c 	lsr.w	r4, r2, ip
     ce2:	431c      	orrs	r4, r3
     ce4:	fa02 f501 	lsl.w	r5, r2, r1
     ce8:	fa00 f301 	lsl.w	r3, r0, r1
     cec:	fa27 f20c 	lsr.w	r2, r7, ip
     cf0:	fa20 fb0c 	lsr.w	fp, r0, ip
     cf4:	ea4f 4914 	mov.w	r9, r4, lsr #16
     cf8:	4313      	orrs	r3, r2
     cfa:	fbbb f8f9 	udiv	r8, fp, r9
     cfe:	fa1f fe84 	uxth.w	lr, r4
     d02:	fb09 bb18 	mls	fp, r9, r8, fp
     d06:	0c1a      	lsrs	r2, r3, #16
     d08:	fb08 fa0e 	mul.w	sl, r8, lr
     d0c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     d10:	4592      	cmp	sl, r2
     d12:	fa07 f701 	lsl.w	r7, r7, r1
     d16:	d93e      	bls.n	d96 <__udivmoddi4+0x29a>
     d18:	18a2      	adds	r2, r4, r2
     d1a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     d1e:	d204      	bcs.n	d2a <__udivmoddi4+0x22e>
     d20:	4592      	cmp	sl, r2
     d22:	d902      	bls.n	d2a <__udivmoddi4+0x22e>
     d24:	f1a8 0002 	sub.w	r0, r8, #2
     d28:	4422      	add	r2, r4
     d2a:	eba2 020a 	sub.w	r2, r2, sl
     d2e:	b29b      	uxth	r3, r3
     d30:	fbb2 f8f9 	udiv	r8, r2, r9
     d34:	fb09 2218 	mls	r2, r9, r8, r2
     d38:	fb08 fe0e 	mul.w	lr, r8, lr
     d3c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     d40:	4596      	cmp	lr, r2
     d42:	d92a      	bls.n	d9a <__udivmoddi4+0x29e>
     d44:	18a2      	adds	r2, r4, r2
     d46:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     d4a:	d204      	bcs.n	d56 <__udivmoddi4+0x25a>
     d4c:	4596      	cmp	lr, r2
     d4e:	d902      	bls.n	d56 <__udivmoddi4+0x25a>
     d50:	f1a8 0302 	sub.w	r3, r8, #2
     d54:	4422      	add	r2, r4
     d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d5a:	fba0 9305 	umull	r9, r3, r0, r5
     d5e:	eba2 020e 	sub.w	r2, r2, lr
     d62:	429a      	cmp	r2, r3
     d64:	46ce      	mov	lr, r9
     d66:	4698      	mov	r8, r3
     d68:	d302      	bcc.n	d70 <__udivmoddi4+0x274>
     d6a:	d106      	bne.n	d7a <__udivmoddi4+0x27e>
     d6c:	454f      	cmp	r7, r9
     d6e:	d204      	bcs.n	d7a <__udivmoddi4+0x27e>
     d70:	ebb9 0e05 	subs.w	lr, r9, r5
     d74:	eb63 0804 	sbc.w	r8, r3, r4
     d78:	3801      	subs	r0, #1
     d7a:	b186      	cbz	r6, d9e <__udivmoddi4+0x2a2>
     d7c:	ebb7 030e 	subs.w	r3, r7, lr
     d80:	eb62 0708 	sbc.w	r7, r2, r8
     d84:	fa07 fc0c 	lsl.w	ip, r7, ip
     d88:	40cb      	lsrs	r3, r1
     d8a:	ea4c 0303 	orr.w	r3, ip, r3
     d8e:	40cf      	lsrs	r7, r1
     d90:	e9c6 3700 	strd	r3, r7, [r6]
     d94:	e79c      	b.n	cd0 <__udivmoddi4+0x1d4>
     d96:	4640      	mov	r0, r8
     d98:	e7c7      	b.n	d2a <__udivmoddi4+0x22e>
     d9a:	4643      	mov	r3, r8
     d9c:	e7db      	b.n	d56 <__udivmoddi4+0x25a>
     d9e:	4631      	mov	r1, r6
     da0:	e6fd      	b.n	b9e <__udivmoddi4+0xa2>

00000da2 <strcmp>:
     da2:	f810 2b01 	ldrb.w	r2, [r0], #1
     da6:	f811 3b01 	ldrb.w	r3, [r1], #1
     daa:	2a01      	cmp	r2, #1
     dac:	bf28      	it	cs
     dae:	429a      	cmpcs	r2, r3
     db0:	d0f7      	beq.n	da2 <strcmp>
     db2:	1ad0      	subs	r0, r2, r3
     db4:	4770      	bx	lr

00000db6 <strlen>:
     db6:	4603      	mov	r3, r0
     db8:	f813 2b01 	ldrb.w	r2, [r3], #1
     dbc:	2a00      	cmp	r2, #0
     dbe:	d1fb      	bne.n	db8 <strlen+0x2>
     dc0:	1a18      	subs	r0, r3, r0
     dc2:	3801      	subs	r0, #1
     dc4:	4770      	bx	lr
	...

00000dc8 <main>:
#define MPU6050_ACCEL_FS_SHIFT          3
#define MPU6050_REG_ACCEL_CFG           0x1C


 void main()
{
     dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dcc:	b087      	sub	sp, #28
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     dce:	4c62      	ldr	r4, [pc, #392]	; (f58 <main+0x190>)
     dd0:	4620      	mov	r0, r4
     dd2:	f00b fb2c 	bl	c42e <z_device_ready>
     dd6:	b180      	cbz	r0, dfa <main+0x32>
                return ;
        }

        /* check chip ID */

        if (i2c_reg_read_byte(i2c_dev, MPU6050_CHIP_ID ,
     dd8:	2375      	movs	r3, #117	; 0x75
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
     dda:	f10d 0202 	add.w	r2, sp, #2
     dde:	a902      	add	r1, sp, #8
     de0:	2068      	movs	r0, #104	; 0x68
     de2:	f88d 3008 	strb.w	r3, [sp, #8]
     de6:	f000 febd 	bl	1b64 <i2c_write_read.constprop.0>
     dea:	2800      	cmp	r0, #0
     dec:	da0b      	bge.n	e06 <main+0x3e>
                              MPU6050_REG_CHIP_ID , &id) < 0) {
                printk("Failed to read chip ID.\n");
     dee:	485b      	ldr	r0, [pc, #364]	; (f5c <main+0x194>)
        /*  wake up chip */

        if (i2c_reg_update_byte(i2c_dev, MPU6050_CHIP_ID ,
                                MPU6050_REG_PWR_MGMT1, MPU6050_SLEEP_EN,
                                0) < 0) {
                printk("Failed to wake up chip.");
     df0:	f009 fdb9 	bl	a966 <printk>
        printk("\n");
        k_msleep(2000);

	}

}
     df4:	b007      	add	sp, #28
     df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                printk("I2C: Device is not ready.\n");
     dfa:	4859      	ldr	r0, [pc, #356]	; (f60 <main+0x198>)
}
     dfc:	b007      	add	sp, #28
     dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                printk("I2C: Device is not ready.\n");
     e02:	f009 bdb0 	b.w	a966 <printk>
                printk("chip ID 0x%x\n",id);
     e06:	f89d 1002 	ldrb.w	r1, [sp, #2]
     e0a:	4856      	ldr	r0, [pc, #344]	; (f64 <main+0x19c>)
     e0c:	f009 fdab 	bl	a966 <printk>
        if (id != MPU6050_CHIP_ID) {
     e10:	f89d 5002 	ldrb.w	r5, [sp, #2]
     e14:	2d68      	cmp	r5, #104	; 0x68
     e16:	d001      	beq.n	e1c <main+0x54>
                printk("Invalid chip ID.\n");
     e18:	4853      	ldr	r0, [pc, #332]	; (f68 <main+0x1a0>)
     e1a:	e7e9      	b.n	df0 <main+0x28>
				      uint8_t value)
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
     e1c:	266b      	movs	r6, #107	; 0x6b
	return i2c_write_read(dev, dev_addr,
     e1e:	f10d 0203 	add.w	r2, sp, #3
     e22:	a902      	add	r1, sp, #8
     e24:	4628      	mov	r0, r5
     e26:	f88d 6008 	strb.w	r6, [sp, #8]
     e2a:	f000 fe9b 	bl	1b64 <i2c_write_read.constprop.0>
	if (rc != 0) {
     e2e:	b9b8      	cbnz	r0, e60 <main+0x98>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
     e30:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e34:	f003 02bf 	and.w	r2, r3, #191	; 0xbf
	if (new_value == old_value) {
     e38:	f033 03bf 	bics.w	r3, r3, #191	; 0xbf
     e3c:	d014      	beq.n	e68 <main+0xa0>
	msg.buf = (uint8_t *)buf;
     e3e:	ab01      	add	r3, sp, #4
     e40:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
     e42:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
     e44:	f88d 6004 	strb.w	r6, [sp, #4]
     e48:	f88d 2005 	strb.w	r2, [sp, #5]
	msg.len = num_bytes;
     e4c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     e4e:	f88d 3010 	strb.w	r3, [sp, #16]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     e52:	68a3      	ldr	r3, [r4, #8]
     e54:	2201      	movs	r2, #1
     e56:	689e      	ldr	r6, [r3, #8]
     e58:	a902      	add	r1, sp, #8
     e5a:	462b      	mov	r3, r5
     e5c:	4620      	mov	r0, r4
     e5e:	47b0      	blx	r6
        if (i2c_reg_update_byte(i2c_dev, MPU6050_CHIP_ID ,
     e60:	2800      	cmp	r0, #0
     e62:	da01      	bge.n	e68 <main+0xa0>
                printk("Failed to wake up chip.");
     e64:	4841      	ldr	r0, [pc, #260]	; (f6c <main+0x1a4>)
     e66:	e7c3      	b.n	df0 <main+0x28>
                printk("success wake up chip\n");
     e68:	4841      	ldr	r0, [pc, #260]	; (f70 <main+0x1a8>)
        printk(" X = %f\n", ((AX * 0.244)/1000));
     e6a:	4d42      	ldr	r5, [pc, #264]	; (f74 <main+0x1ac>)
                printk("success wake up chip\n");
     e6c:	f009 fd7b 	bl	a966 <printk>
        printk(" X = %f\n", ((AX * 0.244)/1000));
     e70:	a737      	add	r7, pc, #220	; (adr r7, f50 <main+0x188>)
     e72:	e9d7 6700 	ldrd	r6, r7, [r7]
     e76:	2400      	movs	r4, #0
        	ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x3B,&buf[0],1);
     e78:	a902      	add	r1, sp, #8
     e7a:	203b      	movs	r0, #59	; 0x3b
     e7c:	f009 fd25 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
	        ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x3C,&buf[1],1);
     e80:	f10d 0109 	add.w	r1, sp, #9
     e84:	203c      	movs	r0, #60	; 0x3c
     e86:	f009 fd20 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
		ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x3D,&buf[2],1);
     e8a:	f10d 010a 	add.w	r1, sp, #10
     e8e:	203d      	movs	r0, #61	; 0x3d
     e90:	f009 fd1b 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
                ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x3E,&buf[3],1);
     e94:	f10d 010b 	add.w	r1, sp, #11
     e98:	203e      	movs	r0, #62	; 0x3e
     e9a:	f009 fd16 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
		ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x3F,&buf[4],1);
     e9e:	a903      	add	r1, sp, #12
     ea0:	203f      	movs	r0, #63	; 0x3f
     ea2:	f009 fd12 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
                ret = i2c_burst_read(i2c_dev,MPU6050_CHIP_ID ,0x40,&buf[1],1);
     ea6:	f10d 0109 	add.w	r1, sp, #9
     eaa:	2040      	movs	r0, #64	; 0x40
     eac:	f009 fd0d 	bl	a8ca <i2c_burst_read.constprop.0.isra.0>
        AY = buf[3] + (buf[2] << 8);  
     eb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
     eb4:	f89d 000a 	ldrb.w	r0, [sp, #10]
     eb8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     ebc:	f7ff fac2 	bl	444 <__aeabi_i2d>
        AZ = buf[5] + (buf[4] << 8); 
     ec0:	f89d 300d 	ldrb.w	r3, [sp, #13]
        AY = buf[3] + (buf[2] << 8);  
     ec4:	4680      	mov	r8, r0
        AZ = buf[5] + (buf[4] << 8); 
     ec6:	f89d 000c 	ldrb.w	r0, [sp, #12]
     eca:	eb03 2000 	add.w	r0, r3, r0, lsl #8
        AY = buf[3] + (buf[2] << 8);  
     ece:	4689      	mov	r9, r1
        AZ = buf[5] + (buf[4] << 8); 
     ed0:	f7ff fab8 	bl	444 <__aeabi_i2d>
        AX = buf[1] + (buf[0] << 8);  
     ed4:	f89d 3009 	ldrb.w	r3, [sp, #9]
        AZ = buf[5] + (buf[4] << 8); 
     ed8:	4682      	mov	sl, r0
        AX = buf[1] + (buf[0] << 8);  
     eda:	f89d 0008 	ldrb.w	r0, [sp, #8]
     ede:	eb03 2000 	add.w	r0, r3, r0, lsl #8
        AZ = buf[5] + (buf[4] << 8); 
     ee2:	468b      	mov	fp, r1
        AX = buf[1] + (buf[0] << 8);  
     ee4:	f7ff faae 	bl	444 <__aeabi_i2d>
        printk(" X = %f\n", ((AX * 0.244)/1000));
     ee8:	4632      	mov	r2, r6
     eea:	463b      	mov	r3, r7
     eec:	f7ff fb14 	bl	518 <__aeabi_dmul>
     ef0:	4622      	mov	r2, r4
     ef2:	462b      	mov	r3, r5
     ef4:	f7ff fc3a 	bl	76c <__aeabi_ddiv>
     ef8:	4602      	mov	r2, r0
     efa:	460b      	mov	r3, r1
     efc:	481e      	ldr	r0, [pc, #120]	; (f78 <main+0x1b0>)
     efe:	f009 fd32 	bl	a966 <printk>
        printk(" Y = %f\n", ((AY * 0.244)/1000));
     f02:	4632      	mov	r2, r6
     f04:	463b      	mov	r3, r7
     f06:	4640      	mov	r0, r8
     f08:	4649      	mov	r1, r9
     f0a:	f7ff fb05 	bl	518 <__aeabi_dmul>
     f0e:	4622      	mov	r2, r4
     f10:	462b      	mov	r3, r5
     f12:	f7ff fc2b 	bl	76c <__aeabi_ddiv>
     f16:	4602      	mov	r2, r0
     f18:	460b      	mov	r3, r1
     f1a:	4818      	ldr	r0, [pc, #96]	; (f7c <main+0x1b4>)
     f1c:	f009 fd23 	bl	a966 <printk>
        printk(" Z = %f\n", ((AZ * 0.244)/1000));
     f20:	4632      	mov	r2, r6
     f22:	463b      	mov	r3, r7
     f24:	4650      	mov	r0, sl
     f26:	4659      	mov	r1, fp
     f28:	f7ff faf6 	bl	518 <__aeabi_dmul>
     f2c:	4622      	mov	r2, r4
     f2e:	462b      	mov	r3, r5
     f30:	f7ff fc1c 	bl	76c <__aeabi_ddiv>
     f34:	4602      	mov	r2, r0
     f36:	460b      	mov	r3, r1
     f38:	4811      	ldr	r0, [pc, #68]	; (f80 <main+0x1b8>)
     f3a:	f009 fd14 	bl	a966 <printk>
        printk("\n");
     f3e:	4811      	ldr	r0, [pc, #68]	; (f84 <main+0x1bc>)
     f40:	f009 fd11 	bl	a966 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     f44:	2100      	movs	r1, #0
     f46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     f4a:	f007 fb43 	bl	85d4 <z_impl_k_sleep>
     f4e:	e793      	b.n	e78 <main+0xb0>
     f50:	5a1cac08 	.word	0x5a1cac08
     f54:	3fcf3b64 	.word	0x3fcf3b64
     f58:	0000d3dc 	.word	0x0000d3dc
     f5c:	0000ddb3 	.word	0x0000ddb3
     f60:	0000dd98 	.word	0x0000dd98
     f64:	0000ddcc 	.word	0x0000ddcc
     f68:	0000ddda 	.word	0x0000ddda
     f6c:	0000ddec 	.word	0x0000ddec
     f70:	0000de04 	.word	0x0000de04
     f74:	408f4000 	.word	0x408f4000
     f78:	0000de1a 	.word	0x0000de1a
     f7c:	0000de23 	.word	0x0000de23
     f80:	0000de2c 	.word	0x0000de2c
     f84:	0000df88 	.word	0x0000df88

00000f88 <_dtoa_r>:
     f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f8e:	b099      	sub	sp, #100	; 0x64
     f90:	4616      	mov	r6, r2
     f92:	461f      	mov	r7, r3
     f94:	e9cd 6704 	strd	r6, r7, [sp, #16]
     f98:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
     f9c:	4605      	mov	r5, r0
     f9e:	b974      	cbnz	r4, fbe <_dtoa_r+0x36>
     fa0:	2010      	movs	r0, #16
     fa2:	f007 fecb 	bl	8d3c <malloc>
     fa6:	4602      	mov	r2, r0
     fa8:	6268      	str	r0, [r5, #36]	; 0x24
     faa:	b920      	cbnz	r0, fb6 <_dtoa_r+0x2e>
     fac:	4ba8      	ldr	r3, [pc, #672]	; (1250 <_dtoa_r+0x2c8>)
     fae:	21ea      	movs	r1, #234	; 0xea
     fb0:	48a8      	ldr	r0, [pc, #672]	; (1254 <_dtoa_r+0x2cc>)
     fb2:	f009 f829 	bl	a008 <__assert_func>
     fb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
     fba:	6004      	str	r4, [r0, #0]
     fbc:	60c4      	str	r4, [r0, #12]
     fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     fc0:	6819      	ldr	r1, [r3, #0]
     fc2:	b151      	cbz	r1, fda <_dtoa_r+0x52>
     fc4:	685a      	ldr	r2, [r3, #4]
     fc6:	604a      	str	r2, [r1, #4]
     fc8:	2301      	movs	r3, #1
     fca:	4093      	lsls	r3, r2
     fcc:	608b      	str	r3, [r1, #8]
     fce:	4628      	mov	r0, r5
     fd0:	f008 fc46 	bl	9860 <_Bfree>
     fd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     fd6:	2200      	movs	r2, #0
     fd8:	601a      	str	r2, [r3, #0]
     fda:	1e3b      	subs	r3, r7, #0
     fdc:	bfb9      	ittee	lt
     fde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
     fe2:	9305      	strlt	r3, [sp, #20]
     fe4:	2300      	movge	r3, #0
     fe6:	f8c8 3000 	strge.w	r3, [r8]
     fea:	f8dd 9014 	ldr.w	r9, [sp, #20]
     fee:	4b9a      	ldr	r3, [pc, #616]	; (1258 <_dtoa_r+0x2d0>)
     ff0:	bfbc      	itt	lt
     ff2:	2201      	movlt	r2, #1
     ff4:	f8c8 2000 	strlt.w	r2, [r8]
     ff8:	ea33 0309 	bics.w	r3, r3, r9
     ffc:	d119      	bne.n	1032 <_dtoa_r+0xaa>
     ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1000:	f242 730f 	movw	r3, #9999	; 0x270f
    1004:	6013      	str	r3, [r2, #0]
    1006:	f3c9 0313 	ubfx	r3, r9, #0, #20
    100a:	4333      	orrs	r3, r6
    100c:	f000 8580 	beq.w	1b10 <_dtoa_r+0xb88>
    1010:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1012:	b953      	cbnz	r3, 102a <_dtoa_r+0xa2>
    1014:	4b91      	ldr	r3, [pc, #580]	; (125c <_dtoa_r+0x2d4>)
    1016:	e022      	b.n	105e <_dtoa_r+0xd6>
    1018:	4b91      	ldr	r3, [pc, #580]	; (1260 <_dtoa_r+0x2d8>)
    101a:	9303      	str	r3, [sp, #12]
    101c:	3308      	adds	r3, #8
    101e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1020:	6013      	str	r3, [r2, #0]
    1022:	9803      	ldr	r0, [sp, #12]
    1024:	b019      	add	sp, #100	; 0x64
    1026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    102a:	4b8c      	ldr	r3, [pc, #560]	; (125c <_dtoa_r+0x2d4>)
    102c:	9303      	str	r3, [sp, #12]
    102e:	3303      	adds	r3, #3
    1030:	e7f5      	b.n	101e <_dtoa_r+0x96>
    1032:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1036:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    103a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    103e:	2200      	movs	r2, #0
    1040:	2300      	movs	r3, #0
    1042:	f7ff fceb 	bl	a1c <__aeabi_dcmpeq>
    1046:	4680      	mov	r8, r0
    1048:	b158      	cbz	r0, 1062 <_dtoa_r+0xda>
    104a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    104c:	2301      	movs	r3, #1
    104e:	6013      	str	r3, [r2, #0]
    1050:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1052:	2b00      	cmp	r3, #0
    1054:	f000 8559 	beq.w	1b0a <_dtoa_r+0xb82>
    1058:	4882      	ldr	r0, [pc, #520]	; (1264 <_dtoa_r+0x2dc>)
    105a:	6018      	str	r0, [r3, #0]
    105c:	1e43      	subs	r3, r0, #1
    105e:	9303      	str	r3, [sp, #12]
    1060:	e7df      	b.n	1022 <_dtoa_r+0x9a>
    1062:	ab16      	add	r3, sp, #88	; 0x58
    1064:	9301      	str	r3, [sp, #4]
    1066:	ab17      	add	r3, sp, #92	; 0x5c
    1068:	9300      	str	r3, [sp, #0]
    106a:	4628      	mov	r0, r5
    106c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1070:	f008 fe6e 	bl	9d50 <__d2b>
    1074:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1078:	4683      	mov	fp, r0
    107a:	2c00      	cmp	r4, #0
    107c:	d07e      	beq.n	117c <_dtoa_r+0x1f4>
    107e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1080:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1084:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    108c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1090:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1094:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1098:	4b73      	ldr	r3, [pc, #460]	; (1268 <_dtoa_r+0x2e0>)
    109a:	2200      	movs	r2, #0
    109c:	f7ff f884 	bl	1a8 <__aeabi_dsub>
    10a0:	a365      	add	r3, pc, #404	; (adr r3, 1238 <_dtoa_r+0x2b0>)
    10a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    10a6:	f7ff fa37 	bl	518 <__aeabi_dmul>
    10aa:	a365      	add	r3, pc, #404	; (adr r3, 1240 <_dtoa_r+0x2b8>)
    10ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    10b0:	f7ff f87c 	bl	1ac <__adddf3>
    10b4:	4606      	mov	r6, r0
    10b6:	4620      	mov	r0, r4
    10b8:	460f      	mov	r7, r1
    10ba:	f7ff f9c3 	bl	444 <__aeabi_i2d>
    10be:	a362      	add	r3, pc, #392	; (adr r3, 1248 <_dtoa_r+0x2c0>)
    10c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    10c4:	f7ff fa28 	bl	518 <__aeabi_dmul>
    10c8:	4602      	mov	r2, r0
    10ca:	460b      	mov	r3, r1
    10cc:	4630      	mov	r0, r6
    10ce:	4639      	mov	r1, r7
    10d0:	f7ff f86c 	bl	1ac <__adddf3>
    10d4:	4606      	mov	r6, r0
    10d6:	460f      	mov	r7, r1
    10d8:	f7ff fce8 	bl	aac <__aeabi_d2iz>
    10dc:	2200      	movs	r2, #0
    10de:	4682      	mov	sl, r0
    10e0:	2300      	movs	r3, #0
    10e2:	4630      	mov	r0, r6
    10e4:	4639      	mov	r1, r7
    10e6:	f7ff fca3 	bl	a30 <__aeabi_dcmplt>
    10ea:	b148      	cbz	r0, 1100 <_dtoa_r+0x178>
    10ec:	4650      	mov	r0, sl
    10ee:	f7ff f9a9 	bl	444 <__aeabi_i2d>
    10f2:	4632      	mov	r2, r6
    10f4:	463b      	mov	r3, r7
    10f6:	f7ff fc91 	bl	a1c <__aeabi_dcmpeq>
    10fa:	b908      	cbnz	r0, 1100 <_dtoa_r+0x178>
    10fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    1100:	f1ba 0f16 	cmp.w	sl, #22
    1104:	d857      	bhi.n	11b6 <_dtoa_r+0x22e>
    1106:	4b59      	ldr	r3, [pc, #356]	; (126c <_dtoa_r+0x2e4>)
    1108:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    110c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1114:	f7ff fc8c 	bl	a30 <__aeabi_dcmplt>
    1118:	2800      	cmp	r0, #0
    111a:	d04e      	beq.n	11ba <_dtoa_r+0x232>
    111c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    1120:	2300      	movs	r3, #0
    1122:	930f      	str	r3, [sp, #60]	; 0x3c
    1124:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1126:	1b1c      	subs	r4, r3, r4
    1128:	1e63      	subs	r3, r4, #1
    112a:	9309      	str	r3, [sp, #36]	; 0x24
    112c:	bf45      	ittet	mi
    112e:	f1c4 0301 	rsbmi	r3, r4, #1
    1132:	9306      	strmi	r3, [sp, #24]
    1134:	2300      	movpl	r3, #0
    1136:	2300      	movmi	r3, #0
    1138:	bf4c      	ite	mi
    113a:	9309      	strmi	r3, [sp, #36]	; 0x24
    113c:	9306      	strpl	r3, [sp, #24]
    113e:	f1ba 0f00 	cmp.w	sl, #0
    1142:	db3c      	blt.n	11be <_dtoa_r+0x236>
    1144:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1146:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    114a:	4453      	add	r3, sl
    114c:	9309      	str	r3, [sp, #36]	; 0x24
    114e:	2300      	movs	r3, #0
    1150:	930a      	str	r3, [sp, #40]	; 0x28
    1152:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1154:	2b09      	cmp	r3, #9
    1156:	f200 808d 	bhi.w	1274 <_dtoa_r+0x2ec>
    115a:	2b05      	cmp	r3, #5
    115c:	bfc4      	itt	gt
    115e:	3b04      	subgt	r3, #4
    1160:	9322      	strgt	r3, [sp, #136]	; 0x88
    1162:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1164:	f1a3 0302 	sub.w	r3, r3, #2
    1168:	bfcc      	ite	gt
    116a:	2400      	movgt	r4, #0
    116c:	2401      	movle	r4, #1
    116e:	2b03      	cmp	r3, #3
    1170:	f200 808c 	bhi.w	128c <_dtoa_r+0x304>
    1174:	e8df f003 	tbb	[pc, r3]
    1178:	5b4d4f2d 	.word	0x5b4d4f2d
    117c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1180:	441c      	add	r4, r3
    1182:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1186:	2b20      	cmp	r3, #32
    1188:	bfc3      	ittte	gt
    118a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    118e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1192:	fa09 f303 	lslgt.w	r3, r9, r3
    1196:	f1c3 0320 	rsble	r3, r3, #32
    119a:	bfc6      	itte	gt
    119c:	fa26 f000 	lsrgt.w	r0, r6, r0
    11a0:	4318      	orrgt	r0, r3
    11a2:	fa06 f003 	lslle.w	r0, r6, r3
    11a6:	f7ff f93d 	bl	424 <__aeabi_ui2d>
    11aa:	2301      	movs	r3, #1
    11ac:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    11b0:	3c01      	subs	r4, #1
    11b2:	9313      	str	r3, [sp, #76]	; 0x4c
    11b4:	e770      	b.n	1098 <_dtoa_r+0x110>
    11b6:	2301      	movs	r3, #1
    11b8:	e7b3      	b.n	1122 <_dtoa_r+0x19a>
    11ba:	900f      	str	r0, [sp, #60]	; 0x3c
    11bc:	e7b2      	b.n	1124 <_dtoa_r+0x19c>
    11be:	9b06      	ldr	r3, [sp, #24]
    11c0:	eba3 030a 	sub.w	r3, r3, sl
    11c4:	9306      	str	r3, [sp, #24]
    11c6:	f1ca 0300 	rsb	r3, sl, #0
    11ca:	930a      	str	r3, [sp, #40]	; 0x28
    11cc:	2300      	movs	r3, #0
    11ce:	930e      	str	r3, [sp, #56]	; 0x38
    11d0:	e7bf      	b.n	1152 <_dtoa_r+0x1ca>
    11d2:	2300      	movs	r3, #0
    11d4:	930b      	str	r3, [sp, #44]	; 0x2c
    11d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    11d8:	2b00      	cmp	r3, #0
    11da:	dc5a      	bgt.n	1292 <_dtoa_r+0x30a>
    11dc:	f04f 0901 	mov.w	r9, #1
    11e0:	f8cd 9020 	str.w	r9, [sp, #32]
    11e4:	464b      	mov	r3, r9
    11e6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    11ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
    11ec:	2200      	movs	r2, #0
    11ee:	6042      	str	r2, [r0, #4]
    11f0:	2204      	movs	r2, #4
    11f2:	f102 0614 	add.w	r6, r2, #20
    11f6:	429e      	cmp	r6, r3
    11f8:	6841      	ldr	r1, [r0, #4]
    11fa:	d950      	bls.n	129e <_dtoa_r+0x316>
    11fc:	4628      	mov	r0, r5
    11fe:	f008 faef 	bl	97e0 <_Balloc>
    1202:	9003      	str	r0, [sp, #12]
    1204:	2800      	cmp	r0, #0
    1206:	d14e      	bne.n	12a6 <_dtoa_r+0x31e>
    1208:	4b19      	ldr	r3, [pc, #100]	; (1270 <_dtoa_r+0x2e8>)
    120a:	4602      	mov	r2, r0
    120c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    1210:	e6ce      	b.n	fb0 <_dtoa_r+0x28>
    1212:	2301      	movs	r3, #1
    1214:	e7de      	b.n	11d4 <_dtoa_r+0x24c>
    1216:	2300      	movs	r3, #0
    1218:	930b      	str	r3, [sp, #44]	; 0x2c
    121a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    121c:	eb0a 0903 	add.w	r9, sl, r3
    1220:	f109 0301 	add.w	r3, r9, #1
    1224:	2b01      	cmp	r3, #1
    1226:	9308      	str	r3, [sp, #32]
    1228:	bfb8      	it	lt
    122a:	2301      	movlt	r3, #1
    122c:	e7dd      	b.n	11ea <_dtoa_r+0x262>
    122e:	2301      	movs	r3, #1
    1230:	e7f2      	b.n	1218 <_dtoa_r+0x290>
    1232:	bf00      	nop
    1234:	f3af 8000 	nop.w
    1238:	636f4361 	.word	0x636f4361
    123c:	3fd287a7 	.word	0x3fd287a7
    1240:	8b60c8b3 	.word	0x8b60c8b3
    1244:	3fc68a28 	.word	0x3fc68a28
    1248:	509f79fb 	.word	0x509f79fb
    124c:	3fd34413 	.word	0x3fd34413
    1250:	0000ef3a 	.word	0x0000ef3a
    1254:	0000ef51 	.word	0x0000ef51
    1258:	7ff00000 	.word	0x7ff00000
    125c:	0000ef36 	.word	0x0000ef36
    1260:	0000ef2d 	.word	0x0000ef2d
    1264:	0000ed3a 	.word	0x0000ed3a
    1268:	3ff80000 	.word	0x3ff80000
    126c:	0000d680 	.word	0x0000d680
    1270:	0000efab 	.word	0x0000efab
    1274:	2401      	movs	r4, #1
    1276:	2300      	movs	r3, #0
    1278:	9322      	str	r3, [sp, #136]	; 0x88
    127a:	940b      	str	r4, [sp, #44]	; 0x2c
    127c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1280:	2200      	movs	r2, #0
    1282:	f8cd 9020 	str.w	r9, [sp, #32]
    1286:	2312      	movs	r3, #18
    1288:	9223      	str	r2, [sp, #140]	; 0x8c
    128a:	e7ae      	b.n	11ea <_dtoa_r+0x262>
    128c:	2301      	movs	r3, #1
    128e:	930b      	str	r3, [sp, #44]	; 0x2c
    1290:	e7f4      	b.n	127c <_dtoa_r+0x2f4>
    1292:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1296:	f8cd 9020 	str.w	r9, [sp, #32]
    129a:	464b      	mov	r3, r9
    129c:	e7a5      	b.n	11ea <_dtoa_r+0x262>
    129e:	3101      	adds	r1, #1
    12a0:	6041      	str	r1, [r0, #4]
    12a2:	0052      	lsls	r2, r2, #1
    12a4:	e7a5      	b.n	11f2 <_dtoa_r+0x26a>
    12a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    12a8:	9a03      	ldr	r2, [sp, #12]
    12aa:	601a      	str	r2, [r3, #0]
    12ac:	9b08      	ldr	r3, [sp, #32]
    12ae:	2b0e      	cmp	r3, #14
    12b0:	f200 80a8 	bhi.w	1404 <_dtoa_r+0x47c>
    12b4:	2c00      	cmp	r4, #0
    12b6:	f000 80a5 	beq.w	1404 <_dtoa_r+0x47c>
    12ba:	f1ba 0f00 	cmp.w	sl, #0
    12be:	dd34      	ble.n	132a <_dtoa_r+0x3a2>
    12c0:	4a9a      	ldr	r2, [pc, #616]	; (152c <_dtoa_r+0x5a4>)
    12c2:	f00a 030f 	and.w	r3, sl, #15
    12c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    12ca:	e9d3 3400 	ldrd	r3, r4, [r3]
    12ce:	f41a 7f80 	tst.w	sl, #256	; 0x100
    12d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    12d6:	ea4f 142a 	mov.w	r4, sl, asr #4
    12da:	d016      	beq.n	130a <_dtoa_r+0x382>
    12dc:	4b94      	ldr	r3, [pc, #592]	; (1530 <_dtoa_r+0x5a8>)
    12de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    12e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    12e6:	f7ff fa41 	bl	76c <__aeabi_ddiv>
    12ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
    12ee:	f004 040f 	and.w	r4, r4, #15
    12f2:	2703      	movs	r7, #3
    12f4:	4e8e      	ldr	r6, [pc, #568]	; (1530 <_dtoa_r+0x5a8>)
    12f6:	b954      	cbnz	r4, 130e <_dtoa_r+0x386>
    12f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    12fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1300:	f7ff fa34 	bl	76c <__aeabi_ddiv>
    1304:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1308:	e029      	b.n	135e <_dtoa_r+0x3d6>
    130a:	2702      	movs	r7, #2
    130c:	e7f2      	b.n	12f4 <_dtoa_r+0x36c>
    130e:	07e1      	lsls	r1, r4, #31
    1310:	d508      	bpl.n	1324 <_dtoa_r+0x39c>
    1312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1316:	e9d6 2300 	ldrd	r2, r3, [r6]
    131a:	f7ff f8fd 	bl	518 <__aeabi_dmul>
    131e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1322:	3701      	adds	r7, #1
    1324:	1064      	asrs	r4, r4, #1
    1326:	3608      	adds	r6, #8
    1328:	e7e5      	b.n	12f6 <_dtoa_r+0x36e>
    132a:	f000 80a5 	beq.w	1478 <_dtoa_r+0x4f0>
    132e:	f1ca 0400 	rsb	r4, sl, #0
    1332:	4b7e      	ldr	r3, [pc, #504]	; (152c <_dtoa_r+0x5a4>)
    1334:	4e7e      	ldr	r6, [pc, #504]	; (1530 <_dtoa_r+0x5a8>)
    1336:	f004 020f 	and.w	r2, r4, #15
    133a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    133e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1346:	f7ff f8e7 	bl	518 <__aeabi_dmul>
    134a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    134e:	1124      	asrs	r4, r4, #4
    1350:	2300      	movs	r3, #0
    1352:	2702      	movs	r7, #2
    1354:	2c00      	cmp	r4, #0
    1356:	f040 8084 	bne.w	1462 <_dtoa_r+0x4da>
    135a:	2b00      	cmp	r3, #0
    135c:	d1d2      	bne.n	1304 <_dtoa_r+0x37c>
    135e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1360:	2b00      	cmp	r3, #0
    1362:	f000 808b 	beq.w	147c <_dtoa_r+0x4f4>
    1366:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    136a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    136e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1372:	4b70      	ldr	r3, [pc, #448]	; (1534 <_dtoa_r+0x5ac>)
    1374:	2200      	movs	r2, #0
    1376:	f7ff fb5b 	bl	a30 <__aeabi_dcmplt>
    137a:	2800      	cmp	r0, #0
    137c:	d07e      	beq.n	147c <_dtoa_r+0x4f4>
    137e:	9b08      	ldr	r3, [sp, #32]
    1380:	2b00      	cmp	r3, #0
    1382:	d07b      	beq.n	147c <_dtoa_r+0x4f4>
    1384:	f1b9 0f00 	cmp.w	r9, #0
    1388:	dd38      	ble.n	13fc <_dtoa_r+0x474>
    138a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    138e:	4b6a      	ldr	r3, [pc, #424]	; (1538 <_dtoa_r+0x5b0>)
    1390:	2200      	movs	r2, #0
    1392:	f7ff f8c1 	bl	518 <__aeabi_dmul>
    1396:	e9cd 0104 	strd	r0, r1, [sp, #16]
    139a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    139e:	3701      	adds	r7, #1
    13a0:	464c      	mov	r4, r9
    13a2:	4638      	mov	r0, r7
    13a4:	f7ff f84e 	bl	444 <__aeabi_i2d>
    13a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    13ac:	f7ff f8b4 	bl	518 <__aeabi_dmul>
    13b0:	4b62      	ldr	r3, [pc, #392]	; (153c <_dtoa_r+0x5b4>)
    13b2:	2200      	movs	r2, #0
    13b4:	f7fe fefa 	bl	1ac <__adddf3>
    13b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    13bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    13c0:	9611      	str	r6, [sp, #68]	; 0x44
    13c2:	2c00      	cmp	r4, #0
    13c4:	d15d      	bne.n	1482 <_dtoa_r+0x4fa>
    13c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    13ca:	4b5d      	ldr	r3, [pc, #372]	; (1540 <_dtoa_r+0x5b8>)
    13cc:	2200      	movs	r2, #0
    13ce:	f7fe feeb 	bl	1a8 <__aeabi_dsub>
    13d2:	4602      	mov	r2, r0
    13d4:	460b      	mov	r3, r1
    13d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    13da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    13dc:	4633      	mov	r3, r6
    13de:	f7ff fb45 	bl	a6c <__aeabi_dcmpgt>
    13e2:	2800      	cmp	r0, #0
    13e4:	f040 829c 	bne.w	1920 <_dtoa_r+0x998>
    13e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    13ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    13ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    13f2:	f7ff fb1d 	bl	a30 <__aeabi_dcmplt>
    13f6:	2800      	cmp	r0, #0
    13f8:	f040 8290 	bne.w	191c <_dtoa_r+0x994>
    13fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1400:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1406:	2b00      	cmp	r3, #0
    1408:	f2c0 8152 	blt.w	16b0 <_dtoa_r+0x728>
    140c:	f1ba 0f0e 	cmp.w	sl, #14
    1410:	f300 814e 	bgt.w	16b0 <_dtoa_r+0x728>
    1414:	4b45      	ldr	r3, [pc, #276]	; (152c <_dtoa_r+0x5a4>)
    1416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    141a:	e9d3 3400 	ldrd	r3, r4, [r3]
    141e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1424:	2b00      	cmp	r3, #0
    1426:	f280 80db 	bge.w	15e0 <_dtoa_r+0x658>
    142a:	9b08      	ldr	r3, [sp, #32]
    142c:	2b00      	cmp	r3, #0
    142e:	f300 80d7 	bgt.w	15e0 <_dtoa_r+0x658>
    1432:	f040 8272 	bne.w	191a <_dtoa_r+0x992>
    1436:	4b42      	ldr	r3, [pc, #264]	; (1540 <_dtoa_r+0x5b8>)
    1438:	2200      	movs	r2, #0
    143a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    143e:	f7ff f86b 	bl	518 <__aeabi_dmul>
    1442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1446:	f7ff fb07 	bl	a58 <__aeabi_dcmpge>
    144a:	9c08      	ldr	r4, [sp, #32]
    144c:	4626      	mov	r6, r4
    144e:	2800      	cmp	r0, #0
    1450:	f040 8248 	bne.w	18e4 <_dtoa_r+0x95c>
    1454:	9f03      	ldr	r7, [sp, #12]
    1456:	2331      	movs	r3, #49	; 0x31
    1458:	f807 3b01 	strb.w	r3, [r7], #1
    145c:	f10a 0a01 	add.w	sl, sl, #1
    1460:	e244      	b.n	18ec <_dtoa_r+0x964>
    1462:	07e2      	lsls	r2, r4, #31
    1464:	d505      	bpl.n	1472 <_dtoa_r+0x4ea>
    1466:	e9d6 2300 	ldrd	r2, r3, [r6]
    146a:	f7ff f855 	bl	518 <__aeabi_dmul>
    146e:	3701      	adds	r7, #1
    1470:	2301      	movs	r3, #1
    1472:	1064      	asrs	r4, r4, #1
    1474:	3608      	adds	r6, #8
    1476:	e76d      	b.n	1354 <_dtoa_r+0x3cc>
    1478:	2702      	movs	r7, #2
    147a:	e770      	b.n	135e <_dtoa_r+0x3d6>
    147c:	9c08      	ldr	r4, [sp, #32]
    147e:	46d0      	mov	r8, sl
    1480:	e78f      	b.n	13a2 <_dtoa_r+0x41a>
    1482:	9903      	ldr	r1, [sp, #12]
    1484:	4b29      	ldr	r3, [pc, #164]	; (152c <_dtoa_r+0x5a4>)
    1486:	4421      	add	r1, r4
    1488:	9112      	str	r1, [sp, #72]	; 0x48
    148a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    148c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1490:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1494:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1498:	2900      	cmp	r1, #0
    149a:	d055      	beq.n	1548 <_dtoa_r+0x5c0>
    149c:	4929      	ldr	r1, [pc, #164]	; (1544 <_dtoa_r+0x5bc>)
    149e:	2000      	movs	r0, #0
    14a0:	f7ff f964 	bl	76c <__aeabi_ddiv>
    14a4:	463b      	mov	r3, r7
    14a6:	4632      	mov	r2, r6
    14a8:	f7fe fe7e 	bl	1a8 <__aeabi_dsub>
    14ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    14b0:	9f03      	ldr	r7, [sp, #12]
    14b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    14b6:	f7ff faf9 	bl	aac <__aeabi_d2iz>
    14ba:	4604      	mov	r4, r0
    14bc:	f7fe ffc2 	bl	444 <__aeabi_i2d>
    14c0:	4602      	mov	r2, r0
    14c2:	460b      	mov	r3, r1
    14c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    14c8:	f7fe fe6e 	bl	1a8 <__aeabi_dsub>
    14cc:	3430      	adds	r4, #48	; 0x30
    14ce:	4602      	mov	r2, r0
    14d0:	460b      	mov	r3, r1
    14d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    14d6:	f807 4b01 	strb.w	r4, [r7], #1
    14da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    14de:	f7ff faa7 	bl	a30 <__aeabi_dcmplt>
    14e2:	2800      	cmp	r0, #0
    14e4:	d174      	bne.n	15d0 <_dtoa_r+0x648>
    14e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    14ea:	4912      	ldr	r1, [pc, #72]	; (1534 <_dtoa_r+0x5ac>)
    14ec:	2000      	movs	r0, #0
    14ee:	f7fe fe5b 	bl	1a8 <__aeabi_dsub>
    14f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    14f6:	f7ff fa9b 	bl	a30 <__aeabi_dcmplt>
    14fa:	2800      	cmp	r0, #0
    14fc:	f040 80b7 	bne.w	166e <_dtoa_r+0x6e6>
    1500:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1502:	429f      	cmp	r7, r3
    1504:	f43f af7a 	beq.w	13fc <_dtoa_r+0x474>
    1508:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    150c:	4b0a      	ldr	r3, [pc, #40]	; (1538 <_dtoa_r+0x5b0>)
    150e:	2200      	movs	r2, #0
    1510:	f7ff f802 	bl	518 <__aeabi_dmul>
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <_dtoa_r+0x5b0>)
    1516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    151a:	2200      	movs	r2, #0
    151c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1520:	f7fe fffa 	bl	518 <__aeabi_dmul>
    1524:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1528:	e7c3      	b.n	14b2 <_dtoa_r+0x52a>
    152a:	bf00      	nop
    152c:	0000d680 	.word	0x0000d680
    1530:	0000d658 	.word	0x0000d658
    1534:	3ff00000 	.word	0x3ff00000
    1538:	40240000 	.word	0x40240000
    153c:	401c0000 	.word	0x401c0000
    1540:	40140000 	.word	0x40140000
    1544:	3fe00000 	.word	0x3fe00000
    1548:	4630      	mov	r0, r6
    154a:	4639      	mov	r1, r7
    154c:	f7fe ffe4 	bl	518 <__aeabi_dmul>
    1550:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1554:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1556:	9c03      	ldr	r4, [sp, #12]
    1558:	9314      	str	r3, [sp, #80]	; 0x50
    155a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    155e:	f7ff faa5 	bl	aac <__aeabi_d2iz>
    1562:	9015      	str	r0, [sp, #84]	; 0x54
    1564:	f7fe ff6e 	bl	444 <__aeabi_i2d>
    1568:	4602      	mov	r2, r0
    156a:	460b      	mov	r3, r1
    156c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1570:	f7fe fe1a 	bl	1a8 <__aeabi_dsub>
    1574:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1576:	3330      	adds	r3, #48	; 0x30
    1578:	f804 3b01 	strb.w	r3, [r4], #1
    157c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    157e:	429c      	cmp	r4, r3
    1580:	4606      	mov	r6, r0
    1582:	460f      	mov	r7, r1
    1584:	f04f 0200 	mov.w	r2, #0
    1588:	d124      	bne.n	15d4 <_dtoa_r+0x64c>
    158a:	4ba4      	ldr	r3, [pc, #656]	; (181c <_dtoa_r+0x894>)
    158c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1590:	f7fe fe0c 	bl	1ac <__adddf3>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1
    1598:	4630      	mov	r0, r6
    159a:	4639      	mov	r1, r7
    159c:	f7ff fa66 	bl	a6c <__aeabi_dcmpgt>
    15a0:	2800      	cmp	r0, #0
    15a2:	d163      	bne.n	166c <_dtoa_r+0x6e4>
    15a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    15a8:	499c      	ldr	r1, [pc, #624]	; (181c <_dtoa_r+0x894>)
    15aa:	2000      	movs	r0, #0
    15ac:	f7fe fdfc 	bl	1a8 <__aeabi_dsub>
    15b0:	4602      	mov	r2, r0
    15b2:	460b      	mov	r3, r1
    15b4:	4630      	mov	r0, r6
    15b6:	4639      	mov	r1, r7
    15b8:	f7ff fa3a 	bl	a30 <__aeabi_dcmplt>
    15bc:	2800      	cmp	r0, #0
    15be:	f43f af1d 	beq.w	13fc <_dtoa_r+0x474>
    15c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    15c4:	1e7b      	subs	r3, r7, #1
    15c6:	9314      	str	r3, [sp, #80]	; 0x50
    15c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    15cc:	2b30      	cmp	r3, #48	; 0x30
    15ce:	d0f8      	beq.n	15c2 <_dtoa_r+0x63a>
    15d0:	46c2      	mov	sl, r8
    15d2:	e03b      	b.n	164c <_dtoa_r+0x6c4>
    15d4:	4b92      	ldr	r3, [pc, #584]	; (1820 <_dtoa_r+0x898>)
    15d6:	f7fe ff9f 	bl	518 <__aeabi_dmul>
    15da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    15de:	e7bc      	b.n	155a <_dtoa_r+0x5d2>
    15e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    15e4:	9f03      	ldr	r7, [sp, #12]
    15e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    15ea:	4640      	mov	r0, r8
    15ec:	4649      	mov	r1, r9
    15ee:	f7ff f8bd 	bl	76c <__aeabi_ddiv>
    15f2:	f7ff fa5b 	bl	aac <__aeabi_d2iz>
    15f6:	4604      	mov	r4, r0
    15f8:	f7fe ff24 	bl	444 <__aeabi_i2d>
    15fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1600:	f7fe ff8a 	bl	518 <__aeabi_dmul>
    1604:	f104 0630 	add.w	r6, r4, #48	; 0x30
    1608:	4602      	mov	r2, r0
    160a:	460b      	mov	r3, r1
    160c:	4640      	mov	r0, r8
    160e:	4649      	mov	r1, r9
    1610:	f7fe fdca 	bl	1a8 <__aeabi_dsub>
    1614:	f807 6b01 	strb.w	r6, [r7], #1
    1618:	9e03      	ldr	r6, [sp, #12]
    161a:	f8dd c020 	ldr.w	ip, [sp, #32]
    161e:	1bbe      	subs	r6, r7, r6
    1620:	45b4      	cmp	ip, r6
    1622:	4602      	mov	r2, r0
    1624:	460b      	mov	r3, r1
    1626:	d136      	bne.n	1696 <_dtoa_r+0x70e>
    1628:	f7fe fdc0 	bl	1ac <__adddf3>
    162c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1630:	4680      	mov	r8, r0
    1632:	4689      	mov	r9, r1
    1634:	f7ff fa1a 	bl	a6c <__aeabi_dcmpgt>
    1638:	bb58      	cbnz	r0, 1692 <_dtoa_r+0x70a>
    163a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    163e:	4640      	mov	r0, r8
    1640:	4649      	mov	r1, r9
    1642:	f7ff f9eb 	bl	a1c <__aeabi_dcmpeq>
    1646:	b108      	cbz	r0, 164c <_dtoa_r+0x6c4>
    1648:	07e1      	lsls	r1, r4, #31
    164a:	d422      	bmi.n	1692 <_dtoa_r+0x70a>
    164c:	4628      	mov	r0, r5
    164e:	4659      	mov	r1, fp
    1650:	f008 f906 	bl	9860 <_Bfree>
    1654:	2300      	movs	r3, #0
    1656:	703b      	strb	r3, [r7, #0]
    1658:	9b24      	ldr	r3, [sp, #144]	; 0x90
    165a:	f10a 0001 	add.w	r0, sl, #1
    165e:	6018      	str	r0, [r3, #0]
    1660:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1662:	2b00      	cmp	r3, #0
    1664:	f43f acdd 	beq.w	1022 <_dtoa_r+0x9a>
    1668:	601f      	str	r7, [r3, #0]
    166a:	e4da      	b.n	1022 <_dtoa_r+0x9a>
    166c:	4627      	mov	r7, r4
    166e:	463b      	mov	r3, r7
    1670:	461f      	mov	r7, r3
    1672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1676:	2a39      	cmp	r2, #57	; 0x39
    1678:	d107      	bne.n	168a <_dtoa_r+0x702>
    167a:	9a03      	ldr	r2, [sp, #12]
    167c:	429a      	cmp	r2, r3
    167e:	d1f7      	bne.n	1670 <_dtoa_r+0x6e8>
    1680:	9903      	ldr	r1, [sp, #12]
    1682:	2230      	movs	r2, #48	; 0x30
    1684:	f108 0801 	add.w	r8, r8, #1
    1688:	700a      	strb	r2, [r1, #0]
    168a:	781a      	ldrb	r2, [r3, #0]
    168c:	3201      	adds	r2, #1
    168e:	701a      	strb	r2, [r3, #0]
    1690:	e79e      	b.n	15d0 <_dtoa_r+0x648>
    1692:	46d0      	mov	r8, sl
    1694:	e7eb      	b.n	166e <_dtoa_r+0x6e6>
    1696:	4b62      	ldr	r3, [pc, #392]	; (1820 <_dtoa_r+0x898>)
    1698:	2200      	movs	r2, #0
    169a:	f7fe ff3d 	bl	518 <__aeabi_dmul>
    169e:	2200      	movs	r2, #0
    16a0:	2300      	movs	r3, #0
    16a2:	4680      	mov	r8, r0
    16a4:	4689      	mov	r9, r1
    16a6:	f7ff f9b9 	bl	a1c <__aeabi_dcmpeq>
    16aa:	2800      	cmp	r0, #0
    16ac:	d09b      	beq.n	15e6 <_dtoa_r+0x65e>
    16ae:	e7cd      	b.n	164c <_dtoa_r+0x6c4>
    16b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    16b2:	2a00      	cmp	r2, #0
    16b4:	f000 80d0 	beq.w	1858 <_dtoa_r+0x8d0>
    16b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    16ba:	2a01      	cmp	r2, #1
    16bc:	f300 80b2 	bgt.w	1824 <_dtoa_r+0x89c>
    16c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    16c2:	2a00      	cmp	r2, #0
    16c4:	f000 80a6 	beq.w	1814 <_dtoa_r+0x88c>
    16c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    16cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16ce:	9f06      	ldr	r7, [sp, #24]
    16d0:	9a06      	ldr	r2, [sp, #24]
    16d2:	441a      	add	r2, r3
    16d4:	9206      	str	r2, [sp, #24]
    16d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16d8:	2101      	movs	r1, #1
    16da:	441a      	add	r2, r3
    16dc:	4628      	mov	r0, r5
    16de:	9209      	str	r2, [sp, #36]	; 0x24
    16e0:	f008 f926 	bl	9930 <__i2b>
    16e4:	4606      	mov	r6, r0
    16e6:	2f00      	cmp	r7, #0
    16e8:	dd0c      	ble.n	1704 <_dtoa_r+0x77c>
    16ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16ec:	2b00      	cmp	r3, #0
    16ee:	dd09      	ble.n	1704 <_dtoa_r+0x77c>
    16f0:	42bb      	cmp	r3, r7
    16f2:	9a06      	ldr	r2, [sp, #24]
    16f4:	bfa8      	it	ge
    16f6:	463b      	movge	r3, r7
    16f8:	1ad2      	subs	r2, r2, r3
    16fa:	9206      	str	r2, [sp, #24]
    16fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16fe:	1aff      	subs	r7, r7, r3
    1700:	1ad3      	subs	r3, r2, r3
    1702:	9309      	str	r3, [sp, #36]	; 0x24
    1704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1706:	b1f3      	cbz	r3, 1746 <_dtoa_r+0x7be>
    1708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    170a:	2b00      	cmp	r3, #0
    170c:	f000 80a8 	beq.w	1860 <_dtoa_r+0x8d8>
    1710:	2c00      	cmp	r4, #0
    1712:	dd10      	ble.n	1736 <_dtoa_r+0x7ae>
    1714:	4631      	mov	r1, r6
    1716:	4622      	mov	r2, r4
    1718:	4628      	mov	r0, r5
    171a:	f008 f9c7 	bl	9aac <__pow5mult>
    171e:	465a      	mov	r2, fp
    1720:	4601      	mov	r1, r0
    1722:	4606      	mov	r6, r0
    1724:	4628      	mov	r0, r5
    1726:	f008 f919 	bl	995c <__multiply>
    172a:	4659      	mov	r1, fp
    172c:	4680      	mov	r8, r0
    172e:	4628      	mov	r0, r5
    1730:	f008 f896 	bl	9860 <_Bfree>
    1734:	46c3      	mov	fp, r8
    1736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1738:	1b1a      	subs	r2, r3, r4
    173a:	d004      	beq.n	1746 <_dtoa_r+0x7be>
    173c:	4659      	mov	r1, fp
    173e:	4628      	mov	r0, r5
    1740:	f008 f9b4 	bl	9aac <__pow5mult>
    1744:	4683      	mov	fp, r0
    1746:	2101      	movs	r1, #1
    1748:	4628      	mov	r0, r5
    174a:	f008 f8f1 	bl	9930 <__i2b>
    174e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1750:	2b00      	cmp	r3, #0
    1752:	4604      	mov	r4, r0
    1754:	f340 8086 	ble.w	1864 <_dtoa_r+0x8dc>
    1758:	461a      	mov	r2, r3
    175a:	4601      	mov	r1, r0
    175c:	4628      	mov	r0, r5
    175e:	f008 f9a5 	bl	9aac <__pow5mult>
    1762:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1764:	2b01      	cmp	r3, #1
    1766:	4604      	mov	r4, r0
    1768:	dd7f      	ble.n	186a <_dtoa_r+0x8e2>
    176a:	f04f 0800 	mov.w	r8, #0
    176e:	6923      	ldr	r3, [r4, #16]
    1770:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1774:	6918      	ldr	r0, [r3, #16]
    1776:	f00b fbb3 	bl	cee0 <__hi0bits>
    177a:	f1c0 0020 	rsb	r0, r0, #32
    177e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1780:	4418      	add	r0, r3
    1782:	f010 001f 	ands.w	r0, r0, #31
    1786:	f000 8092 	beq.w	18ae <_dtoa_r+0x926>
    178a:	f1c0 0320 	rsb	r3, r0, #32
    178e:	2b04      	cmp	r3, #4
    1790:	f340 808a 	ble.w	18a8 <_dtoa_r+0x920>
    1794:	f1c0 001c 	rsb	r0, r0, #28
    1798:	9b06      	ldr	r3, [sp, #24]
    179a:	4403      	add	r3, r0
    179c:	9306      	str	r3, [sp, #24]
    179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17a0:	4403      	add	r3, r0
    17a2:	4407      	add	r7, r0
    17a4:	9309      	str	r3, [sp, #36]	; 0x24
    17a6:	9b06      	ldr	r3, [sp, #24]
    17a8:	2b00      	cmp	r3, #0
    17aa:	dd05      	ble.n	17b8 <_dtoa_r+0x830>
    17ac:	4659      	mov	r1, fp
    17ae:	461a      	mov	r2, r3
    17b0:	4628      	mov	r0, r5
    17b2:	f008 f9d5 	bl	9b60 <__lshift>
    17b6:	4683      	mov	fp, r0
    17b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17ba:	2b00      	cmp	r3, #0
    17bc:	dd05      	ble.n	17ca <_dtoa_r+0x842>
    17be:	4621      	mov	r1, r4
    17c0:	461a      	mov	r2, r3
    17c2:	4628      	mov	r0, r5
    17c4:	f008 f9cc 	bl	9b60 <__lshift>
    17c8:	4604      	mov	r4, r0
    17ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17cc:	2b00      	cmp	r3, #0
    17ce:	d070      	beq.n	18b2 <_dtoa_r+0x92a>
    17d0:	4621      	mov	r1, r4
    17d2:	4658      	mov	r0, fp
    17d4:	f00b fbd1 	bl	cf7a <__mcmp>
    17d8:	2800      	cmp	r0, #0
    17da:	da6a      	bge.n	18b2 <_dtoa_r+0x92a>
    17dc:	2300      	movs	r3, #0
    17de:	4659      	mov	r1, fp
    17e0:	220a      	movs	r2, #10
    17e2:	4628      	mov	r0, r5
    17e4:	f008 f85e 	bl	98a4 <__multadd>
    17e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    17ee:	4683      	mov	fp, r0
    17f0:	2b00      	cmp	r3, #0
    17f2:	f000 8194 	beq.w	1b1e <_dtoa_r+0xb96>
    17f6:	4631      	mov	r1, r6
    17f8:	2300      	movs	r3, #0
    17fa:	220a      	movs	r2, #10
    17fc:	4628      	mov	r0, r5
    17fe:	f008 f851 	bl	98a4 <__multadd>
    1802:	f1b9 0f00 	cmp.w	r9, #0
    1806:	4606      	mov	r6, r0
    1808:	f300 8093 	bgt.w	1932 <_dtoa_r+0x9aa>
    180c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    180e:	2b02      	cmp	r3, #2
    1810:	dc57      	bgt.n	18c2 <_dtoa_r+0x93a>
    1812:	e08e      	b.n	1932 <_dtoa_r+0x9aa>
    1814:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    181a:	e757      	b.n	16cc <_dtoa_r+0x744>
    181c:	3fe00000 	.word	0x3fe00000
    1820:	40240000 	.word	0x40240000
    1824:	9b08      	ldr	r3, [sp, #32]
    1826:	1e5c      	subs	r4, r3, #1
    1828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    182a:	42a3      	cmp	r3, r4
    182c:	bfbf      	itttt	lt
    182e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    1830:	940a      	strlt	r4, [sp, #40]	; 0x28
    1832:	1ae2      	sublt	r2, r4, r3
    1834:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    1836:	bfb6      	itet	lt
    1838:	189b      	addlt	r3, r3, r2
    183a:	1b1c      	subge	r4, r3, r4
    183c:	930e      	strlt	r3, [sp, #56]	; 0x38
    183e:	9b08      	ldr	r3, [sp, #32]
    1840:	bfb8      	it	lt
    1842:	2400      	movlt	r4, #0
    1844:	2b00      	cmp	r3, #0
    1846:	bfb9      	ittee	lt
    1848:	9b06      	ldrlt	r3, [sp, #24]
    184a:	9a08      	ldrlt	r2, [sp, #32]
    184c:	9f06      	ldrge	r7, [sp, #24]
    184e:	9b08      	ldrge	r3, [sp, #32]
    1850:	bfbc      	itt	lt
    1852:	1a9f      	sublt	r7, r3, r2
    1854:	2300      	movlt	r3, #0
    1856:	e73b      	b.n	16d0 <_dtoa_r+0x748>
    1858:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    185a:	9f06      	ldr	r7, [sp, #24]
    185c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    185e:	e742      	b.n	16e6 <_dtoa_r+0x75e>
    1860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1862:	e76b      	b.n	173c <_dtoa_r+0x7b4>
    1864:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1866:	2b01      	cmp	r3, #1
    1868:	dc19      	bgt.n	189e <_dtoa_r+0x916>
    186a:	9b04      	ldr	r3, [sp, #16]
    186c:	b9bb      	cbnz	r3, 189e <_dtoa_r+0x916>
    186e:	9b05      	ldr	r3, [sp, #20]
    1870:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1874:	b99b      	cbnz	r3, 189e <_dtoa_r+0x916>
    1876:	9b05      	ldr	r3, [sp, #20]
    1878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    187c:	0d1b      	lsrs	r3, r3, #20
    187e:	051b      	lsls	r3, r3, #20
    1880:	b183      	cbz	r3, 18a4 <_dtoa_r+0x91c>
    1882:	9b06      	ldr	r3, [sp, #24]
    1884:	3301      	adds	r3, #1
    1886:	9306      	str	r3, [sp, #24]
    1888:	9b09      	ldr	r3, [sp, #36]	; 0x24
    188a:	3301      	adds	r3, #1
    188c:	9309      	str	r3, [sp, #36]	; 0x24
    188e:	f04f 0801 	mov.w	r8, #1
    1892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1894:	2b00      	cmp	r3, #0
    1896:	f47f af6a 	bne.w	176e <_dtoa_r+0x7e6>
    189a:	2001      	movs	r0, #1
    189c:	e76f      	b.n	177e <_dtoa_r+0x7f6>
    189e:	f04f 0800 	mov.w	r8, #0
    18a2:	e7f6      	b.n	1892 <_dtoa_r+0x90a>
    18a4:	4698      	mov	r8, r3
    18a6:	e7f4      	b.n	1892 <_dtoa_r+0x90a>
    18a8:	f43f af7d 	beq.w	17a6 <_dtoa_r+0x81e>
    18ac:	4618      	mov	r0, r3
    18ae:	301c      	adds	r0, #28
    18b0:	e772      	b.n	1798 <_dtoa_r+0x810>
    18b2:	9b08      	ldr	r3, [sp, #32]
    18b4:	2b00      	cmp	r3, #0
    18b6:	dc36      	bgt.n	1926 <_dtoa_r+0x99e>
    18b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    18ba:	2b02      	cmp	r3, #2
    18bc:	dd33      	ble.n	1926 <_dtoa_r+0x99e>
    18be:	f8dd 9020 	ldr.w	r9, [sp, #32]
    18c2:	f1b9 0f00 	cmp.w	r9, #0
    18c6:	d10d      	bne.n	18e4 <_dtoa_r+0x95c>
    18c8:	4621      	mov	r1, r4
    18ca:	464b      	mov	r3, r9
    18cc:	2205      	movs	r2, #5
    18ce:	4628      	mov	r0, r5
    18d0:	f007 ffe8 	bl	98a4 <__multadd>
    18d4:	4601      	mov	r1, r0
    18d6:	4604      	mov	r4, r0
    18d8:	4658      	mov	r0, fp
    18da:	f00b fb4e 	bl	cf7a <__mcmp>
    18de:	2800      	cmp	r0, #0
    18e0:	f73f adb8 	bgt.w	1454 <_dtoa_r+0x4cc>
    18e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    18e6:	9f03      	ldr	r7, [sp, #12]
    18e8:	ea6f 0a03 	mvn.w	sl, r3
    18ec:	f04f 0800 	mov.w	r8, #0
    18f0:	4621      	mov	r1, r4
    18f2:	4628      	mov	r0, r5
    18f4:	f007 ffb4 	bl	9860 <_Bfree>
    18f8:	2e00      	cmp	r6, #0
    18fa:	f43f aea7 	beq.w	164c <_dtoa_r+0x6c4>
    18fe:	f1b8 0f00 	cmp.w	r8, #0
    1902:	d005      	beq.n	1910 <_dtoa_r+0x988>
    1904:	45b0      	cmp	r8, r6
    1906:	d003      	beq.n	1910 <_dtoa_r+0x988>
    1908:	4641      	mov	r1, r8
    190a:	4628      	mov	r0, r5
    190c:	f007 ffa8 	bl	9860 <_Bfree>
    1910:	4631      	mov	r1, r6
    1912:	4628      	mov	r0, r5
    1914:	f007 ffa4 	bl	9860 <_Bfree>
    1918:	e698      	b.n	164c <_dtoa_r+0x6c4>
    191a:	2400      	movs	r4, #0
    191c:	4626      	mov	r6, r4
    191e:	e7e1      	b.n	18e4 <_dtoa_r+0x95c>
    1920:	46c2      	mov	sl, r8
    1922:	4626      	mov	r6, r4
    1924:	e596      	b.n	1454 <_dtoa_r+0x4cc>
    1926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1928:	f8dd 9020 	ldr.w	r9, [sp, #32]
    192c:	2b00      	cmp	r3, #0
    192e:	f000 80fd 	beq.w	1b2c <_dtoa_r+0xba4>
    1932:	2f00      	cmp	r7, #0
    1934:	dd05      	ble.n	1942 <_dtoa_r+0x9ba>
    1936:	4631      	mov	r1, r6
    1938:	463a      	mov	r2, r7
    193a:	4628      	mov	r0, r5
    193c:	f008 f910 	bl	9b60 <__lshift>
    1940:	4606      	mov	r6, r0
    1942:	f1b8 0f00 	cmp.w	r8, #0
    1946:	d05c      	beq.n	1a02 <_dtoa_r+0xa7a>
    1948:	6871      	ldr	r1, [r6, #4]
    194a:	4628      	mov	r0, r5
    194c:	f007 ff48 	bl	97e0 <_Balloc>
    1950:	4607      	mov	r7, r0
    1952:	b928      	cbnz	r0, 1960 <_dtoa_r+0x9d8>
    1954:	4b80      	ldr	r3, [pc, #512]	; (1b58 <_dtoa_r+0xbd0>)
    1956:	4602      	mov	r2, r0
    1958:	f240 21ea 	movw	r1, #746	; 0x2ea
    195c:	f7ff bb28 	b.w	fb0 <_dtoa_r+0x28>
    1960:	6932      	ldr	r2, [r6, #16]
    1962:	3202      	adds	r2, #2
    1964:	0092      	lsls	r2, r2, #2
    1966:	f106 010c 	add.w	r1, r6, #12
    196a:	300c      	adds	r0, #12
    196c:	f00b f898 	bl	caa0 <memcpy>
    1970:	2201      	movs	r2, #1
    1972:	4639      	mov	r1, r7
    1974:	4628      	mov	r0, r5
    1976:	f008 f8f3 	bl	9b60 <__lshift>
    197a:	9b03      	ldr	r3, [sp, #12]
    197c:	3301      	adds	r3, #1
    197e:	9308      	str	r3, [sp, #32]
    1980:	9b03      	ldr	r3, [sp, #12]
    1982:	444b      	add	r3, r9
    1984:	930a      	str	r3, [sp, #40]	; 0x28
    1986:	9b04      	ldr	r3, [sp, #16]
    1988:	f003 0301 	and.w	r3, r3, #1
    198c:	46b0      	mov	r8, r6
    198e:	9309      	str	r3, [sp, #36]	; 0x24
    1990:	4606      	mov	r6, r0
    1992:	9b08      	ldr	r3, [sp, #32]
    1994:	4621      	mov	r1, r4
    1996:	3b01      	subs	r3, #1
    1998:	4658      	mov	r0, fp
    199a:	9304      	str	r3, [sp, #16]
    199c:	f00b fa19 	bl	cdd2 <quorem>
    19a0:	4603      	mov	r3, r0
    19a2:	3330      	adds	r3, #48	; 0x30
    19a4:	9006      	str	r0, [sp, #24]
    19a6:	4641      	mov	r1, r8
    19a8:	4658      	mov	r0, fp
    19aa:	930b      	str	r3, [sp, #44]	; 0x2c
    19ac:	f00b fae5 	bl	cf7a <__mcmp>
    19b0:	4632      	mov	r2, r6
    19b2:	4681      	mov	r9, r0
    19b4:	4621      	mov	r1, r4
    19b6:	4628      	mov	r0, r5
    19b8:	f008 f942 	bl	9c40 <__mdiff>
    19bc:	68c2      	ldr	r2, [r0, #12]
    19be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19c0:	4607      	mov	r7, r0
    19c2:	bb02      	cbnz	r2, 1a06 <_dtoa_r+0xa7e>
    19c4:	4601      	mov	r1, r0
    19c6:	4658      	mov	r0, fp
    19c8:	f00b fad7 	bl	cf7a <__mcmp>
    19cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19ce:	4602      	mov	r2, r0
    19d0:	4639      	mov	r1, r7
    19d2:	4628      	mov	r0, r5
    19d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    19d8:	f007 ff42 	bl	9860 <_Bfree>
    19dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    19de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19e0:	9f08      	ldr	r7, [sp, #32]
    19e2:	ea43 0102 	orr.w	r1, r3, r2
    19e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19e8:	430b      	orrs	r3, r1
    19ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19ec:	d10d      	bne.n	1a0a <_dtoa_r+0xa82>
    19ee:	2b39      	cmp	r3, #57	; 0x39
    19f0:	d029      	beq.n	1a46 <_dtoa_r+0xabe>
    19f2:	f1b9 0f00 	cmp.w	r9, #0
    19f6:	dd01      	ble.n	19fc <_dtoa_r+0xa74>
    19f8:	9b06      	ldr	r3, [sp, #24]
    19fa:	3331      	adds	r3, #49	; 0x31
    19fc:	9a04      	ldr	r2, [sp, #16]
    19fe:	7013      	strb	r3, [r2, #0]
    1a00:	e776      	b.n	18f0 <_dtoa_r+0x968>
    1a02:	4630      	mov	r0, r6
    1a04:	e7b9      	b.n	197a <_dtoa_r+0x9f2>
    1a06:	2201      	movs	r2, #1
    1a08:	e7e2      	b.n	19d0 <_dtoa_r+0xa48>
    1a0a:	f1b9 0f00 	cmp.w	r9, #0
    1a0e:	db06      	blt.n	1a1e <_dtoa_r+0xa96>
    1a10:	9922      	ldr	r1, [sp, #136]	; 0x88
    1a12:	ea41 0909 	orr.w	r9, r1, r9
    1a16:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a18:	ea59 0101 	orrs.w	r1, r9, r1
    1a1c:	d120      	bne.n	1a60 <_dtoa_r+0xad8>
    1a1e:	2a00      	cmp	r2, #0
    1a20:	ddec      	ble.n	19fc <_dtoa_r+0xa74>
    1a22:	4659      	mov	r1, fp
    1a24:	2201      	movs	r2, #1
    1a26:	4628      	mov	r0, r5
    1a28:	9308      	str	r3, [sp, #32]
    1a2a:	f008 f899 	bl	9b60 <__lshift>
    1a2e:	4621      	mov	r1, r4
    1a30:	4683      	mov	fp, r0
    1a32:	f00b faa2 	bl	cf7a <__mcmp>
    1a36:	2800      	cmp	r0, #0
    1a38:	9b08      	ldr	r3, [sp, #32]
    1a3a:	dc02      	bgt.n	1a42 <_dtoa_r+0xaba>
    1a3c:	d1de      	bne.n	19fc <_dtoa_r+0xa74>
    1a3e:	07da      	lsls	r2, r3, #31
    1a40:	d5dc      	bpl.n	19fc <_dtoa_r+0xa74>
    1a42:	2b39      	cmp	r3, #57	; 0x39
    1a44:	d1d8      	bne.n	19f8 <_dtoa_r+0xa70>
    1a46:	9a04      	ldr	r2, [sp, #16]
    1a48:	2339      	movs	r3, #57	; 0x39
    1a4a:	7013      	strb	r3, [r2, #0]
    1a4c:	463b      	mov	r3, r7
    1a4e:	461f      	mov	r7, r3
    1a50:	3b01      	subs	r3, #1
    1a52:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    1a56:	2a39      	cmp	r2, #57	; 0x39
    1a58:	d050      	beq.n	1afc <_dtoa_r+0xb74>
    1a5a:	3201      	adds	r2, #1
    1a5c:	701a      	strb	r2, [r3, #0]
    1a5e:	e747      	b.n	18f0 <_dtoa_r+0x968>
    1a60:	2a00      	cmp	r2, #0
    1a62:	dd03      	ble.n	1a6c <_dtoa_r+0xae4>
    1a64:	2b39      	cmp	r3, #57	; 0x39
    1a66:	d0ee      	beq.n	1a46 <_dtoa_r+0xabe>
    1a68:	3301      	adds	r3, #1
    1a6a:	e7c7      	b.n	19fc <_dtoa_r+0xa74>
    1a6c:	9a08      	ldr	r2, [sp, #32]
    1a6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    1a70:	f802 3c01 	strb.w	r3, [r2, #-1]
    1a74:	428a      	cmp	r2, r1
    1a76:	d02a      	beq.n	1ace <_dtoa_r+0xb46>
    1a78:	4659      	mov	r1, fp
    1a7a:	2300      	movs	r3, #0
    1a7c:	220a      	movs	r2, #10
    1a7e:	4628      	mov	r0, r5
    1a80:	f007 ff10 	bl	98a4 <__multadd>
    1a84:	45b0      	cmp	r8, r6
    1a86:	4683      	mov	fp, r0
    1a88:	f04f 0300 	mov.w	r3, #0
    1a8c:	f04f 020a 	mov.w	r2, #10
    1a90:	4641      	mov	r1, r8
    1a92:	4628      	mov	r0, r5
    1a94:	d107      	bne.n	1aa6 <_dtoa_r+0xb1e>
    1a96:	f007 ff05 	bl	98a4 <__multadd>
    1a9a:	4680      	mov	r8, r0
    1a9c:	4606      	mov	r6, r0
    1a9e:	9b08      	ldr	r3, [sp, #32]
    1aa0:	3301      	adds	r3, #1
    1aa2:	9308      	str	r3, [sp, #32]
    1aa4:	e775      	b.n	1992 <_dtoa_r+0xa0a>
    1aa6:	f007 fefd 	bl	98a4 <__multadd>
    1aaa:	4631      	mov	r1, r6
    1aac:	4680      	mov	r8, r0
    1aae:	2300      	movs	r3, #0
    1ab0:	220a      	movs	r2, #10
    1ab2:	4628      	mov	r0, r5
    1ab4:	f007 fef6 	bl	98a4 <__multadd>
    1ab8:	4606      	mov	r6, r0
    1aba:	e7f0      	b.n	1a9e <_dtoa_r+0xb16>
    1abc:	f1b9 0f00 	cmp.w	r9, #0
    1ac0:	9a03      	ldr	r2, [sp, #12]
    1ac2:	bfcc      	ite	gt
    1ac4:	464f      	movgt	r7, r9
    1ac6:	2701      	movle	r7, #1
    1ac8:	4417      	add	r7, r2
    1aca:	f04f 0800 	mov.w	r8, #0
    1ace:	4659      	mov	r1, fp
    1ad0:	2201      	movs	r2, #1
    1ad2:	4628      	mov	r0, r5
    1ad4:	9308      	str	r3, [sp, #32]
    1ad6:	f008 f843 	bl	9b60 <__lshift>
    1ada:	4621      	mov	r1, r4
    1adc:	4683      	mov	fp, r0
    1ade:	f00b fa4c 	bl	cf7a <__mcmp>
    1ae2:	2800      	cmp	r0, #0
    1ae4:	dcb2      	bgt.n	1a4c <_dtoa_r+0xac4>
    1ae6:	d102      	bne.n	1aee <_dtoa_r+0xb66>
    1ae8:	9b08      	ldr	r3, [sp, #32]
    1aea:	07db      	lsls	r3, r3, #31
    1aec:	d4ae      	bmi.n	1a4c <_dtoa_r+0xac4>
    1aee:	463b      	mov	r3, r7
    1af0:	461f      	mov	r7, r3
    1af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1af6:	2a30      	cmp	r2, #48	; 0x30
    1af8:	d0fa      	beq.n	1af0 <_dtoa_r+0xb68>
    1afa:	e6f9      	b.n	18f0 <_dtoa_r+0x968>
    1afc:	9a03      	ldr	r2, [sp, #12]
    1afe:	429a      	cmp	r2, r3
    1b00:	d1a5      	bne.n	1a4e <_dtoa_r+0xac6>
    1b02:	f10a 0a01 	add.w	sl, sl, #1
    1b06:	2331      	movs	r3, #49	; 0x31
    1b08:	e779      	b.n	19fe <_dtoa_r+0xa76>
    1b0a:	4b14      	ldr	r3, [pc, #80]	; (1b5c <_dtoa_r+0xbd4>)
    1b0c:	f7ff baa7 	b.w	105e <_dtoa_r+0xd6>
    1b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1b12:	2b00      	cmp	r3, #0
    1b14:	f47f aa80 	bne.w	1018 <_dtoa_r+0x90>
    1b18:	4b11      	ldr	r3, [pc, #68]	; (1b60 <_dtoa_r+0xbd8>)
    1b1a:	f7ff baa0 	b.w	105e <_dtoa_r+0xd6>
    1b1e:	f1b9 0f00 	cmp.w	r9, #0
    1b22:	dc03      	bgt.n	1b2c <_dtoa_r+0xba4>
    1b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1b26:	2b02      	cmp	r3, #2
    1b28:	f73f aecb 	bgt.w	18c2 <_dtoa_r+0x93a>
    1b2c:	9f03      	ldr	r7, [sp, #12]
    1b2e:	4621      	mov	r1, r4
    1b30:	4658      	mov	r0, fp
    1b32:	f00b f94e 	bl	cdd2 <quorem>
    1b36:	f100 0330 	add.w	r3, r0, #48	; 0x30
    1b3a:	f807 3b01 	strb.w	r3, [r7], #1
    1b3e:	9a03      	ldr	r2, [sp, #12]
    1b40:	1aba      	subs	r2, r7, r2
    1b42:	4591      	cmp	r9, r2
    1b44:	ddba      	ble.n	1abc <_dtoa_r+0xb34>
    1b46:	4659      	mov	r1, fp
    1b48:	2300      	movs	r3, #0
    1b4a:	220a      	movs	r2, #10
    1b4c:	4628      	mov	r0, r5
    1b4e:	f007 fea9 	bl	98a4 <__multadd>
    1b52:	4683      	mov	fp, r0
    1b54:	e7eb      	b.n	1b2e <_dtoa_r+0xba6>
    1b56:	bf00      	nop
    1b58:	0000efab 	.word	0x0000efab
    1b5c:	0000ed39 	.word	0x0000ed39
    1b60:	0000ef2d 	.word	0x0000ef2d

00001b64 <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
    1b64:	b510      	push	{r4, lr}
    1b66:	b086      	sub	sp, #24
    1b68:	4603      	mov	r3, r0
	msg[0].buf = (uint8_t *)write_buf;
    1b6a:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
    1b6c:	2101      	movs	r1, #1
	msg[1].len = num_read;
    1b6e:	e9cd 2103 	strd	r2, r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    1b72:	2000      	movs	r0, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1b74:	2207      	movs	r2, #7
	msg[0].len = num_write;
    1b76:	9101      	str	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    1b78:	f88d 0008 	strb.w	r0, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1b7c:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    1b80:	4803      	ldr	r0, [pc, #12]	; (1b90 <i2c_write_read.constprop.0+0x2c>)
    1b82:	6882      	ldr	r2, [r0, #8]
    1b84:	4669      	mov	r1, sp
    1b86:	6894      	ldr	r4, [r2, #8]
    1b88:	2202      	movs	r2, #2
    1b8a:	47a0      	blx	r4
}
    1b8c:	b006      	add	sp, #24
    1b8e:	bd10      	pop	{r4, pc}
    1b90:	0000d3dc 	.word	0x0000d3dc

00001b94 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1b94:	680b      	ldr	r3, [r1, #0]
    1b96:	3301      	adds	r3, #1
    1b98:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1b9a:	4b01      	ldr	r3, [pc, #4]	; (1ba0 <char_out+0xc>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	4718      	bx	r3
    1ba0:	20000000 	.word	0x20000000

00001ba4 <__printk_hook_install>:
	_char_out = fn;
    1ba4:	4b01      	ldr	r3, [pc, #4]	; (1bac <__printk_hook_install+0x8>)
    1ba6:	6018      	str	r0, [r3, #0]
}
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop
    1bac:	20000000 	.word	0x20000000

00001bb0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1bb0:	b507      	push	{r0, r1, r2, lr}
    1bb2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1bb4:	2100      	movs	r1, #0
{
    1bb6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1bb8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1bba:	4803      	ldr	r0, [pc, #12]	; (1bc8 <vprintk+0x18>)
    1bbc:	a901      	add	r1, sp, #4
    1bbe:	f000 f959 	bl	1e74 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1bc2:	b003      	add	sp, #12
    1bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bc8:	00001b95 	.word	0x00001b95

00001bcc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1bcc:	b530      	push	{r4, r5, lr}
    1bce:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1bd0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1bd4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1bd6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1bd8:	a901      	add	r1, sp, #4
    1bda:	4805      	ldr	r0, [pc, #20]	; (1bf0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1bdc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1bde:	f000 f949 	bl	1e74 <cbvprintf>

	if (ctx.count < ctx.max) {
    1be2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1be6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1be8:	bfb8      	it	lt
    1bea:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1bec:	b005      	add	sp, #20
    1bee:	bd30      	pop	{r4, r5, pc}
    1bf0:	0000a941 	.word	0x0000a941

00001bf4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bf8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1bfc:	f019 0808 	ands.w	r8, r9, #8
{
    1c00:	4604      	mov	r4, r0
    1c02:	4693      	mov	fp, r2
	if (processing) {
    1c04:	d00d      	beq.n	1c22 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1c06:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c08:	bf0c      	ite	eq
    1c0a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c0e:	f049 0920 	orrne.w	r9, r9, #32
    1c12:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c16:	f38b 8811 	msr	BASEPRI, fp
    1c1a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c22:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1c26:	2902      	cmp	r1, #2
    1c28:	d107      	bne.n	1c3a <process_event+0x46>
			evt = process_recheck(mgr);
    1c2a:	4620      	mov	r0, r4
    1c2c:	f008 feb5 	bl	a99a <process_recheck>
		if (evt == EVT_NOP) {
    1c30:	2800      	cmp	r0, #0
    1c32:	d0f0      	beq.n	1c16 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1c34:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c36:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1c38:	d14e      	bne.n	1cd8 <process_event+0xe4>
			res = mgr->last_res;
    1c3a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c3c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1c3e:	2f00      	cmp	r7, #0
    1c40:	da15      	bge.n	1c6e <process_event+0x7a>
		*clients = mgr->clients;
    1c42:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c44:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1c48:	e9c4 8800 	strd	r8, r8, [r4]
    1c4c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c50:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1c52:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c54:	8b21      	ldrh	r1, [r4, #24]
    1c56:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c5a:	45ca      	cmp	sl, r9
    1c5c:	d002      	beq.n	1c64 <process_event+0x70>
		if (do_monitors
    1c5e:	68a3      	ldr	r3, [r4, #8]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d15a      	bne.n	1d1a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1c64:	b90d      	cbnz	r5, 1c6a <process_event+0x76>
		    || (transit != NULL)) {
    1c66:	2e00      	cmp	r6, #0
    1c68:	d071      	beq.n	1d4e <process_event+0x15a>
    1c6a:	2300      	movs	r3, #0
    1c6c:	e056      	b.n	1d1c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c6e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1c72:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1c74:	2a01      	cmp	r2, #1
    1c76:	d81e      	bhi.n	1cb6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c78:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1c7c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1c7e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c80:	b289      	uxth	r1, r1
    1c82:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1c86:	d10a      	bne.n	1c9e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c88:	b13d      	cbz	r5, 1c9a <process_event+0xa6>
    1c8a:	8b63      	ldrh	r3, [r4, #26]
    1c8c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1c8e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1c90:	3301      	adds	r3, #1
    1c92:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c94:	2a00      	cmp	r2, #0
    1c96:	d1fa      	bne.n	1c8e <process_event+0x9a>
    1c98:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c9a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c9e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1ca0:	4620      	mov	r0, r4
    1ca2:	f008 fe7a 	bl	a99a <process_recheck>
    1ca6:	4606      	mov	r6, r0
    1ca8:	2800      	cmp	r0, #0
    1caa:	d0d3      	beq.n	1c54 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cac:	8b23      	ldrh	r3, [r4, #24]
    1cae:	f043 0320 	orr.w	r3, r3, #32
    1cb2:	8323      	strh	r3, [r4, #24]
    1cb4:	e7cd      	b.n	1c52 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1cb6:	2b04      	cmp	r3, #4
    1cb8:	d10c      	bne.n	1cd4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cba:	f021 0107 	bic.w	r1, r1, #7
    1cbe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cc0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1cc2:	4620      	mov	r0, r4
    1cc4:	f008 fe69 	bl	a99a <process_recheck>
    1cc8:	4605      	mov	r5, r0
    1cca:	2800      	cmp	r0, #0
    1ccc:	d0c1      	beq.n	1c52 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cce:	f041 0120 	orr.w	r1, r1, #32
    1cd2:	8321      	strh	r1, [r4, #24]
    1cd4:	2500      	movs	r5, #0
    1cd6:	e7bc      	b.n	1c52 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1cd8:	2803      	cmp	r0, #3
    1cda:	d109      	bne.n	1cf0 <process_event+0xfc>
			transit = mgr->transitions->start;
    1cdc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cde:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1ce2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ce4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ce8:	8323      	strh	r3, [r4, #24]
}
    1cea:	2500      	movs	r5, #0
		res = 0;
    1cec:	462f      	mov	r7, r5
    1cee:	e7b1      	b.n	1c54 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1cf0:	2804      	cmp	r0, #4
    1cf2:	d106      	bne.n	1d02 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1cf4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cf6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1cfa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cfc:	f043 0304 	orr.w	r3, r3, #4
    1d00:	e7f2      	b.n	1ce8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1d02:	2805      	cmp	r0, #5
    1d04:	d106      	bne.n	1d14 <process_event+0x120>
			transit = mgr->transitions->reset;
    1d06:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d08:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1d0c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d0e:	f043 0305 	orr.w	r3, r3, #5
    1d12:	e7e9      	b.n	1ce8 <process_event+0xf4>
    1d14:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1d16:	462e      	mov	r6, r5
    1d18:	e7e8      	b.n	1cec <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1d1a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1d1c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1d20:	8321      	strh	r1, [r4, #24]
    1d22:	f38b 8811 	msr	BASEPRI, fp
    1d26:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1d2a:	b9fb      	cbnz	r3, 1d6c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1d2c:	bb85      	cbnz	r5, 1d90 <process_event+0x19c>
			if (transit != NULL) {
    1d2e:	b116      	cbz	r6, 1d36 <process_event+0x142>
				transit(mgr, transition_complete);
    1d30:	491f      	ldr	r1, [pc, #124]	; (1db0 <process_event+0x1bc>)
    1d32:	4620      	mov	r0, r4
    1d34:	47b0      	blx	r6
	__asm__ volatile(
    1d36:	f04f 0320 	mov.w	r3, #32
    1d3a:	f3ef 8b11 	mrs	fp, BASEPRI
    1d3e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d42:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1d46:	8b23      	ldrh	r3, [r4, #24]
    1d48:	f023 0308 	bic.w	r3, r3, #8
    1d4c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1d4e:	8b23      	ldrh	r3, [r4, #24]
    1d50:	06da      	lsls	r2, r3, #27
    1d52:	d525      	bpl.n	1da0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d54:	f023 0310 	bic.w	r3, r3, #16
    1d58:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1d5a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1d5c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1d60:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1d64:	2900      	cmp	r1, #0
    1d66:	f47f af5e 	bne.w	1c26 <process_event+0x32>
out:
    1d6a:	e754      	b.n	1c16 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1d6c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d6e:	2900      	cmp	r1, #0
    1d70:	d0dc      	beq.n	1d2c <process_event+0x138>
	return node->next;
    1d72:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1d76:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1d7a:	463b      	mov	r3, r7
    1d7c:	4652      	mov	r2, sl
    1d7e:	4620      	mov	r0, r4
    1d80:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d82:	f1b9 0f00 	cmp.w	r9, #0
    1d86:	d0d1      	beq.n	1d2c <process_event+0x138>
    1d88:	4649      	mov	r1, r9
    1d8a:	f8d9 9000 	ldr.w	r9, [r9]
    1d8e:	e7f2      	b.n	1d76 <process_event+0x182>
    1d90:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1d92:	463b      	mov	r3, r7
    1d94:	4652      	mov	r2, sl
    1d96:	4620      	mov	r0, r4
    1d98:	682d      	ldr	r5, [r5, #0]
    1d9a:	f008 fe1a 	bl	a9d2 <notify_one>
    1d9e:	e7c5      	b.n	1d2c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1da0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1da4:	bf1e      	ittt	ne
    1da6:	f023 0320 	bicne.w	r3, r3, #32
    1daa:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1dac:	2102      	movne	r1, #2
    1dae:	e7d5      	b.n	1d5c <process_event+0x168>
    1db0:	0000a9ff 	.word	0x0000a9ff

00001db4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    1db6:	4e08      	ldr	r6, [pc, #32]	; (1dd8 <extract_decimal+0x24>)
    1db8:	6802      	ldr	r2, [r0, #0]
{
    1dba:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
    1dbc:	270a      	movs	r7, #10
	size_t val = 0;
    1dbe:	2000      	movs	r0, #0
    1dc0:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
    1dc2:	3201      	adds	r2, #1
    1dc4:	780c      	ldrb	r4, [r1, #0]
    1dc6:	5da5      	ldrb	r5, [r4, r6]
    1dc8:	076d      	lsls	r5, r5, #29
    1dca:	d401      	bmi.n	1dd0 <extract_decimal+0x1c>
	}
	*str = sp;
    1dcc:	6019      	str	r1, [r3, #0]
	return val;
}
    1dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    1dd0:	fb07 4000 	mla	r0, r7, r0, r4
    1dd4:	3830      	subs	r0, #48	; 0x30
    1dd6:	e7f3      	b.n	1dc0 <extract_decimal+0xc>
    1dd8:	0000edfb 	.word	0x0000edfb

00001ddc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de0:	4615      	mov	r5, r2
    1de2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    1de4:	78d3      	ldrb	r3, [r2, #3]
    1de6:	4a22      	ldr	r2, [pc, #136]	; (1e70 <encode_uint+0x94>)
    1de8:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    1dec:	2b6f      	cmp	r3, #111	; 0x6f
{
    1dee:	4680      	mov	r8, r0
    1df0:	460f      	mov	r7, r1
    1df2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    1df6:	d029      	beq.n	1e4c <encode_uint+0x70>
    1df8:	d824      	bhi.n	1e44 <encode_uint+0x68>
		return 16;
    1dfa:	2b58      	cmp	r3, #88	; 0x58
    1dfc:	bf14      	ite	ne
    1dfe:	260a      	movne	r6, #10
    1e00:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    1e02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    1e06:	4632      	mov	r2, r6
    1e08:	2300      	movs	r3, #0
    1e0a:	4640      	mov	r0, r8
    1e0c:	4639      	mov	r1, r7
    1e0e:	f7fe fd95 	bl	93c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e12:	2a09      	cmp	r2, #9
    1e14:	b2d4      	uxtb	r4, r2
    1e16:	d81e      	bhi.n	1e56 <encode_uint+0x7a>
    1e18:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    1e1a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e1c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    1e1e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e22:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    1e26:	d301      	bcc.n	1e2c <encode_uint+0x50>
    1e28:	45d1      	cmp	r9, sl
    1e2a:	d811      	bhi.n	1e50 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1e2c:	782b      	ldrb	r3, [r5, #0]
    1e2e:	069b      	lsls	r3, r3, #26
    1e30:	d505      	bpl.n	1e3e <encode_uint+0x62>
		if (radix == 8) {
    1e32:	2e08      	cmp	r6, #8
    1e34:	d115      	bne.n	1e62 <encode_uint+0x86>
			conv->altform_0 = true;
    1e36:	78ab      	ldrb	r3, [r5, #2]
    1e38:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    1e3c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    1e3e:	4648      	mov	r0, r9
    1e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    1e44:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    1e48:	2b70      	cmp	r3, #112	; 0x70
    1e4a:	e7d7      	b.n	1dfc <encode_uint+0x20>
	switch (specifier) {
    1e4c:	2608      	movs	r6, #8
    1e4e:	e7d8      	b.n	1e02 <encode_uint+0x26>
		value /= radix;
    1e50:	4680      	mov	r8, r0
    1e52:	460f      	mov	r7, r1
    1e54:	e7d7      	b.n	1e06 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e56:	f1bb 0f01 	cmp.w	fp, #1
    1e5a:	bf0c      	ite	eq
    1e5c:	3437      	addeq	r4, #55	; 0x37
    1e5e:	3457      	addne	r4, #87	; 0x57
    1e60:	e7db      	b.n	1e1a <encode_uint+0x3e>
		} else if (radix == 16) {
    1e62:	2e10      	cmp	r6, #16
    1e64:	d1eb      	bne.n	1e3e <encode_uint+0x62>
			conv->altform_0c = true;
    1e66:	78ab      	ldrb	r3, [r5, #2]
    1e68:	f043 0310 	orr.w	r3, r3, #16
    1e6c:	e7e6      	b.n	1e3c <encode_uint+0x60>
    1e6e:	bf00      	nop
    1e70:	0000edfb 	.word	0x0000edfb

00001e74 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e78:	4681      	mov	r9, r0
    1e7a:	b09b      	sub	sp, #108	; 0x6c
    1e7c:	468a      	mov	sl, r1
    1e7e:	4615      	mov	r5, r2
    1e80:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1e82:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1e84:	7828      	ldrb	r0, [r5, #0]
    1e86:	b910      	cbnz	r0, 1e8e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1e88:	4630      	mov	r0, r6
    1e8a:	f000 bdc5 	b.w	2a18 <cbvprintf+0xba4>
			OUTC(*fp++);
    1e8e:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    1e90:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1e92:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    1e94:	d006      	beq.n	1ea4 <cbvprintf+0x30>
			OUTC(*fp++);
    1e96:	4651      	mov	r1, sl
			OUTC('%');
    1e98:	47c8      	blx	r9
    1e9a:	2800      	cmp	r0, #0
    1e9c:	f2c0 85bc 	blt.w	2a18 <cbvprintf+0xba4>
    1ea0:	3601      	adds	r6, #1
		if (bps == NULL) {
    1ea2:	e226      	b.n	22f2 <cbvprintf+0x47e>
		} state = {
    1ea4:	2218      	movs	r2, #24
    1ea6:	2100      	movs	r1, #0
    1ea8:	a80c      	add	r0, sp, #48	; 0x30
    1eaa:	f00a fe21 	bl	caf0 <memset>
	if (*sp == '%') {
    1eae:	786b      	ldrb	r3, [r5, #1]
    1eb0:	2b25      	cmp	r3, #37	; 0x25
    1eb2:	d059      	beq.n	1f68 <cbvprintf+0xf4>
    1eb4:	1c6a      	adds	r2, r5, #1
    1eb6:	4617      	mov	r7, r2
		switch (*sp) {
    1eb8:	f812 3b01 	ldrb.w	r3, [r2], #1
    1ebc:	2b2b      	cmp	r3, #43	; 0x2b
    1ebe:	f000 808b 	beq.w	1fd8 <cbvprintf+0x164>
    1ec2:	d879      	bhi.n	1fb8 <cbvprintf+0x144>
    1ec4:	2b20      	cmp	r3, #32
    1ec6:	f000 808c 	beq.w	1fe2 <cbvprintf+0x16e>
    1eca:	2b23      	cmp	r3, #35	; 0x23
    1ecc:	f000 808e 	beq.w	1fec <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
    1ed0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ed4:	f003 0244 	and.w	r2, r3, #68	; 0x44
    1ed8:	2a44      	cmp	r2, #68	; 0x44
    1eda:	d103      	bne.n	1ee4 <cbvprintf+0x70>
		conv->flag_zero = false;
    1edc:	f36f 1386 	bfc	r3, #6, #1
    1ee0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    1ee4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ee8:	970a      	str	r7, [sp, #40]	; 0x28
    1eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1eee:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    1ef2:	783b      	ldrb	r3, [r7, #0]
    1ef4:	2b2a      	cmp	r3, #42	; 0x2a
    1ef6:	d17e      	bne.n	1ff6 <cbvprintf+0x182>
		conv->width_star = true;
    1ef8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1efc:	f043 0301 	orr.w	r3, r3, #1
    1f00:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    1f04:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    1f06:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    1f08:	781a      	ldrb	r2, [r3, #0]
    1f0a:	2a2e      	cmp	r2, #46	; 0x2e
    1f0c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1f10:	bf0c      	ite	eq
    1f12:	2101      	moveq	r1, #1
    1f14:	2100      	movne	r1, #0
    1f16:	f361 0241 	bfi	r2, r1, #1, #1
    1f1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    1f1e:	d10b      	bne.n	1f38 <cbvprintf+0xc4>
	++sp;
    1f20:	1c5a      	adds	r2, r3, #1
    1f22:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    1f24:	785a      	ldrb	r2, [r3, #1]
    1f26:	2a2a      	cmp	r2, #42	; 0x2a
    1f28:	d17b      	bne.n	2022 <cbvprintf+0x1ae>
		conv->prec_star = true;
    1f2a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1f2e:	f042 0204 	orr.w	r2, r2, #4
    1f32:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    1f36:	3302      	adds	r3, #2
	switch (*sp) {
    1f38:	461a      	mov	r2, r3
    1f3a:	f812 0b01 	ldrb.w	r0, [r2], #1
    1f3e:	286c      	cmp	r0, #108	; 0x6c
    1f40:	f000 80cf 	beq.w	20e2 <cbvprintf+0x26e>
    1f44:	d87d      	bhi.n	2042 <cbvprintf+0x1ce>
    1f46:	2868      	cmp	r0, #104	; 0x68
    1f48:	f000 8084 	beq.w	2054 <cbvprintf+0x1e0>
    1f4c:	286a      	cmp	r0, #106	; 0x6a
    1f4e:	f000 80d2 	beq.w	20f6 <cbvprintf+0x282>
    1f52:	284c      	cmp	r0, #76	; 0x4c
    1f54:	f000 80d6 	beq.w	2104 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
    1f58:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1f5c:	f36f 02c6 	bfc	r2, #3, #4
    1f60:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    1f64:	461a      	mov	r2, r3
    1f66:	e080      	b.n	206a <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    1f68:	1caa      	adds	r2, r5, #2
    1f6a:	9202      	str	r2, [sp, #8]
    1f6c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    1f70:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1f74:	07df      	lsls	r7, r3, #31
    1f76:	f140 8170 	bpl.w	225a <cbvprintf+0x3e6>
			width = va_arg(ap, int);
    1f7a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    1f7e:	f1bb 0f00 	cmp.w	fp, #0
    1f82:	da07      	bge.n	1f94 <cbvprintf+0x120>
				conv->flag_dash = true;
    1f84:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1f88:	f042 0204 	orr.w	r2, r2, #4
    1f8c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    1f90:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    1f94:	0758      	lsls	r0, r3, #29
    1f96:	f140 8169 	bpl.w	226c <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
    1f9a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1f9e:	f1b8 0f00 	cmp.w	r8, #0
    1fa2:	f280 8168 	bge.w	2276 <cbvprintf+0x402>
				conv->prec_present = false;
    1fa6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1faa:	f36f 0341 	bfc	r3, #1, #1
    1fae:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    1fb2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1fb6:	e15e      	b.n	2276 <cbvprintf+0x402>
		switch (*sp) {
    1fb8:	2b2d      	cmp	r3, #45	; 0x2d
    1fba:	d006      	beq.n	1fca <cbvprintf+0x156>
    1fbc:	2b30      	cmp	r3, #48	; 0x30
    1fbe:	d187      	bne.n	1ed0 <cbvprintf+0x5c>
			conv->flag_zero = true;
    1fc0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fc8:	e003      	b.n	1fd2 <cbvprintf+0x15e>
			conv->flag_dash = true;
    1fca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1fce:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    1fd2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    1fd6:	e76e      	b.n	1eb6 <cbvprintf+0x42>
			conv->flag_plus = true;
    1fd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1fdc:	f043 0308 	orr.w	r3, r3, #8
    1fe0:	e7f7      	b.n	1fd2 <cbvprintf+0x15e>
			conv->flag_space = true;
    1fe2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1fe6:	f043 0310 	orr.w	r3, r3, #16
    1fea:	e7f2      	b.n	1fd2 <cbvprintf+0x15e>
			conv->flag_hash = true;
    1fec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1ff0:	f043 0320 	orr.w	r3, r3, #32
    1ff4:	e7ed      	b.n	1fd2 <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
    1ff6:	a80a      	add	r0, sp, #40	; 0x28
    1ff8:	f7ff fedc 	bl	1db4 <extract_decimal>
	if (sp != wp) {
    1ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ffe:	42bb      	cmp	r3, r7
    2000:	d081      	beq.n	1f06 <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
    2002:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    2006:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    2008:	f3c1 0240 	ubfx	r2, r1, #1, #1
    200c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2010:	0052      	lsls	r2, r2, #1
    2012:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2016:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    201a:	430a      	orrs	r2, r1
    201c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    2020:	e771      	b.n	1f06 <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
    2022:	a80a      	add	r0, sp, #40	; 0x28
    2024:	f7ff fec6 	bl	1db4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2028:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    202c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    202e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2032:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    2036:	f360 0341 	bfi	r3, r0, #1, #1
    203a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    203e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2040:	e77a      	b.n	1f38 <cbvprintf+0xc4>
	switch (*sp) {
    2042:	2874      	cmp	r0, #116	; 0x74
    2044:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    2048:	d059      	beq.n	20fe <cbvprintf+0x28a>
    204a:	287a      	cmp	r0, #122	; 0x7a
    204c:	d184      	bne.n	1f58 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
    204e:	460b      	mov	r3, r1
    2050:	2106      	movs	r1, #6
    2052:	e041      	b.n	20d8 <cbvprintf+0x264>
		if (*++sp == 'h') {
    2054:	7859      	ldrb	r1, [r3, #1]
    2056:	2968      	cmp	r1, #104	; 0x68
    2058:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    205c:	d13a      	bne.n	20d4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
    205e:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    2060:	f362 01c6 	bfi	r1, r2, #3, #4
    2064:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
    2068:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    206a:	4613      	mov	r3, r2
    206c:	f813 2b01 	ldrb.w	r2, [r3], #1
    2070:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    2072:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    2074:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    2078:	f200 80c5 	bhi.w	2206 <cbvprintf+0x392>
    207c:	2a57      	cmp	r2, #87	; 0x57
    207e:	d84e      	bhi.n	211e <cbvprintf+0x2aa>
    2080:	2a41      	cmp	r2, #65	; 0x41
    2082:	d004      	beq.n	208e <cbvprintf+0x21a>
    2084:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2088:	2b02      	cmp	r3, #2
    208a:	f200 80bc 	bhi.w	2206 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    208e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    2092:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    2096:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    2098:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    209c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    20a0:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    20a4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    20a8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    20ac:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    20b0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    20b4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    20b6:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    20ba:	b2cb      	uxtb	r3, r1
    20bc:	f100 80cb 	bmi.w	2256 <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
    20c0:	f003 0278 	and.w	r2, r3, #120	; 0x78
    20c4:	2a18      	cmp	r2, #24
    20c6:	f040 809b 	bne.w	2200 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
    20ca:	f36f 03c6 	bfc	r3, #3, #4
    20ce:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    20d2:	e082      	b.n	21da <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
    20d4:	460b      	mov	r3, r1
    20d6:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    20d8:	f361 03c6 	bfi	r3, r1, #3, #4
    20dc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    20e0:	e7c3      	b.n	206a <cbvprintf+0x1f6>
		if (*++sp == 'l') {
    20e2:	7859      	ldrb	r1, [r3, #1]
    20e4:	296c      	cmp	r1, #108	; 0x6c
    20e6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    20ea:	d101      	bne.n	20f0 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
    20ec:	2204      	movs	r2, #4
    20ee:	e7b7      	b.n	2060 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
    20f0:	460b      	mov	r3, r1
    20f2:	2103      	movs	r1, #3
    20f4:	e7f0      	b.n	20d8 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
    20f6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    20fa:	2105      	movs	r1, #5
    20fc:	e7ec      	b.n	20d8 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
    20fe:	460b      	mov	r3, r1
    2100:	2107      	movs	r1, #7
    2102:	e7e9      	b.n	20d8 <cbvprintf+0x264>
		conv->unsupported = true;
    2104:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2108:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    210c:	f023 0302 	bic.w	r3, r3, #2
    2110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2114:	f043 0302 	orr.w	r3, r3, #2
    2118:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    211c:	e7a5      	b.n	206a <cbvprintf+0x1f6>
	switch (conv->specifier) {
    211e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    2122:	2b20      	cmp	r3, #32
    2124:	d86f      	bhi.n	2206 <cbvprintf+0x392>
    2126:	a101      	add	r1, pc, #4	; (adr r1, 212c <cbvprintf+0x2b8>)
    2128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    212c:	000021df 	.word	0x000021df
    2130:	00002207 	.word	0x00002207
    2134:	00002207 	.word	0x00002207
    2138:	00002207 	.word	0x00002207
    213c:	00002207 	.word	0x00002207
    2140:	00002207 	.word	0x00002207
    2144:	00002207 	.word	0x00002207
    2148:	00002207 	.word	0x00002207
    214c:	00002207 	.word	0x00002207
    2150:	0000208f 	.word	0x0000208f
    2154:	00002207 	.word	0x00002207
    2158:	000021df 	.word	0x000021df
    215c:	000021b1 	.word	0x000021b1
    2160:	0000208f 	.word	0x0000208f
    2164:	0000208f 	.word	0x0000208f
    2168:	0000208f 	.word	0x0000208f
    216c:	00002207 	.word	0x00002207
    2170:	000021b1 	.word	0x000021b1
    2174:	00002207 	.word	0x00002207
    2178:	00002207 	.word	0x00002207
    217c:	00002207 	.word	0x00002207
    2180:	00002207 	.word	0x00002207
    2184:	00002215 	.word	0x00002215
    2188:	000021df 	.word	0x000021df
    218c:	00002239 	.word	0x00002239
    2190:	00002207 	.word	0x00002207
    2194:	00002207 	.word	0x00002207
    2198:	00002239 	.word	0x00002239
    219c:	00002207 	.word	0x00002207
    21a0:	000021df 	.word	0x000021df
    21a4:	00002207 	.word	0x00002207
    21a8:	00002207 	.word	0x00002207
    21ac:	000021df 	.word	0x000021df
		conv->specifier_cat = SPECIFIER_SINT;
    21b0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    21b4:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    21b6:	f361 0302 	bfi	r3, r1, #0, #3
    21ba:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    21be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    21c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    21c6:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    21c8:	bf02      	ittt	eq
    21ca:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    21ce:	f041 0101 	orreq.w	r1, r1, #1
    21d2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    21d6:	2a63      	cmp	r2, #99	; 0x63
    21d8:	d005      	beq.n	21e6 <cbvprintf+0x372>
	bool unsupported = false;
    21da:	2300      	movs	r3, #0
    21dc:	e006      	b.n	21ec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
    21de:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    21e2:	2102      	movs	r1, #2
    21e4:	e7e7      	b.n	21b6 <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
    21e6:	3b00      	subs	r3, #0
    21e8:	bf18      	it	ne
    21ea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    21ec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    21f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    21f4:	430b      	orrs	r3, r1
    21f6:	f363 0241 	bfi	r2, r3, #1, #1
    21fa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    21fe:	e6b7      	b.n	1f70 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
    2200:	f013 0f38 	tst.w	r3, #56	; 0x38
    2204:	d0e9      	beq.n	21da <cbvprintf+0x366>
			conv->invalid = true;
    2206:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    220a:	f043 0301 	orr.w	r3, r3, #1
    220e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    2212:	e7e2      	b.n	21da <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
    2214:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2218:	2203      	movs	r2, #3
    221a:	f362 0302 	bfi	r3, r2, #0, #3
    221e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2222:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2226:	f003 0378 	and.w	r3, r3, #120	; 0x78
    222a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    222e:	f1dc 0300 	rsbs	r3, ip, #0
    2232:	eb43 030c 	adc.w	r3, r3, ip
    2236:	e7d9      	b.n	21ec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    2238:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    223c:	2203      	movs	r2, #3
    223e:	f362 0302 	bfi	r3, r2, #0, #3
    2242:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    2246:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    224a:	f013 0f78 	tst.w	r3, #120	; 0x78
    224e:	bf14      	ite	ne
    2250:	2301      	movne	r3, #1
    2252:	2300      	moveq	r3, #0
    2254:	e7ca      	b.n	21ec <cbvprintf+0x378>
			unsupported = true;
    2256:	2301      	movs	r3, #1
    2258:	e7c8      	b.n	21ec <cbvprintf+0x378>
		} else if (conv->width_present) {
    225a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    225e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2260:	bfb4      	ite	lt
    2262:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    2266:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    226a:	e693      	b.n	1f94 <cbvprintf+0x120>
		} else if (conv->prec_present) {
    226c:	0799      	lsls	r1, r3, #30
    226e:	f57f aea0 	bpl.w	1fb2 <cbvprintf+0x13e>
			precision = conv->prec_value;
    2272:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    2276:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    227a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    227c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    2280:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2284:	f003 0207 	and.w	r2, r3, #7
    2288:	2a04      	cmp	r2, #4
    228a:	d109      	bne.n	22a0 <cbvprintf+0x42c>
		    && !conv->prec_present) {
    228c:	078a      	lsls	r2, r1, #30
    228e:	d407      	bmi.n	22a0 <cbvprintf+0x42c>
			if (conv->specifier_a) {
    2290:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    2294:	2a00      	cmp	r2, #0
    2296:	bfb4      	ite	lt
    2298:	f04f 080d 	movlt.w	r8, #13
    229c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    22a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    22a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    22a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    22aa:	d137      	bne.n	231c <cbvprintf+0x4a8>
			switch (length_mod) {
    22ac:	1ecb      	subs	r3, r1, #3
    22ae:	2b04      	cmp	r3, #4
    22b0:	d821      	bhi.n	22f6 <cbvprintf+0x482>
    22b2:	e8df f003 	tbb	[pc, r3]
    22b6:	0903      	.short	0x0903
    22b8:	2009      	.short	0x2009
    22ba:	20          	.byte	0x20
    22bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    22bc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    22c0:	17da      	asrs	r2, r3, #31
    22c2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    22c6:	e006      	b.n	22d6 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
    22c8:	3407      	adds	r4, #7
    22ca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    22ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    22d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    22d6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    22da:	07bb      	lsls	r3, r7, #30
    22dc:	d056      	beq.n	238c <cbvprintf+0x518>
			OUTS(sp, fp);
    22de:	9b02      	ldr	r3, [sp, #8]
    22e0:	462a      	mov	r2, r5
    22e2:	4651      	mov	r1, sl
    22e4:	4648      	mov	r0, r9
    22e6:	f008 fc3c 	bl	ab62 <outs>
    22ea:	2800      	cmp	r0, #0
    22ec:	f2c0 8394 	blt.w	2a18 <cbvprintf+0xba4>
    22f0:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    22f2:	9d02      	ldr	r5, [sp, #8]
    22f4:	e5c6      	b.n	1e84 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    22f6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    22fa:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    22fc:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2300:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    2304:	d105      	bne.n	2312 <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
    2306:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    230a:	930c      	str	r3, [sp, #48]	; 0x30
    230c:	2300      	movs	r3, #0
    230e:	930d      	str	r3, [sp, #52]	; 0x34
    2310:	e7e1      	b.n	22d6 <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
    2312:	2902      	cmp	r1, #2
    2314:	d1df      	bne.n	22d6 <cbvprintf+0x462>
				value->sint = (short)value->sint;
    2316:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    231a:	e7d1      	b.n	22c0 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    231c:	2b02      	cmp	r3, #2
    231e:	d123      	bne.n	2368 <cbvprintf+0x4f4>
			switch (length_mod) {
    2320:	1ecb      	subs	r3, r1, #3
    2322:	2b04      	cmp	r3, #4
    2324:	d813      	bhi.n	234e <cbvprintf+0x4da>
    2326:	e8df f003 	tbb	[pc, r3]
    232a:	0a03      	.short	0x0a03
    232c:	120a      	.short	0x120a
    232e:	12          	.byte	0x12
    232f:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2330:	6822      	ldr	r2, [r4, #0]
    2332:	920c      	str	r2, [sp, #48]	; 0x30
    2334:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    2336:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    2338:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    233a:	4604      	mov	r4, r0
    233c:	e7cb      	b.n	22d6 <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
    233e:	1de0      	adds	r0, r4, #7
    2340:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    2344:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    2348:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    234c:	e7f5      	b.n	233a <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
    234e:	f854 3b04 	ldr.w	r3, [r4], #4
    2352:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    2354:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    2356:	f04f 0300 	mov.w	r3, #0
    235a:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    235c:	d0d3      	beq.n	2306 <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
    235e:	2902      	cmp	r1, #2
    2360:	d1b9      	bne.n	22d6 <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
    2362:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2366:	e7d0      	b.n	230a <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
    2368:	2b04      	cmp	r3, #4
    236a:	d109      	bne.n	2380 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
    236c:	1de3      	adds	r3, r4, #7
    236e:	f023 0307 	bic.w	r3, r3, #7
    2372:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    2376:	e9d3 2300 	ldrd	r2, r3, [r3]
    237a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    237e:	e7aa      	b.n	22d6 <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2380:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    2382:	bf04      	itt	eq
    2384:	f854 3b04 	ldreq.w	r3, [r4], #4
    2388:	930c      	streq	r3, [sp, #48]	; 0x30
    238a:	e7a4      	b.n	22d6 <cbvprintf+0x462>
		switch (conv->specifier) {
    238c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    2390:	2a78      	cmp	r2, #120	; 0x78
    2392:	d8ae      	bhi.n	22f2 <cbvprintf+0x47e>
    2394:	2a57      	cmp	r2, #87	; 0x57
    2396:	f200 808c 	bhi.w	24b2 <cbvprintf+0x63e>
    239a:	2a25      	cmp	r2, #37	; 0x25
    239c:	f000 80d4 	beq.w	2548 <cbvprintf+0x6d4>
    23a0:	2a24      	cmp	r2, #36	; 0x24
    23a2:	d9a6      	bls.n	22f2 <cbvprintf+0x47e>
    23a4:	2a41      	cmp	r2, #65	; 0x41
    23a6:	d003      	beq.n	23b0 <cbvprintf+0x53c>
    23a8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    23ac:	2b02      	cmp	r3, #2
    23ae:	d8a0      	bhi.n	22f2 <cbvprintf+0x47e>
	} u = {
    23b0:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    23b4:	2b00      	cmp	r3, #0
    23b6:	f2c0 81b7 	blt.w	2728 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
    23ba:	0738      	lsls	r0, r7, #28
    23bc:	f100 81b6 	bmi.w	272c <cbvprintf+0x8b8>
		*sign = ' ';
    23c0:	f017 0710 	ands.w	r7, r7, #16
    23c4:	bf18      	it	ne
    23c6:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    23c8:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    23cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    23d0:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    23d4:	2d00      	cmp	r5, #0
    23d6:	f040 81ab 	bne.w	2730 <cbvprintf+0x8bc>
    23da:	ea51 0003 	orrs.w	r0, r1, r3
    23de:	bf14      	ite	ne
    23e0:	2001      	movne	r0, #1
    23e2:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    23e4:	02db      	lsls	r3, r3, #11
    23e6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    23ea:	02c9      	lsls	r1, r1, #11
		c = 'f';
    23ec:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    23ee:	ea45 0e01 	orr.w	lr, r5, r1
    23f2:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    23f6:	bf08      	it	eq
    23f8:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    23fa:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    23fe:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    2402:	f000 8203 	beq.w	280c <cbvprintf+0x998>
		if (is_subnormal) {
    2406:	2800      	cmp	r0, #0
    2408:	f040 81cb 	bne.w	27a2 <cbvprintf+0x92e>
		fract |= BIT_63;
    240c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2410:	f04f 0c00 	mov.w	ip, #0
    2414:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    2418:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    241c:	9109      	str	r1, [sp, #36]	; 0x24
    241e:	4663      	mov	r3, ip
		fract *= 5U;
    2420:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    2424:	f115 0f02 	cmn.w	r5, #2
    2428:	f2c0 81c2 	blt.w	27b0 <cbvprintf+0x93c>
    242c:	f1bc 0f00 	cmp.w	ip, #0
    2430:	d001      	beq.n	2436 <cbvprintf+0x5c2>
    2432:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    2436:	2d00      	cmp	r5, #0
		fract += 2;
    2438:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    243c:	f300 81cd 	bgt.w	27da <cbvprintf+0x966>
	fract >>= (4 - expo);
    2440:	9809      	ldr	r0, [sp, #36]	; 0x24
    2442:	9908      	ldr	r1, [sp, #32]
    2444:	f1c5 0c04 	rsb	ip, r5, #4
    2448:	351c      	adds	r5, #28
    244a:	fa00 f505 	lsl.w	r5, r0, r5
    244e:	f1ac 0e20 	sub.w	lr, ip, #32
    2452:	fa21 f10c 	lsr.w	r1, r1, ip
    2456:	fa20 fe0e 	lsr.w	lr, r0, lr
    245a:	4329      	orrs	r1, r5
    245c:	ea41 010e 	orr.w	r1, r1, lr
    2460:	fa20 f00c 	lsr.w	r0, r0, ip
    2464:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    2468:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    246c:	2947      	cmp	r1, #71	; 0x47
    246e:	f040 81d4 	bne.w	281a <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
    2472:	1cdd      	adds	r5, r3, #3
    2474:	db02      	blt.n	247c <cbvprintf+0x608>
    2476:	4598      	cmp	r8, r3
    2478:	f280 81cb 	bge.w	2812 <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
    247c:	3a02      	subs	r2, #2
			if (precision > 0) {
    247e:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    2482:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    2484:	dd01      	ble.n	248a <cbvprintf+0x616>
				precision--;
    2486:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    248a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    248e:	0688      	lsls	r0, r1, #26
    2490:	f100 81c3 	bmi.w	281a <cbvprintf+0x9a6>
    2494:	f1b8 0f00 	cmp.w	r8, #0
    2498:	bfd4      	ite	le
    249a:	2100      	movle	r1, #0
    249c:	2101      	movgt	r1, #1
	if (c == 'f') {
    249e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    24a0:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    24a2:	f040 81bc 	bne.w	281e <cbvprintf+0x9aa>
		if (decimals < 0) {
    24a6:	eb13 0508 	adds.w	r5, r3, r8
    24aa:	f140 81ba 	bpl.w	2822 <cbvprintf+0x9ae>
			decimals = 0;
    24ae:	2500      	movs	r5, #0
    24b0:	e1ba      	b.n	2828 <cbvprintf+0x9b4>
		switch (conv->specifier) {
    24b2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    24b6:	2b20      	cmp	r3, #32
    24b8:	f63f af1b 	bhi.w	22f2 <cbvprintf+0x47e>
    24bc:	a001      	add	r0, pc, #4	; (adr r0, 24c4 <cbvprintf+0x650>)
    24be:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    24c2:	bf00      	nop
    24c4:	000026cb 	.word	0x000026cb
    24c8:	000022f3 	.word	0x000022f3
    24cc:	000022f3 	.word	0x000022f3
    24d0:	000022f3 	.word	0x000022f3
    24d4:	000022f3 	.word	0x000022f3
    24d8:	000022f3 	.word	0x000022f3
    24dc:	000022f3 	.word	0x000022f3
    24e0:	000022f3 	.word	0x000022f3
    24e4:	000022f3 	.word	0x000022f3
    24e8:	000023b1 	.word	0x000023b1
    24ec:	000022f3 	.word	0x000022f3
    24f0:	00002575 	.word	0x00002575
    24f4:	0000266b 	.word	0x0000266b
    24f8:	000023b1 	.word	0x000023b1
    24fc:	000023b1 	.word	0x000023b1
    2500:	000023b1 	.word	0x000023b1
    2504:	000022f3 	.word	0x000022f3
    2508:	0000266b 	.word	0x0000266b
    250c:	000022f3 	.word	0x000022f3
    2510:	000022f3 	.word	0x000022f3
    2514:	000022f3 	.word	0x000022f3
    2518:	000022f3 	.word	0x000022f3
    251c:	00002701 	.word	0x00002701
    2520:	000026cb 	.word	0x000026cb
    2524:	000026cf 	.word	0x000026cf
    2528:	000022f3 	.word	0x000022f3
    252c:	000022f3 	.word	0x000022f3
    2530:	0000254f 	.word	0x0000254f
    2534:	000022f3 	.word	0x000022f3
    2538:	000026cb 	.word	0x000026cb
    253c:	000022f3 	.word	0x000022f3
    2540:	000022f3 	.word	0x000022f3
    2544:	000026cb 	.word	0x000026cb
			OUTC('%');
    2548:	4651      	mov	r1, sl
    254a:	4610      	mov	r0, r2
    254c:	e4a4      	b.n	1e98 <cbvprintf+0x24>
			if (precision >= 0) {
    254e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    2554:	db09      	blt.n	256a <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
    2556:	4641      	mov	r1, r8
    2558:	4610      	mov	r0, r2
    255a:	9203      	str	r2, [sp, #12]
    255c:	f00a fc17 	bl	cd8e <strnlen>
				len = strlen(bps);
    2560:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    2562:	2700      	movs	r7, #0
			bpe = bps + len;
    2564:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    2566:	b962      	cbnz	r2, 2582 <cbvprintf+0x70e>
    2568:	e6c3      	b.n	22f2 <cbvprintf+0x47e>
				len = strlen(bps);
    256a:	4610      	mov	r0, r2
    256c:	9203      	str	r2, [sp, #12]
    256e:	f7fe fc22 	bl	db6 <strlen>
    2572:	e7f5      	b.n	2560 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2576:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    257a:	2700      	movs	r7, #0
			bpe = buf + 1;
    257c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    2580:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    2582:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    2584:	b107      	cbz	r7, 2588 <cbvprintf+0x714>
			nj_len += 1U;
    2586:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2588:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    258c:	06c1      	lsls	r1, r0, #27
    258e:	f140 8237 	bpl.w	2a00 <cbvprintf+0xb8c>
			nj_len += 2U;
    2592:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    2594:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    2596:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    2598:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    259a:	bf44      	itt	mi
    259c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    259e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    25a0:	f1bb 0f00 	cmp.w	fp, #0
    25a4:	dd23      	ble.n	25ee <cbvprintf+0x77a>
			width -= (int)nj_len;
    25a6:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    25aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    25ae:	0759      	lsls	r1, r3, #29
    25b0:	f3c3 0880 	ubfx	r8, r3, #2, #1
    25b4:	d41b      	bmi.n	25ee <cbvprintf+0x77a>
				if (conv->flag_zero) {
    25b6:	0658      	lsls	r0, r3, #25
    25b8:	f140 8236 	bpl.w	2a28 <cbvprintf+0xbb4>
					if (sign != 0) {
    25bc:	2f00      	cmp	r7, #0
    25be:	f000 8236 	beq.w	2a2e <cbvprintf+0xbba>
						OUTC(sign);
    25c2:	4651      	mov	r1, sl
    25c4:	4638      	mov	r0, r7
    25c6:	9203      	str	r2, [sp, #12]
    25c8:	47c8      	blx	r9
    25ca:	2800      	cmp	r0, #0
    25cc:	f2c0 8224 	blt.w	2a18 <cbvprintf+0xba4>
    25d0:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    25d2:	4647      	mov	r7, r8
						OUTC(sign);
    25d4:	3601      	adds	r6, #1
					pad = '0';
    25d6:	f04f 0830 	mov.w	r8, #48	; 0x30
    25da:	445e      	add	r6, fp
    25dc:	465b      	mov	r3, fp
				while (width-- > 0) {
    25de:	2b00      	cmp	r3, #0
    25e0:	eba6 000b 	sub.w	r0, r6, fp
    25e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    25e8:	f300 820e 	bgt.w	2a08 <cbvprintf+0xb94>
    25ec:	4606      	mov	r6, r0
		if (sign != 0) {
    25ee:	b147      	cbz	r7, 2602 <cbvprintf+0x78e>
			OUTC(sign);
    25f0:	4651      	mov	r1, sl
    25f2:	4638      	mov	r0, r7
    25f4:	9203      	str	r2, [sp, #12]
    25f6:	47c8      	blx	r9
    25f8:	2800      	cmp	r0, #0
    25fa:	f2c0 820d 	blt.w	2a18 <cbvprintf+0xba4>
    25fe:	9a03      	ldr	r2, [sp, #12]
    2600:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2602:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2606:	0659      	lsls	r1, r3, #25
    2608:	f140 8265 	bpl.w	2ad6 <cbvprintf+0xc62>
			if (conv->specifier_a) {
    260c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    2610:	2b00      	cmp	r3, #0
    2612:	eba6 0602 	sub.w	r6, r6, r2
    2616:	f280 8219 	bge.w	2a4c <cbvprintf+0xbd8>
    261a:	4617      	mov	r7, r2
    261c:	46b8      	mov	r8, r7
    261e:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    2620:	f817 0b01 	ldrb.w	r0, [r7], #1
    2624:	2870      	cmp	r0, #112	; 0x70
    2626:	f040 8205 	bne.w	2a34 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
    262a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    262c:	461e      	mov	r6, r3
    262e:	441f      	add	r7, r3
    2630:	1bbb      	subs	r3, r7, r6
    2632:	2b00      	cmp	r3, #0
    2634:	f300 8248 	bgt.w	2ac8 <cbvprintf+0xc54>
			OUTS(cp, bpe);
    2638:	462b      	mov	r3, r5
    263a:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    263c:	4651      	mov	r1, sl
    263e:	4648      	mov	r0, r9
    2640:	f008 fa8f 	bl	ab62 <outs>
    2644:	2800      	cmp	r0, #0
    2646:	f2c0 81e7 	blt.w	2a18 <cbvprintf+0xba4>
    264a:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    264c:	4606      	mov	r6, r0
    264e:	4483      	add	fp, r0
		while (width > 0) {
    2650:	ebab 0306 	sub.w	r3, fp, r6
    2654:	2b00      	cmp	r3, #0
    2656:	f77f ae4c 	ble.w	22f2 <cbvprintf+0x47e>
			OUTC(' ');
    265a:	4651      	mov	r1, sl
    265c:	2020      	movs	r0, #32
    265e:	47c8      	blx	r9
    2660:	2800      	cmp	r0, #0
    2662:	f2c0 81d9 	blt.w	2a18 <cbvprintf+0xba4>
    2666:	3601      	adds	r6, #1
			--width;
    2668:	e7f2      	b.n	2650 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
    266a:	073d      	lsls	r5, r7, #28
    266c:	d42b      	bmi.n	26c6 <cbvprintf+0x852>
				sign = ' ';
    266e:	f017 0710 	ands.w	r7, r7, #16
    2672:	bf18      	it	ne
    2674:	2720      	movne	r7, #32
			sint = value->sint;
    2676:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    267a:	2b00      	cmp	r3, #0
    267c:	da05      	bge.n	268a <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
    267e:	4252      	negs	r2, r2
    2680:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2684:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2688:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    268a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    268e:	9300      	str	r3, [sp, #0]
    2690:	aa0e      	add	r2, sp, #56	; 0x38
    2692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2696:	ab13      	add	r3, sp, #76	; 0x4c
    2698:	f7ff fba0 	bl	1ddc <encode_uint>
    269c:	4602      	mov	r2, r0
			if (precision >= 0) {
    269e:	f1b8 0f00 	cmp.w	r8, #0
    26a2:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    26a6:	f6ff af5e 	blt.w	2566 <cbvprintf+0x6f2>
				conv->flag_zero = false;
    26aa:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    26ae:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    26b0:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    26b4:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    26b6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    26ba:	f67f af54 	bls.w	2566 <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
    26be:	eba8 0303 	sub.w	r3, r8, r3
    26c2:	930f      	str	r3, [sp, #60]	; 0x3c
    26c4:	e74f      	b.n	2566 <cbvprintf+0x6f2>
				sign = '+';
    26c6:	272b      	movs	r7, #43	; 0x2b
    26c8:	e7d5      	b.n	2676 <cbvprintf+0x802>
		switch (conv->specifier) {
    26ca:	2700      	movs	r7, #0
    26cc:	e7dd      	b.n	268a <cbvprintf+0x816>
			if (value->ptr != NULL) {
    26ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    26d0:	2800      	cmp	r0, #0
    26d2:	f000 8191 	beq.w	29f8 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    26d6:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    26da:	9300      	str	r3, [sp, #0]
    26dc:	aa0e      	add	r2, sp, #56	; 0x38
    26de:	ab13      	add	r3, sp, #76	; 0x4c
    26e0:	2100      	movs	r1, #0
    26e2:	f7ff fb7b 	bl	1ddc <encode_uint>
				conv->altform_0c = true;
    26e6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    26ea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    26ee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    26f2:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    26f6:	4602      	mov	r2, r0
				conv->altform_0c = true;
    26f8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    26fc:	2700      	movs	r7, #0
				goto prec_int_pad0;
    26fe:	e7ce      	b.n	269e <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
    2700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    2702:	2907      	cmp	r1, #7
    2704:	f63f adf5 	bhi.w	22f2 <cbvprintf+0x47e>
    2708:	e8df f001 	tbb	[pc, r1]
    270c:	0c06040c 	.word	0x0c06040c
    2710:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2714:	701e      	strb	r6, [r3, #0]
		break;
    2716:	e5ec      	b.n	22f2 <cbvprintf+0x47e>
		*(short *)dp = (short)count;
    2718:	801e      	strh	r6, [r3, #0]
		break;
    271a:	e5ea      	b.n	22f2 <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
    271c:	17f2      	asrs	r2, r6, #31
    271e:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    2722:	e5e6      	b.n	22f2 <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2724:	601e      	str	r6, [r3, #0]
		break;
    2726:	e5e4      	b.n	22f2 <cbvprintf+0x47e>
		*sign = '-';
    2728:	272d      	movs	r7, #45	; 0x2d
    272a:	e64d      	b.n	23c8 <cbvprintf+0x554>
		*sign = '+';
    272c:	272b      	movs	r7, #43	; 0x2b
    272e:	e64b      	b.n	23c8 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2730:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2734:	4285      	cmp	r5, r0
    2736:	d131      	bne.n	279c <cbvprintf+0x928>
			if (isupper((int)c)) {
    2738:	3201      	adds	r2, #1
    273a:	48b9      	ldr	r0, [pc, #740]	; (2a20 <cbvprintf+0xbac>)
    273c:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    273e:	430b      	orrs	r3, r1
    2740:	5c12      	ldrb	r2, [r2, r0]
    2742:	f002 0203 	and.w	r2, r2, #3
    2746:	d11b      	bne.n	2780 <cbvprintf+0x90c>
			if (isupper((int)c)) {
    2748:	2a01      	cmp	r2, #1
    274a:	d111      	bne.n	2770 <cbvprintf+0x8fc>
				*buf++ = 'I';
    274c:	2349      	movs	r3, #73	; 0x49
    274e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    2752:	234e      	movs	r3, #78	; 0x4e
    2754:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    2758:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    275a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    275e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2762:	f36f 1386 	bfc	r3, #6, #1
    2766:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    276a:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    276e:	e707      	b.n	2580 <cbvprintf+0x70c>
				*buf++ = 'i';
    2770:	2369      	movs	r3, #105	; 0x69
    2772:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2776:	236e      	movs	r3, #110	; 0x6e
    2778:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    277c:	2366      	movs	r3, #102	; 0x66
    277e:	e7ec      	b.n	275a <cbvprintf+0x8e6>
			if (isupper((int)c)) {
    2780:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    2782:	bf07      	ittee	eq
    2784:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    2786:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    2788:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    278a:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    278c:	bf0c      	ite	eq
    278e:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2792:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    2796:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    279a:	e7de      	b.n	275a <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    279c:	2000      	movs	r0, #0
    279e:	e621      	b.n	23e4 <cbvprintf+0x570>
				expo--;
    27a0:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    27a2:	1849      	adds	r1, r1, r1
    27a4:	415b      	adcs	r3, r3
    27a6:	2b00      	cmp	r3, #0
    27a8:	dafa      	bge.n	27a0 <cbvprintf+0x92c>
    27aa:	e9cd 1308 	strd	r1, r3, [sp, #32]
    27ae:	e62d      	b.n	240c <cbvprintf+0x598>
			fract >>= 1;
    27b0:	0840      	lsrs	r0, r0, #1
    27b2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    27b6:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    27b8:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    27bc:	46ac      	mov	ip, r5
			expo++;
    27be:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    27c2:	d2f5      	bcs.n	27b0 <cbvprintf+0x93c>
		fract *= 5U;
    27c4:	fb0e f501 	mul.w	r5, lr, r1
    27c8:	fba0 010e 	umull	r0, r1, r0, lr
    27cc:	4429      	add	r1, r5
		decexp--;
    27ce:	3b01      	subs	r3, #1
		expo++;
    27d0:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    27d4:	f04f 0c01 	mov.w	ip, #1
    27d8:	e624      	b.n	2424 <cbvprintf+0x5b0>
		fract += 2;
    27da:	3102      	adds	r1, #2
    27dc:	f140 0000 	adc.w	r0, r0, #0
    27e0:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    27e4:	a808      	add	r0, sp, #32
    27e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    27ea:	f008 f98b 	bl	ab04 <_ldiv5>
		decexp++;
    27ee:	9b04      	ldr	r3, [sp, #16]
    27f0:	9a03      	ldr	r2, [sp, #12]
    27f2:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    27f6:	3d01      	subs	r5, #1
		decexp++;
    27f8:	3301      	adds	r3, #1
			fract <<= 1;
    27fa:	1849      	adds	r1, r1, r1
    27fc:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    27fe:	2800      	cmp	r0, #0
			expo--;
    2800:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    2804:	daf9      	bge.n	27fa <cbvprintf+0x986>
    2806:	e9cd 1008 	strd	r1, r0, [sp, #32]
    280a:	e614      	b.n	2436 <cbvprintf+0x5c2>
    280c:	2300      	movs	r3, #0
    280e:	461d      	mov	r5, r3
    2810:	e616      	b.n	2440 <cbvprintf+0x5cc>
			precision -= decexp;
    2812:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    2816:	2266      	movs	r2, #102	; 0x66
    2818:	e637      	b.n	248a <cbvprintf+0x616>
	bool prune_zero = false;
    281a:	2100      	movs	r1, #0
    281c:	e63f      	b.n	249e <cbvprintf+0x62a>
		decimals = precision + 1;
    281e:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    2822:	2d10      	cmp	r5, #16
    2824:	bfa8      	it	ge
    2826:	2510      	movge	r5, #16
    2828:	2110      	movs	r1, #16
    282a:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    282c:	2000      	movs	r0, #0
    282e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    2832:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    2836:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    283a:	b9a5      	cbnz	r5, 2866 <cbvprintf+0x9f2>
	fract += round;
    283c:	9d08      	ldr	r5, [sp, #32]
    283e:	1949      	adds	r1, r1, r5
    2840:	9d09      	ldr	r5, [sp, #36]	; 0x24
    2842:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    2846:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    284a:	d21b      	bcs.n	2884 <cbvprintf+0xa10>
	fract += round;
    284c:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    2850:	2a66      	cmp	r2, #102	; 0x66
    2852:	f040 8099 	bne.w	2988 <cbvprintf+0xb14>
		if (decexp > 0) {
    2856:	2b00      	cmp	r3, #0
    2858:	dc23      	bgt.n	28a2 <cbvprintf+0xa2e>
			*buf++ = '0';
    285a:	2130      	movs	r1, #48	; 0x30
    285c:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    2860:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    2864:	e02f      	b.n	28c6 <cbvprintf+0xa52>
	*v >>= 1;
    2866:	0849      	lsrs	r1, r1, #1
    2868:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    286c:	0840      	lsrs	r0, r0, #1
    286e:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    2872:	a80a      	add	r0, sp, #40	; 0x28
    2874:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2878:	3d01      	subs	r5, #1
    287a:	f008 f943 	bl	ab04 <_ldiv5>
    287e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    2882:	e7d8      	b.n	2836 <cbvprintf+0x9c2>
	*v >>= 1;
    2884:	0849      	lsrs	r1, r1, #1
    2886:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    288a:	a808      	add	r0, sp, #32
	*v >>= 1;
    288c:	086d      	lsrs	r5, r5, #1
    288e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2892:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    2896:	f008 f935 	bl	ab04 <_ldiv5>
		decexp++;
    289a:	9b05      	ldr	r3, [sp, #20]
    289c:	9a04      	ldr	r2, [sp, #16]
    289e:	3301      	adds	r3, #1
    28a0:	e7d6      	b.n	2850 <cbvprintf+0x9dc>
	char *buf = bps;
    28a2:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    28a4:	9907      	ldr	r1, [sp, #28]
    28a6:	2900      	cmp	r1, #0
    28a8:	dd0b      	ble.n	28c2 <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
    28aa:	a907      	add	r1, sp, #28
    28ac:	a808      	add	r0, sp, #32
    28ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    28b2:	f008 f93f 	bl	ab34 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    28b6:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    28b8:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    28bc:	3b01      	subs	r3, #1
    28be:	9a04      	ldr	r2, [sp, #16]
    28c0:	d1f0      	bne.n	28a4 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
    28c2:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    28c4:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    28c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    28ca:	0689      	lsls	r1, r1, #26
    28cc:	d402      	bmi.n	28d4 <cbvprintf+0xa60>
    28ce:	f1b8 0f00 	cmp.w	r8, #0
    28d2:	dd1d      	ble.n	2910 <cbvprintf+0xa9c>
			*buf++ = '.';
    28d4:	212e      	movs	r1, #46	; 0x2e
    28d6:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    28da:	b19b      	cbz	r3, 2904 <cbvprintf+0xa90>
    28dc:	f1b8 0f00 	cmp.w	r8, #0
    28e0:	dd16      	ble.n	2910 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
    28e2:	4259      	negs	r1, r3
    28e4:	4541      	cmp	r1, r8
    28e6:	bfa8      	it	ge
    28e8:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    28ea:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    28ee:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    28f0:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    28f2:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    28f6:	bfd4      	ite	le
    28f8:	2100      	movle	r1, #0
    28fa:	2101      	movgt	r1, #1
    28fc:	f361 1045 	bfi	r0, r1, #5, #1
    2900:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    2904:	f1b8 0f00 	cmp.w	r8, #0
    2908:	dd02      	ble.n	2910 <cbvprintf+0xa9c>
    290a:	9907      	ldr	r1, [sp, #28]
    290c:	2900      	cmp	r1, #0
    290e:	dc56      	bgt.n	29be <cbvprintf+0xb4a>
	if (prune_zero) {
    2910:	9903      	ldr	r1, [sp, #12]
    2912:	2900      	cmp	r1, #0
    2914:	d163      	bne.n	29de <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
    2916:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    291a:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    291e:	2945      	cmp	r1, #69	; 0x45
    2920:	d121      	bne.n	2966 <cbvprintf+0xaf2>
		if (decexp < 0) {
    2922:	2b00      	cmp	r3, #0
		*buf++ = c;
    2924:	4629      	mov	r1, r5
			decexp = -decexp;
    2926:	bfb8      	it	lt
    2928:	425b      	neglt	r3, r3
		*buf++ = c;
    292a:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    292e:	bfb4      	ite	lt
    2930:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    2932:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    2934:	2b63      	cmp	r3, #99	; 0x63
    2936:	706a      	strb	r2, [r5, #1]
    2938:	dd09      	ble.n	294e <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
    293a:	2064      	movs	r0, #100	; 0x64
    293c:	fb93 f2f0 	sdiv	r2, r3, r0
    2940:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    2944:	1ce9      	adds	r1, r5, #3
    2946:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    294a:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    294e:	200a      	movs	r0, #10
    2950:	460d      	mov	r5, r1
    2952:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    2956:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    295a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    295e:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2960:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    2964:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    2966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2968:	2b00      	cmp	r3, #0
    296a:	dc43      	bgt.n	29f4 <cbvprintf+0xb80>
    296c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    296e:	2b00      	cmp	r3, #0
    2970:	bfd4      	ite	le
    2972:	2300      	movle	r3, #0
    2974:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2976:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    297a:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    297e:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2980:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    2984:	702b      	strb	r3, [r5, #0]
	return bps;
    2986:	e5fb      	b.n	2580 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
    2988:	a907      	add	r1, sp, #28
    298a:	a808      	add	r0, sp, #32
    298c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2990:	f008 f8d0 	bl	ab34 <_get_digit>
		if (*buf++ != '0') {
    2994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    2998:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    299c:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    29a0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    29a2:	bf18      	it	ne
    29a4:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    29a8:	0688      	lsls	r0, r1, #26
    29aa:	d402      	bmi.n	29b2 <cbvprintf+0xb3e>
    29ac:	f1b8 0f00 	cmp.w	r8, #0
    29b0:	dd12      	ble.n	29d8 <cbvprintf+0xb64>
			*buf++ = '.';
    29b2:	212e      	movs	r1, #46	; 0x2e
    29b4:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    29b8:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    29bc:	e7a2      	b.n	2904 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
    29be:	a907      	add	r1, sp, #28
    29c0:	a808      	add	r0, sp, #32
    29c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    29c6:	f008 f8b5 	bl	ab34 <_get_digit>
		precision--;
    29ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    29ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    29d2:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    29d6:	e795      	b.n	2904 <cbvprintf+0xa90>
		if (*buf++ != '0') {
    29d8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    29dc:	e798      	b.n	2910 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
    29de:	2100      	movs	r1, #0
    29e0:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    29e2:	4628      	mov	r0, r5
    29e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    29e8:	2930      	cmp	r1, #48	; 0x30
    29ea:	d0fa      	beq.n	29e2 <cbvprintf+0xb6e>
		if (*buf != '.') {
    29ec:	292e      	cmp	r1, #46	; 0x2e
    29ee:	bf18      	it	ne
    29f0:	4605      	movne	r5, r0
    29f2:	e792      	b.n	291a <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
    29f4:	2301      	movs	r3, #1
    29f6:	e7be      	b.n	2976 <cbvprintf+0xb02>
			bpe = bps + 5;
    29f8:	4d0a      	ldr	r5, [pc, #40]	; (2a24 <cbvprintf+0xbb0>)
		char sign = 0;
    29fa:	4607      	mov	r7, r0
			bps = "(nil)";
    29fc:	1f6a      	subs	r2, r5, #5
    29fe:	e5c0      	b.n	2582 <cbvprintf+0x70e>
		} else if (conv->altform_0) {
    2a00:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    2a02:	bf48      	it	mi
    2a04:	3301      	addmi	r3, #1
    2a06:	e5c5      	b.n	2594 <cbvprintf+0x720>
					OUTC(pad);
    2a08:	4651      	mov	r1, sl
    2a0a:	4640      	mov	r0, r8
    2a0c:	9203      	str	r2, [sp, #12]
    2a0e:	47c8      	blx	r9
    2a10:	2800      	cmp	r0, #0
    2a12:	9a03      	ldr	r2, [sp, #12]
    2a14:	f6bf ade2 	bge.w	25dc <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
    2a18:	b01b      	add	sp, #108	; 0x6c
    2a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a1e:	bf00      	nop
    2a20:	0000edfa 	.word	0x0000edfa
    2a24:	0000de3a 	.word	0x0000de3a
				char pad = ' ';
    2a28:	f04f 0820 	mov.w	r8, #32
    2a2c:	e5d5      	b.n	25da <cbvprintf+0x766>
					pad = '0';
    2a2e:	f04f 0830 	mov.w	r8, #48	; 0x30
    2a32:	e5d2      	b.n	25da <cbvprintf+0x766>
					OUTC(*cp++);
    2a34:	4651      	mov	r1, sl
    2a36:	47c8      	blx	r9
    2a38:	2800      	cmp	r0, #0
    2a3a:	f6bf adef 	bge.w	261c <cbvprintf+0x7a8>
    2a3e:	e7eb      	b.n	2a18 <cbvprintf+0xba4>
					OUTC(*cp++);
    2a40:	4651      	mov	r1, sl
    2a42:	9203      	str	r2, [sp, #12]
    2a44:	47c8      	blx	r9
    2a46:	2800      	cmp	r0, #0
    2a48:	9a03      	ldr	r2, [sp, #12]
    2a4a:	dbe5      	blt.n	2a18 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    2a4c:	7810      	ldrb	r0, [r2, #0]
    2a4e:	4b37      	ldr	r3, [pc, #220]	; (2b2c <cbvprintf+0xcb8>)
    2a50:	5cc3      	ldrb	r3, [r0, r3]
    2a52:	075b      	lsls	r3, r3, #29
    2a54:	4617      	mov	r7, r2
    2a56:	eb06 0802 	add.w	r8, r6, r2
    2a5a:	f102 0201 	add.w	r2, r2, #1
    2a5e:	d4ef      	bmi.n	2a40 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
    2a60:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    2a64:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    2a66:	0699      	lsls	r1, r3, #26
    2a68:	d407      	bmi.n	2a7a <cbvprintf+0xc06>
    2a6a:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    2a6c:	2e00      	cmp	r6, #0
    2a6e:	eba8 0206 	sub.w	r2, r8, r6
    2a72:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    2a76:	dc0f      	bgt.n	2a98 <cbvprintf+0xc24>
    2a78:	4690      	mov	r8, r2
				if (*cp == '.') {
    2a7a:	7838      	ldrb	r0, [r7, #0]
    2a7c:	282e      	cmp	r0, #46	; 0x2e
    2a7e:	d108      	bne.n	2a92 <cbvprintf+0xc1e>
					OUTC(*cp++);
    2a80:	4651      	mov	r1, sl
    2a82:	47c8      	blx	r9
						OUTC('0');
    2a84:	2800      	cmp	r0, #0
    2a86:	dbc7      	blt.n	2a18 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
    2a88:	2e00      	cmp	r6, #0
						OUTC('0');
    2a8a:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    2a8e:	dc09      	bgt.n	2aa4 <cbvprintf+0xc30>
					OUTC(*cp++);
    2a90:	3701      	adds	r7, #1
    2a92:	eba8 0607 	sub.w	r6, r8, r7
    2a96:	e00e      	b.n	2ab6 <cbvprintf+0xc42>
						OUTC('0');
    2a98:	4651      	mov	r1, sl
    2a9a:	2030      	movs	r0, #48	; 0x30
    2a9c:	47c8      	blx	r9
    2a9e:	2800      	cmp	r0, #0
    2aa0:	dae4      	bge.n	2a6c <cbvprintf+0xbf8>
    2aa2:	e7b9      	b.n	2a18 <cbvprintf+0xba4>
						OUTC('0');
    2aa4:	4651      	mov	r1, sl
    2aa6:	2030      	movs	r0, #48	; 0x30
    2aa8:	47c8      	blx	r9
    2aaa:	3e01      	subs	r6, #1
    2aac:	e7ea      	b.n	2a84 <cbvprintf+0xc10>
					OUTC(*cp++);
    2aae:	4651      	mov	r1, sl
    2ab0:	47c8      	blx	r9
    2ab2:	2800      	cmp	r0, #0
    2ab4:	dbb0      	blt.n	2a18 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    2ab6:	4a1d      	ldr	r2, [pc, #116]	; (2b2c <cbvprintf+0xcb8>)
    2ab8:	46b8      	mov	r8, r7
    2aba:	19f3      	adds	r3, r6, r7
    2abc:	f817 0b01 	ldrb.w	r0, [r7], #1
    2ac0:	5c12      	ldrb	r2, [r2, r0]
    2ac2:	0752      	lsls	r2, r2, #29
    2ac4:	d4f3      	bmi.n	2aae <cbvprintf+0xc3a>
    2ac6:	e5b0      	b.n	262a <cbvprintf+0x7b6>
				OUTC('0');
    2ac8:	4651      	mov	r1, sl
    2aca:	2030      	movs	r0, #48	; 0x30
    2acc:	47c8      	blx	r9
    2ace:	2800      	cmp	r0, #0
    2ad0:	dba2      	blt.n	2a18 <cbvprintf+0xba4>
    2ad2:	3601      	adds	r6, #1
    2ad4:	e5ac      	b.n	2630 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
    2ad6:	06d8      	lsls	r0, r3, #27
    2ad8:	d401      	bmi.n	2ade <cbvprintf+0xc6a>
    2ada:	0719      	lsls	r1, r3, #28
    2adc:	d507      	bpl.n	2aee <cbvprintf+0xc7a>
				OUTC('0');
    2ade:	4651      	mov	r1, sl
    2ae0:	2030      	movs	r0, #48	; 0x30
    2ae2:	9203      	str	r2, [sp, #12]
    2ae4:	47c8      	blx	r9
    2ae6:	2800      	cmp	r0, #0
    2ae8:	db96      	blt.n	2a18 <cbvprintf+0xba4>
    2aea:	9a03      	ldr	r2, [sp, #12]
    2aec:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    2aee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2af2:	06db      	lsls	r3, r3, #27
    2af4:	d508      	bpl.n	2b08 <cbvprintf+0xc94>
				OUTC(conv->specifier);
    2af6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2afa:	9203      	str	r2, [sp, #12]
    2afc:	4651      	mov	r1, sl
    2afe:	47c8      	blx	r9
    2b00:	2800      	cmp	r0, #0
    2b02:	db89      	blt.n	2a18 <cbvprintf+0xba4>
    2b04:	9a03      	ldr	r2, [sp, #12]
    2b06:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    2b08:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2b0a:	4437      	add	r7, r6
    2b0c:	1bbb      	subs	r3, r7, r6
    2b0e:	2b00      	cmp	r3, #0
    2b10:	dc01      	bgt.n	2b16 <cbvprintf+0xca2>
			OUTS(bps, bpe);
    2b12:	462b      	mov	r3, r5
    2b14:	e592      	b.n	263c <cbvprintf+0x7c8>
				OUTC('0');
    2b16:	4651      	mov	r1, sl
    2b18:	2030      	movs	r0, #48	; 0x30
    2b1a:	9203      	str	r2, [sp, #12]
    2b1c:	47c8      	blx	r9
    2b1e:	2800      	cmp	r0, #0
    2b20:	f6ff af7a 	blt.w	2a18 <cbvprintf+0xba4>
    2b24:	9a03      	ldr	r2, [sp, #12]
    2b26:	3601      	adds	r6, #1
    2b28:	e7f0      	b.n	2b0c <cbvprintf+0xc98>
    2b2a:	bf00      	nop
    2b2c:	0000edfb 	.word	0x0000edfb

00002b30 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    2b30:	070b      	lsls	r3, r1, #28
    2b32:	d506      	bpl.n	2b42 <foldcase+0x12>
    2b34:	4b03      	ldr	r3, [pc, #12]	; (2b44 <foldcase+0x14>)
    2b36:	5cc3      	ldrb	r3, [r0, r3]
    2b38:	f003 0303 	and.w	r3, r3, #3
    2b3c:	2b01      	cmp	r3, #1
        return tolower(ch);
    2b3e:	bf08      	it	eq
    2b40:	3020      	addeq	r0, #32
    return ch;
}
    2b42:	4770      	bx	lr
    2b44:	0000edfb 	.word	0x0000edfb

00002b48 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    2b48:	b513      	push	{r0, r1, r4, lr}
    2b4a:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    2b4c:	f005 f948 	bl	7de0 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    2b50:	f3c0 2307 	ubfx	r3, r0, #8, #8
    2b54:	9301      	str	r3, [sp, #4]
    2b56:	f3c0 4307 	ubfx	r3, r0, #16, #8
    2b5a:	9300      	str	r3, [sp, #0]
    2b5c:	4a04      	ldr	r2, [pc, #16]	; (2b70 <cmd_kernel_version+0x28>)
    2b5e:	0e03      	lsrs	r3, r0, #24
    2b60:	2108      	movs	r1, #8
    2b62:	4620      	mov	r0, r4
    2b64:	f008 fba5 	bl	b2b2 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    2b68:	2000      	movs	r0, #0
    2b6a:	b002      	add	sp, #8
    2b6c:	bd10      	pop	{r4, pc}
    2b6e:	bf00      	nop
    2b70:	0000de3b 	.word	0x0000de3b

00002b74 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    2b74:	b510      	push	{r4, lr}
    2b76:	4604      	mov	r4, r0
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b78:	f009 fdf1 	bl	c75e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    2b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2b80:	fba0 2003 	umull	r2, r0, r0, r3
    2b84:	fb03 0301 	mla	r3, r3, r1, r0
    2b88:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    2b8a:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    2b8e:	4620      	mov	r0, r4
    2b90:	4a02      	ldr	r2, [pc, #8]	; (2b9c <cmd_kernel_uptime+0x28>)
    2b92:	2108      	movs	r1, #8
    2b94:	f008 fb8d 	bl	b2b2 <shell_fprintf>
	return 0;
}
    2b98:	2000      	movs	r0, #0
    2b9a:	bd10      	pop	{r4, pc}
    2b9c:	0000de54 	.word	0x0000de54

00002ba0 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    2ba0:	b510      	push	{r4, lr}
    2ba2:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    2ba4:	f003 fe1c 	bl	67e0 <sys_clock_elapsed>
    2ba8:	4a08      	ldr	r2, [pc, #32]	; (2bcc <cmd_kernel_threads+0x2c>)
    2baa:	4603      	mov	r3, r0
    2bac:	2108      	movs	r1, #8
    2bae:	4620      	mov	r0, r4
    2bb0:	f008 fb7f 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "Threads:");
    2bb4:	4a06      	ldr	r2, [pc, #24]	; (2bd0 <cmd_kernel_threads+0x30>)
    2bb6:	4620      	mov	r0, r4
    2bb8:	2108      	movs	r1, #8
    2bba:	f008 fb7a 	bl	b2b2 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    2bbe:	4805      	ldr	r0, [pc, #20]	; (2bd4 <cmd_kernel_threads+0x34>)
    2bc0:	4621      	mov	r1, r4
    2bc2:	f004 ff9d 	bl	7b00 <k_thread_foreach>
	return 0;
}
    2bc6:	2000      	movs	r0, #0
    2bc8:	bd10      	pop	{r4, pc}
    2bca:	bf00      	nop
    2bcc:	0000de63 	.word	0x0000de63
    2bd0:	0000de82 	.word	0x0000de82
    2bd4:	00002c39 	.word	0x00002c39

00002bd8 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    2bd8:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    2bda:	4601      	mov	r1, r0
{
    2bdc:	b087      	sub	sp, #28
    2bde:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    2be0:	4811      	ldr	r0, [pc, #68]	; (2c28 <cmd_kernel_stacks+0x50>)
    2be2:	f004 ff8d 	bl	7b00 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    2be6:	4a11      	ldr	r2, [pc, #68]	; (2c2c <cmd_kernel_stacks+0x54>)
		unused = 0;
    2be8:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    2bea:	f812 1b01 	ldrb.w	r1, [r2], #1
    2bee:	29aa      	cmp	r1, #170	; 0xaa
    2bf0:	d103      	bne.n	2bfa <cmd_kernel_stacks+0x22>
				unused++;
    2bf2:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    2bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2bf8:	d1f7      	bne.n	2bea <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    2bfa:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    2bfe:	2264      	movs	r2, #100	; 0x64
    2c00:	434a      	muls	r2, r1
    2c02:	0ad2      	lsrs	r2, r2, #11
    2c04:	9205      	str	r2, [sp, #20]
    2c06:	2500      	movs	r5, #0
    2c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2c0c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    2c10:	e9cd 2301 	strd	r2, r3, [sp, #4]
    2c14:	4620      	mov	r0, r4
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <cmd_kernel_stacks+0x58>)
    2c18:	4a06      	ldr	r2, [pc, #24]	; (2c34 <cmd_kernel_stacks+0x5c>)
    2c1a:	9500      	str	r5, [sp, #0]
    2c1c:	2108      	movs	r1, #8
    2c1e:	f008 fb48 	bl	b2b2 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    2c22:	4628      	mov	r0, r5
    2c24:	b007      	add	sp, #28
    2c26:	bd30      	pop	{r4, r5, pc}
    2c28:	00002d19 	.word	0x00002d19
    2c2c:	20001e00 	.word	0x20001e00
    2c30:	20001de0 	.word	0x20001de0
    2c34:	0000de8c 	.word	0x0000de8c

00002c38 <shell_tdata_dump>:
{
    2c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c3a:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    2c3c:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    2c40:	4604      	mov	r4, r0
    2c42:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    2c44:	f009 fc42 	bl	c4cc <k_thread_name_get>
    2c48:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    2c4a:	f005 fcdd 	bl	8608 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    2c4e:	4b23      	ldr	r3, [pc, #140]	; (2cdc <shell_tdata_dump+0xa4>)
    2c50:	4a23      	ldr	r2, [pc, #140]	; (2ce0 <shell_tdata_dump+0xa8>)
    2c52:	2e00      	cmp	r6, #0
    2c54:	bf08      	it	eq
    2c56:	461e      	moveq	r6, r3
    2c58:	4b22      	ldr	r3, [pc, #136]	; (2ce4 <shell_tdata_dump+0xac>)
    2c5a:	e9cd 4600 	strd	r4, r6, [sp]
    2c5e:	4284      	cmp	r4, r0
    2c60:	bf18      	it	ne
    2c62:	4613      	movne	r3, r2
    2c64:	2108      	movs	r1, #8
    2c66:	4628      	mov	r0, r5
    2c68:	4a1f      	ldr	r2, [pc, #124]	; (2ce8 <shell_tdata_dump+0xb0>)
    2c6a:	f008 fb22 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    2c6e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    2c72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2c76:	f994 300e 	ldrsb.w	r3, [r4, #14]
    2c7a:	4a1c      	ldr	r2, [pc, #112]	; (2cec <shell_tdata_dump+0xb4>)
    2c7c:	9300      	str	r3, [sp, #0]
    2c7e:	2108      	movs	r1, #8
    2c80:	7b23      	ldrb	r3, [r4, #12]
    2c82:	4628      	mov	r0, r5
    2c84:	f008 fb15 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    2c88:	4620      	mov	r0, r4
    2c8a:	f004 ff81 	bl	7b90 <k_thread_state_str>
    2c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2c90:	9200      	str	r2, [sp, #0]
    2c92:	4603      	mov	r3, r0
    2c94:	4a16      	ldr	r2, [pc, #88]	; (2cf0 <shell_tdata_dump+0xb8>)
    2c96:	2108      	movs	r1, #8
    2c98:	4628      	mov	r0, r5
    2c9a:	f008 fb0a 	bl	b2b2 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    2c9e:	a905      	add	r1, sp, #20
    2ca0:	4620      	mov	r0, r4
    2ca2:	f009 fc17 	bl	c4d4 <z_impl_k_thread_stack_space_get>
	if (ret) {
    2ca6:	4603      	mov	r3, r0
    2ca8:	b130      	cbz	r0, 2cb8 <shell_tdata_dump+0x80>
		shell_print(shell,
    2caa:	4a12      	ldr	r2, [pc, #72]	; (2cf4 <shell_tdata_dump+0xbc>)
    2cac:	2108      	movs	r1, #8
    2cae:	4628      	mov	r0, r5
    2cb0:	f008 faff 	bl	b2b2 <shell_fprintf>
}
    2cb4:	b007      	add	sp, #28
    2cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    2cb8:	9a05      	ldr	r2, [sp, #20]
    2cba:	2364      	movs	r3, #100	; 0x64
    2cbc:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    2cbe:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    2cc2:	434b      	muls	r3, r1
		shell_print(shell,
    2cc4:	4a0c      	ldr	r2, [pc, #48]	; (2cf8 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    2cc6:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    2cca:	2108      	movs	r1, #8
    2ccc:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2cd0:	4628      	mov	r0, r5
    2cd2:	463b      	mov	r3, r7
    2cd4:	f008 faed 	bl	b2b2 <shell_fprintf>
}
    2cd8:	e7ec      	b.n	2cb4 <shell_tdata_dump+0x7c>
    2cda:	bf00      	nop
    2cdc:	0000ded4 	.word	0x0000ded4
    2ce0:	0000e5a6 	.word	0x0000e5a6
    2ce4:	0000ded2 	.word	0x0000ded2
    2ce8:	0000ded7 	.word	0x0000ded7
    2cec:	0000dee3 	.word	0x0000dee3
    2cf0:	0000df0f 	.word	0x0000df0f
    2cf4:	0000df26 	.word	0x0000df26
    2cf8:	0000df53 	.word	0x0000df53

00002cfc <cmd_kernel_cycles>:
{
    2cfc:	b510      	push	{r4, lr}
    2cfe:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    2d00:	f003 fd7c 	bl	67fc <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    2d04:	4a03      	ldr	r2, [pc, #12]	; (2d14 <cmd_kernel_cycles+0x18>)
    2d06:	4603      	mov	r3, r0
    2d08:	2108      	movs	r1, #8
    2d0a:	4620      	mov	r0, r4
    2d0c:	f008 fad1 	bl	b2b2 <shell_fprintf>
}
    2d10:	2000      	movs	r0, #0
    2d12:	bd10      	pop	{r4, pc}
    2d14:	0000df8a 	.word	0x0000df8a

00002d18 <shell_stack_dump>:
{
    2d18:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    2d1a:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    2d1e:	b089      	sub	sp, #36	; 0x24
    2d20:	4604      	mov	r4, r0
    2d22:	460d      	mov	r5, r1
    2d24:	a907      	add	r1, sp, #28
    2d26:	f009 fbd5 	bl	c4d4 <z_impl_k_thread_stack_space_get>
	if (ret) {
    2d2a:	4603      	mov	r3, r0
    2d2c:	b130      	cbz	r0, 2d3c <shell_stack_dump+0x24>
		shell_print(shell,
    2d2e:	4a10      	ldr	r2, [pc, #64]	; (2d70 <shell_stack_dump+0x58>)
    2d30:	2108      	movs	r1, #8
    2d32:	4628      	mov	r0, r5
    2d34:	f008 fabd 	bl	b2b2 <shell_fprintf>
}
    2d38:	b009      	add	sp, #36	; 0x24
    2d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    2d3c:	4620      	mov	r0, r4
    2d3e:	f009 fbc5 	bl	c4cc <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    2d42:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    2d44:	4a0b      	ldr	r2, [pc, #44]	; (2d74 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    2d46:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    2d48:	2800      	cmp	r0, #0
    2d4a:	bf18      	it	ne
    2d4c:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    2d4e:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    2d50:	e9cd 1702 	strd	r1, r7, [sp, #8]
    2d54:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    2d58:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    2d5a:	4a07      	ldr	r2, [pc, #28]	; (2d78 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    2d5c:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    2d60:	2108      	movs	r1, #8
    2d62:	e9cd 6304 	strd	r6, r3, [sp, #16]
    2d66:	4628      	mov	r0, r5
    2d68:	4623      	mov	r3, r4
    2d6a:	f008 faa2 	bl	b2b2 <shell_fprintf>
    2d6e:	e7e3      	b.n	2d38 <shell_stack_dump+0x20>
    2d70:	0000df26 	.word	0x0000df26
    2d74:	0000ded4 	.word	0x0000ded4
    2d78:	0000dfa0 	.word	0x0000dfa0

00002d7c <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    2d7c:	4603      	mov	r3, r0
	const char *name = dev->name;
    2d7e:	6800      	ldr	r0, [r0, #0]
{
    2d80:	b510      	push	{r4, lr}
    2d82:	460c      	mov	r4, r1
    2d84:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    2d86:	b108      	cbz	r0, 2d8c <get_device_name+0x10>
    2d88:	7802      	ldrb	r2, [r0, #0]
    2d8a:	b922      	cbnz	r2, 2d96 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    2d8c:	4a02      	ldr	r2, [pc, #8]	; (2d98 <get_device_name+0x1c>)
    2d8e:	4620      	mov	r0, r4
    2d90:	f006 fbe0 	bl	9554 <sniprintf>
    2d94:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
    2d96:	bd10      	pop	{r4, pc}
    2d98:	0000e077 	.word	0x0000e077

00002d9c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    2d9c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    2d9e:	680c      	ldr	r4, [r1, #0]
    2da0:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    2da4:	f7ff ffea 	bl	2d7c <get_device_name>
    2da8:	4a03      	ldr	r2, [pc, #12]	; (2db8 <cmd_device_list_visitor+0x1c>)
    2daa:	4603      	mov	r3, r0
    2dac:	2108      	movs	r1, #8
    2dae:	4620      	mov	r0, r4
    2db0:	f008 fa7f 	bl	b2b2 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    2db4:	2000      	movs	r0, #0
    2db6:	bd10      	pop	{r4, pc}
    2db8:	0000e07c 	.word	0x0000e07c

00002dbc <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    2dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dc0:	b08a      	sub	sp, #40	; 0x28
    2dc2:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    2dc4:	a801      	add	r0, sp, #4
    2dc6:	f004 fd91 	bl	78ec <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    2dca:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    2dcc:	4a1b      	ldr	r2, [pc, #108]	; (2e3c <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    2dce:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2e40 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    2dd2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2e44 <cmd_device_list+0x88>
    2dd6:	f8df a070 	ldr.w	sl, [pc, #112]	; 2e48 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    2dda:	2318      	movs	r3, #24
    2ddc:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    2de0:	2108      	movs	r1, #8
    2de2:	4628      	mov	r0, r5
    2de4:	f008 fa65 	bl	b2b2 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    2de8:	9c01      	ldr	r4, [sp, #4]
    2dea:	42b4      	cmp	r4, r6
    2dec:	d303      	bcc.n	2df6 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    2dee:	2000      	movs	r0, #0
    2df0:	b00a      	add	sp, #40	; 0x28
    2df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    2df6:	af05      	add	r7, sp, #20
    2df8:	4639      	mov	r1, r7
    2dfa:	2214      	movs	r2, #20
    2dfc:	4620      	mov	r0, r4
    2dfe:	f7ff ffbd 	bl	2d7c <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    2e02:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    2e04:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    2e06:	2108      	movs	r1, #8
    2e08:	4628      	mov	r0, r5
    2e0a:	f008 fa52 	bl	b2b2 <shell_fprintf>
    2e0e:	4620      	mov	r0, r4
    2e10:	f009 fb0d 	bl	c42e <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    2e14:	4a0d      	ldr	r2, [pc, #52]	; (2e4c <cmd_device_list+0x90>)
    2e16:	2800      	cmp	r0, #0
    2e18:	bf14      	ite	ne
    2e1a:	464b      	movne	r3, r9
    2e1c:	4653      	moveq	r3, sl
    2e1e:	2108      	movs	r1, #8
    2e20:	4628      	mov	r0, r5
    2e22:	f008 fa46 	bl	b2b2 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    2e26:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2e28:	4620      	mov	r0, r4
    2e2a:	4909      	ldr	r1, [pc, #36]	; (2e50 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    2e2c:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2e2e:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    2e30:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    2e34:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2e36:	f009 fb04 	bl	c442 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    2e3a:	e7d6      	b.n	2dea <cmd_device_list+0x2e>
    2e3c:	0000e09b 	.word	0x0000e09b
    2e40:	0000e0a5 	.word	0x0000e0a5
    2e44:	0000e08c 	.word	0x0000e08c
    2e48:	0000e092 	.word	0x0000e092
    2e4c:	0000e0aa 	.word	0x0000e0aa
    2e50:	00002d9d 	.word	0x00002d9d

00002e54 <device_get_config_level>:
{
    2e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    2e5a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2ea4 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2e5e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    2e62:	3101      	adds	r1, #1
{
    2e64:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2e66:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    2e6a:	4606      	mov	r6, r0
	bool devices = false;
    2e6c:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2e6e:	45a0      	cmp	r8, r4
    2e70:	d803      	bhi.n	2e7a <device_get_config_level+0x26>
}
    2e72:	4638      	mov	r0, r7
    2e74:	b007      	add	sp, #28
    2e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e7a:	4620      	mov	r0, r4
    2e7c:	f009 fad7 	bl	c42e <z_device_ready>
    2e80:	4605      	mov	r5, r0
    2e82:	b158      	cbz	r0, 2e9c <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    2e84:	2214      	movs	r2, #20
    2e86:	a901      	add	r1, sp, #4
    2e88:	4620      	mov	r0, r4
    2e8a:	f7ff ff77 	bl	2d7c <get_device_name>
    2e8e:	464a      	mov	r2, r9
    2e90:	4603      	mov	r3, r0
    2e92:	2108      	movs	r1, #8
    2e94:	4630      	mov	r0, r6
    2e96:	f008 fa0c 	bl	b2b2 <shell_fprintf>
			devices = true;
    2e9a:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2e9c:	3418      	adds	r4, #24
    2e9e:	e7e6      	b.n	2e6e <device_get_config_level+0x1a>
    2ea0:	0000d7f0 	.word	0x0000d7f0
    2ea4:	0000e0b1 	.word	0x0000e0b1

00002ea8 <cmd_device_levels>:
{
    2ea8:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    2eaa:	2108      	movs	r1, #8
{
    2eac:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    2eae:	4a1e      	ldr	r2, [pc, #120]	; (2f28 <cmd_device_levels+0x80>)
    2eb0:	f008 f9ff 	bl	b2b2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    2eb4:	2100      	movs	r1, #0
    2eb6:	4620      	mov	r0, r4
    2eb8:	f7ff ffcc 	bl	2e54 <device_get_config_level>
	if (ret == false) {
    2ebc:	b920      	cbnz	r0, 2ec8 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2ebe:	4a1b      	ldr	r2, [pc, #108]	; (2f2c <cmd_device_levels+0x84>)
    2ec0:	2108      	movs	r1, #8
    2ec2:	4620      	mov	r0, r4
    2ec4:	f008 f9f5 	bl	b2b2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    2ec8:	2108      	movs	r1, #8
    2eca:	4620      	mov	r0, r4
    2ecc:	4a18      	ldr	r2, [pc, #96]	; (2f30 <cmd_device_levels+0x88>)
    2ece:	f008 f9f0 	bl	b2b2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    2ed2:	2101      	movs	r1, #1
    2ed4:	4620      	mov	r0, r4
    2ed6:	f7ff ffbd 	bl	2e54 <device_get_config_level>
	if (ret == false) {
    2eda:	b920      	cbnz	r0, 2ee6 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2edc:	4a13      	ldr	r2, [pc, #76]	; (2f2c <cmd_device_levels+0x84>)
    2ede:	2108      	movs	r1, #8
    2ee0:	4620      	mov	r0, r4
    2ee2:	f008 f9e6 	bl	b2b2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    2ee6:	2108      	movs	r1, #8
    2ee8:	4620      	mov	r0, r4
    2eea:	4a12      	ldr	r2, [pc, #72]	; (2f34 <cmd_device_levels+0x8c>)
    2eec:	f008 f9e1 	bl	b2b2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    2ef0:	2102      	movs	r1, #2
    2ef2:	4620      	mov	r0, r4
    2ef4:	f7ff ffae 	bl	2e54 <device_get_config_level>
	if (ret == false) {
    2ef8:	b920      	cbnz	r0, 2f04 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2efa:	4a0c      	ldr	r2, [pc, #48]	; (2f2c <cmd_device_levels+0x84>)
    2efc:	2108      	movs	r1, #8
    2efe:	4620      	mov	r0, r4
    2f00:	f008 f9d7 	bl	b2b2 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    2f04:	2108      	movs	r1, #8
    2f06:	4620      	mov	r0, r4
    2f08:	4a0b      	ldr	r2, [pc, #44]	; (2f38 <cmd_device_levels+0x90>)
    2f0a:	f008 f9d2 	bl	b2b2 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    2f0e:	2103      	movs	r1, #3
    2f10:	4620      	mov	r0, r4
    2f12:	f7ff ff9f 	bl	2e54 <device_get_config_level>
	if (ret == false) {
    2f16:	b920      	cbnz	r0, 2f22 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2f18:	4a04      	ldr	r2, [pc, #16]	; (2f2c <cmd_device_levels+0x84>)
    2f1a:	2108      	movs	r1, #8
    2f1c:	4620      	mov	r0, r4
    2f1e:	f008 f9c8 	bl	b2b2 <shell_fprintf>
}
    2f22:	2000      	movs	r0, #0
    2f24:	bd10      	pop	{r4, pc}
    2f26:	bf00      	nop
    2f28:	0000e0b7 	.word	0x0000e0b7
    2f2c:	0000e0c6 	.word	0x0000e0c6
    2f30:	0000e0ce 	.word	0x0000e0ce
    2f34:	0000e0dd 	.word	0x0000e0dd
    2f38:	0000e0eb 	.word	0x0000e0eb

00002f3c <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    2f3c:	1e8b      	subs	r3, r1, #2
    2f3e:	2b02      	cmp	r3, #2
{
    2f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f44:	4607      	mov	r7, r0
    2f46:	4688      	mov	r8, r1
    2f48:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    2f4a:	d833      	bhi.n	2fb4 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    2f4c:	6860      	ldr	r0, [r4, #4]
    2f4e:	2210      	movs	r2, #16
    2f50:	2100      	movs	r1, #0
    2f52:	f006 fc2b 	bl	97ac <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    2f56:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    2f5a:	4606      	mov	r6, r0
	if (argc < 3) {
    2f5c:	d01e      	beq.n	2f9c <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    2f5e:	68a0      	ldr	r0, [r4, #8]
    2f60:	220a      	movs	r2, #10
    2f62:	2100      	movs	r1, #0
    2f64:	f006 fc22 	bl	97ac <strtoul>
    2f68:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    2f6a:	4a21      	ldr	r2, [pc, #132]	; (2ff0 <cmd_devmem+0xb4>)
    2f6c:	462b      	mov	r3, r5
    2f6e:	2108      	movs	r1, #8
    2f70:	4638      	mov	r0, r7
    2f72:	f008 f99e 	bl	b2b2 <shell_fprintf>

	if (argc <= 3) {
    2f76:	f1b8 0f04 	cmp.w	r8, #4
    2f7a:	d01e      	beq.n	2fba <cmd_devmem+0x7e>
	switch (width) {
    2f7c:	2d10      	cmp	r5, #16
    2f7e:	d00f      	beq.n	2fa0 <cmd_devmem+0x64>
    2f80:	2d20      	cmp	r5, #32
    2f82:	d010      	beq.n	2fa6 <cmd_devmem+0x6a>
    2f84:	2d08      	cmp	r5, #8
    2f86:	d110      	bne.n	2faa <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    2f88:	7833      	ldrb	r3, [r6, #0]
    2f8a:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    2f8c:	4a19      	ldr	r2, [pc, #100]	; (2ff4 <cmd_devmem+0xb8>)
    2f8e:	2108      	movs	r1, #8
    2f90:	4638      	mov	r0, r7
    2f92:	f008 f98e 	bl	b2b2 <shell_fprintf>
	int err = 0;
    2f96:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    2f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    2f9c:	2520      	movs	r5, #32
    2f9e:	e7e4      	b.n	2f6a <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    2fa0:	8833      	ldrh	r3, [r6, #0]
    2fa2:	b29b      	uxth	r3, r3
	if (err == 0) {
    2fa4:	e7f2      	b.n	2f8c <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    2fa6:	6833      	ldr	r3, [r6, #0]
    2fa8:	e7f0      	b.n	2f8c <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    2faa:	4a13      	ldr	r2, [pc, #76]	; (2ff8 <cmd_devmem+0xbc>)
    2fac:	2108      	movs	r1, #8
    2fae:	4638      	mov	r0, r7
    2fb0:	f008 f97f 	bl	b2b2 <shell_fprintf>
		return -EINVAL;
    2fb4:	f06f 0015 	mvn.w	r0, #21
    2fb8:	e7ee      	b.n	2f98 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    2fba:	68e0      	ldr	r0, [r4, #12]
    2fbc:	2210      	movs	r2, #16
    2fbe:	2100      	movs	r1, #0
    2fc0:	f006 fbf4 	bl	97ac <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    2fc4:	4a0d      	ldr	r2, [pc, #52]	; (2ffc <cmd_devmem+0xc0>)
    2fc6:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    2fc8:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    2fca:	2108      	movs	r1, #8
    2fcc:	4638      	mov	r0, r7
    2fce:	f008 f970 	bl	b2b2 <shell_fprintf>
	switch (width) {
    2fd2:	2d10      	cmp	r5, #16
    2fd4:	d006      	beq.n	2fe4 <cmd_devmem+0xa8>
    2fd6:	2d20      	cmp	r5, #32
    2fd8:	d007      	beq.n	2fea <cmd_devmem+0xae>
    2fda:	2d08      	cmp	r5, #8
    2fdc:	d1e5      	bne.n	2faa <cmd_devmem+0x6e>
		sys_write8(value, addr);
    2fde:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    2fe0:	7034      	strb	r4, [r6, #0]
    2fe2:	e7d8      	b.n	2f96 <cmd_devmem+0x5a>
		sys_write16(value, addr);
    2fe4:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    2fe6:	8034      	strh	r4, [r6, #0]
    2fe8:	e7d5      	b.n	2f96 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    2fea:	6034      	str	r4, [r6, #0]
    2fec:	e7d3      	b.n	2f96 <cmd_devmem+0x5a>
    2fee:	bf00      	nop
    2ff0:	0000e148 	.word	0x0000e148
    2ff4:	0000e173 	.word	0x0000e173
    2ff8:	0000e15d 	.word	0x0000e15d
    2ffc:	0000e184 	.word	0x0000e184

00003000 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    3000:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    3002:	4e0e      	ldr	r6, [pc, #56]	; (303c <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    3004:	4604      	mov	r4, r0
	if (bypass && in_use) {
    3006:	7833      	ldrb	r3, [r6, #0]
    3008:	460d      	mov	r5, r1
    300a:	b131      	cbz	r1, 301a <set_bypass.isra.0+0x1a>
    300c:	b12b      	cbz	r3, 301a <set_bypass.isra.0+0x1a>
}
    300e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    3012:	4a0b      	ldr	r2, [pc, #44]	; (3040 <set_bypass.isra.0+0x40>)
    3014:	2101      	movs	r1, #1
    3016:	f008 b94c 	b.w	b2b2 <shell_fprintf>
	in_use = !in_use;
    301a:	f083 0301 	eor.w	r3, r3, #1
    301e:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    3020:	b133      	cbz	r3, 3030 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    3022:	4a08      	ldr	r2, [pc, #32]	; (3044 <set_bypass.isra.0+0x44>)
    3024:	2108      	movs	r1, #8
    3026:	4620      	mov	r0, r4
    3028:	f008 f943 	bl	b2b2 <shell_fprintf>
		in_use = true;
    302c:	2301      	movs	r3, #1
    302e:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    3030:	4629      	mov	r1, r5
    3032:	4620      	mov	r0, r4
}
    3034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    3038:	f008 b960 	b.w	b2fc <shell_set_bypass>
    303c:	20000be6 	.word	0x20000be6
    3040:	0000e198 	.word	0x0000e198
    3044:	0000e1d3 	.word	0x0000e1d3

00003048 <bypass_cb>:
{
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    304c:	483c      	ldr	r0, [pc, #240]	; (3140 <bypass_cb+0xf8>)
    304e:	7803      	ldrb	r3, [r0, #0]
    3050:	2b18      	cmp	r3, #24
    3052:	d102      	bne.n	305a <bypass_cb+0x12>
    3054:	780b      	ldrb	r3, [r1, #0]
    3056:	2b11      	cmp	r3, #17
    3058:	d031      	beq.n	30be <bypass_cb+0x76>
    305a:	3a01      	subs	r2, #1
    305c:	460b      	mov	r3, r1
    305e:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    3060:	429d      	cmp	r5, r3
    3062:	d125      	bne.n	30b0 <bypass_cb+0x68>
	tail = recv[len - 1];
    3064:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    3066:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    3068:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    306a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    306e:	2b09      	cmp	r3, #9
    3070:	4c34      	ldr	r4, [pc, #208]	; (3144 <bypass_cb+0xfc>)
    3072:	d904      	bls.n	307e <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    3074:	f022 0320 	bic.w	r3, r2, #32
    3078:	3b41      	subs	r3, #65	; 0x41
    307a:	2b05      	cmp	r3, #5
    307c:	d804      	bhi.n	3088 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    307e:	6823      	ldr	r3, [r4, #0]
    3080:	4931      	ldr	r1, [pc, #196]	; (3148 <bypass_cb+0x100>)
    3082:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    3084:	3301      	adds	r3, #1
    3086:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    3088:	6823      	ldr	r3, [r4, #0]
    308a:	2b02      	cmp	r3, #2
    308c:	d134      	bne.n	30f8 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    308e:	2210      	movs	r2, #16
    3090:	482d      	ldr	r0, [pc, #180]	; (3148 <bypass_cb+0x100>)
    3092:	2100      	movs	r1, #0
    3094:	f006 fb8a 	bl	97ac <strtoul>
		*bytes = byte;
    3098:	4a2c      	ldr	r2, [pc, #176]	; (314c <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    309a:	6813      	ldr	r3, [r2, #0]
    309c:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    30a0:	6013      	str	r3, [r2, #0]
		sum++;
    30a2:	4a2b      	ldr	r2, [pc, #172]	; (3150 <bypass_cb+0x108>)
    30a4:	6813      	ldr	r3, [r2, #0]
    30a6:	3301      	adds	r3, #1
    30a8:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    30aa:	2300      	movs	r3, #0
    30ac:	6023      	str	r3, [r4, #0]
    30ae:	e023      	b.n	30f8 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    30b0:	f813 6b01 	ldrb.w	r6, [r3], #1
    30b4:	2e18      	cmp	r6, #24
    30b6:	d1d3      	bne.n	3060 <bypass_cb+0x18>
    30b8:	781e      	ldrb	r6, [r3, #0]
    30ba:	2e11      	cmp	r6, #17
    30bc:	d1d0      	bne.n	3060 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    30be:	4d24      	ldr	r5, [pc, #144]	; (3150 <bypass_cb+0x108>)
    30c0:	4a24      	ldr	r2, [pc, #144]	; (3154 <bypass_cb+0x10c>)
    30c2:	682b      	ldr	r3, [r5, #0]
    30c4:	2108      	movs	r1, #8
    30c6:	4620      	mov	r0, r4
    30c8:	f008 f8f3 	bl	b2b2 <shell_fprintf>
		set_bypass(sh, NULL);
    30cc:	4620      	mov	r0, r4
    30ce:	2100      	movs	r1, #0
    30d0:	f7ff ff96 	bl	3000 <set_bypass.isra.0>
		if (!littleendian) {
    30d4:	4b20      	ldr	r3, [pc, #128]	; (3158 <bypass_cb+0x110>)
    30d6:	7818      	ldrb	r0, [r3, #0]
    30d8:	b970      	cbnz	r0, 30f8 <bypass_cb+0xb0>
    30da:	4a20      	ldr	r2, [pc, #128]	; (315c <bypass_cb+0x114>)
    30dc:	682b      	ldr	r3, [r5, #0]
    30de:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    30e0:	2b04      	cmp	r3, #4
    30e2:	dc0a      	bgt.n	30fa <bypass_cb+0xb2>
    30e4:	b108      	cbz	r0, 30ea <bypass_cb+0xa2>
    30e6:	6011      	str	r1, [r2, #0]
    30e8:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    30ea:	f013 0103 	ands.w	r1, r3, #3
    30ee:	d10b      	bne.n	3108 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    30f0:	6812      	ldr	r2, [r2, #0]
    30f2:	6813      	ldr	r3, [r2, #0]
    30f4:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    30f6:	6013      	str	r3, [r2, #0]
}
    30f8:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    30fa:	6808      	ldr	r0, [r1, #0]
    30fc:	ba00      	rev	r0, r0
    30fe:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    3102:	3b04      	subs	r3, #4
				data++;
    3104:	2001      	movs	r0, #1
    3106:	e7eb      	b.n	30e0 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    3108:	425b      	negs	r3, r3
    310a:	f003 0303 	and.w	r3, r3, #3
    310e:	bf58      	it	pl
    3110:	4259      	negpl	r1, r3
    3112:	2902      	cmp	r1, #2
    3114:	d104      	bne.n	3120 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    3116:	6812      	ldr	r2, [r2, #0]
    3118:	8813      	ldrh	r3, [r2, #0]
    311a:	ba5b      	rev16	r3, r3
    311c:	b29b      	uxth	r3, r3
    311e:	e7ea      	b.n	30f6 <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    3120:	2903      	cmp	r1, #3
    3122:	d1e9      	bne.n	30f8 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    3124:	6810      	ldr	r0, [r2, #0]
    3126:	6802      	ldr	r2, [r0, #0]
    3128:	0411      	lsls	r1, r2, #16
    312a:	f3c2 4307 	ubfx	r3, r2, #16, #8
    312e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    3132:	430b      	orrs	r3, r1
    3134:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    3138:	4313      	orrs	r3, r2
    313a:	6003      	str	r3, [r0, #0]
    313c:	e7dc      	b.n	30f8 <bypass_cb+0xb0>
    313e:	bf00      	nop
    3140:	20000be8 	.word	0x20000be8
    3144:	200006b4 	.word	0x200006b4
    3148:	20000be4 	.word	0x20000be4
    314c:	200006b0 	.word	0x200006b0
    3150:	200006bc 	.word	0x200006bc
    3154:	0000e1fd 	.word	0x0000e1fd
    3158:	20000be7 	.word	0x20000be7
    315c:	200006b8 	.word	0x200006b8

00003160 <cmd_load>:
{
    3160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3164:	460d      	mov	r5, r1
	chunk_element = 0;
    3166:	492d      	ldr	r1, [pc, #180]	; (321c <cmd_load+0xbc>)
	littleendian = false;
    3168:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3220 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    316c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3224 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    3170:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 3228 <cmd_load+0xc8>
	littleendian = false;
    3174:	2300      	movs	r3, #0
	chunk_element = 0;
    3176:	600b      	str	r3, [r1, #0]
	sum = 0;
    3178:	492c      	ldr	r1, [pc, #176]	; (322c <cmd_load+0xcc>)
	littleendian = false;
    317a:	f888 3000 	strb.w	r3, [r8]
{
    317e:	4606      	mov	r6, r0
	sum = 0;
    3180:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    3182:	4614      	mov	r4, r2
    3184:	2d01      	cmp	r5, #1
    3186:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    3188:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    318c:	d921      	bls.n	31d2 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    318e:	4618      	mov	r0, r3
    3190:	2202      	movs	r2, #2
    3192:	4649      	mov	r1, r9
    3194:	9301      	str	r3, [sp, #4]
    3196:	f009 fdd3 	bl	cd40 <strncmp>
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	b988      	cbnz	r0, 31c2 <cmd_load+0x62>
    319e:	6822      	ldr	r2, [r4, #0]
    31a0:	7892      	ldrb	r2, [r2, #2]
    31a2:	3a00      	subs	r2, #0
    31a4:	bf18      	it	ne
    31a6:	2201      	movne	r2, #1
    31a8:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    31ac:	4920      	ldr	r1, [pc, #128]	; (3230 <cmd_load+0xd0>)
    31ae:	2202      	movs	r2, #2
    31b0:	4650      	mov	r0, sl
    31b2:	f009 fdc5 	bl	cd40 <strncmp>
    31b6:	b930      	cbnz	r0, 31c6 <cmd_load+0x66>
			littleendian = true;
    31b8:	2301      	movs	r3, #1
    31ba:	f888 3000 	strb.w	r3, [r8]
		argc--;
    31be:	3d01      	subs	r5, #1
    31c0:	e7e0      	b.n	3184 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    31c2:	2200      	movs	r2, #0
    31c4:	e7f0      	b.n	31a8 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    31c6:	4649      	mov	r1, r9
    31c8:	4650      	mov	r0, sl
    31ca:	f7fd fdea 	bl	da2 <strcmp>
    31ce:	b9b0      	cbnz	r0, 31fe <cmd_load+0x9e>
			argv++;
    31d0:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    31d2:	2200      	movs	r2, #0
    31d4:	4611      	mov	r1, r2
    31d6:	6878      	ldr	r0, [r7, #4]
    31d8:	f006 fa6c 	bl	96b4 <strtol>
    31dc:	4b15      	ldr	r3, [pc, #84]	; (3234 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    31de:	2200      	movs	r2, #0
    31e0:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    31e2:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    31e4:	6878      	ldr	r0, [r7, #4]
    31e6:	f006 fa65 	bl	96b4 <strtol>
    31ea:	4b13      	ldr	r3, [pc, #76]	; (3238 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    31ec:	4913      	ldr	r1, [pc, #76]	; (323c <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    31ee:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    31f0:	4630      	mov	r0, r6
    31f2:	f7ff ff05 	bl	3000 <set_bypass.isra.0>
}
    31f6:	2000      	movs	r0, #0
    31f8:	b003      	add	sp, #12
    31fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    31fe:	f89a 2000 	ldrb.w	r2, [sl]
    3202:	2a2d      	cmp	r2, #45	; 0x2d
    3204:	d1e5      	bne.n	31d2 <cmd_load+0x72>
    3206:	f89a 2001 	ldrb.w	r2, [sl, #1]
    320a:	2a00      	cmp	r2, #0
    320c:	d0e1      	beq.n	31d2 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    320e:	4653      	mov	r3, sl
    3210:	465a      	mov	r2, fp
    3212:	2108      	movs	r1, #8
    3214:	4630      	mov	r0, r6
    3216:	f008 f84c 	bl	b2b2 <shell_fprintf>
    321a:	e7d0      	b.n	31be <cmd_load+0x5e>
    321c:	200006b4 	.word	0x200006b4
    3220:	20000be7 	.word	0x20000be7
    3224:	0000e217 	.word	0x0000e217
    3228:	0000e21d 	.word	0x0000e21d
    322c:	200006bc 	.word	0x200006bc
    3230:	0000e21a 	.word	0x0000e21a
    3234:	200006b0 	.word	0x200006b0
    3238:	200006b8 	.word	0x200006b8
    323c:	00003049 	.word	0x00003049

00003240 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
    3240:	b538      	push	{r3, r4, r5, lr}
    3242:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    3244:	6842      	ldr	r2, [r0, #4]
{
    3246:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (const struct device *)config;
    3248:	6811      	ldr	r1, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    324a:	6890      	ldr	r0, [r2, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
    324c:	608b      	str	r3, [r1, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
    324e:	e9c1 4500 	strd	r4, r5, [r1]
	ring_buf_reset(sh_uart->tx_ringbuf);
    3252:	f007 feb4 	bl	afbe <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    3256:	68d0      	ldr	r0, [r2, #12]
    3258:	f007 feb1 	bl	afbe <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
    325c:	6813      	ldr	r3, [r2, #0]
    325e:	2100      	movs	r1, #0
    3260:	60d9      	str	r1, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3262:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3264:	b123      	cbz	r3, 3270 <init+0x30>
    3266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3268:	b113      	cbz	r3, 3270 <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
    326a:	4905      	ldr	r1, [pc, #20]	; (3280 <init+0x40>)
    326c:	4620      	mov	r0, r4
    326e:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    3270:	68a3      	ldr	r3, [r4, #8]
    3272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3274:	b10b      	cbz	r3, 327a <init+0x3a>
		api->irq_rx_enable(dev);
    3276:	4620      	mov	r0, r4
    3278:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
    327a:	2000      	movs	r0, #0
    327c:	bd38      	pop	{r3, r4, r5, pc}
    327e:	bf00      	nop
    3280:	0000b037 	.word	0x0000b037

00003284 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    3284:	b513      	push	{r0, r1, r4, lr}
    3286:	4809      	ldr	r0, [pc, #36]	; (32ac <enable_shell_uart+0x28>)
    3288:	f009 f8d1 	bl	c42e <z_device_ready>
    328c:	b158      	cbz	r0, 32a6 <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    328e:	4a08      	ldr	r2, [pc, #32]	; (32b0 <enable_shell_uart+0x2c>)
    3290:	4906      	ldr	r1, [pc, #24]	; (32ac <enable_shell_uart+0x28>)
    3292:	6812      	ldr	r2, [r2, #0]
    3294:	4807      	ldr	r0, [pc, #28]	; (32b4 <enable_shell_uart+0x30>)
    3296:	2400      	movs	r4, #0
    3298:	9400      	str	r4, [sp, #0]
    329a:	2301      	movs	r3, #1
    329c:	f000 fd3e 	bl	3d1c <shell_init>

	return 0;
    32a0:	4620      	mov	r0, r4
}
    32a2:	b002      	add	sp, #8
    32a4:	bd10      	pop	{r4, pc}
		return -ENODEV;
    32a6:	f06f 0012 	mvn.w	r0, #18
    32aa:	e7fa      	b.n	32a2 <enable_shell_uart+0x1e>
    32ac:	0000d3c4 	.word	0x0000d3c4
    32b0:	0000d88c 	.word	0x0000d88c
    32b4:	0000d574 	.word	0x0000d574

000032b8 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    32b8:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    32ba:	6881      	ldr	r1, [r0, #8]
{
    32bc:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    32be:	3108      	adds	r1, #8
    32c0:	f001 fab2 	bl	4828 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    32c4:	68a1      	ldr	r1, [r4, #8]
    32c6:	4a03      	ldr	r2, [pc, #12]	; (32d4 <shell_internal_help_print+0x1c>)
    32c8:	4620      	mov	r0, r4
    32ca:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    32cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    32d0:	f001 ba32 	b.w	4738 <z_shell_help_subcmd_print>
    32d4:	0000e2d3 	.word	0x0000e2d3

000032d8 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    32d8:	4901      	ldr	r1, [pc, #4]	; (32e0 <z_cursor_next_line_move.isra.0+0x8>)
    32da:	f007 bf54 	b.w	b186 <z_shell_raw_fprintf>
    32de:	bf00      	nop
    32e0:	0000df88 	.word	0x0000df88

000032e4 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    32e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    32e6:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    32e8:	6880      	ldr	r0, [r0, #8]
    32ea:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    32ee:	075a      	lsls	r2, r3, #29
{
    32f0:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    32f2:	d505      	bpl.n	3300 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    32f4:	2100      	movs	r1, #0
    32f6:	f007 ff84 	bl	b202 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    32fa:	68e0      	ldr	r0, [r4, #12]
    32fc:	f008 fb4e 	bl	b99c <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    3300:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    3302:	68db      	ldr	r3, [r3, #12]
    3304:	b96b      	cbnz	r3, 3322 <history_handle+0x3e>
		if (up) {
    3306:	2d00      	cmp	r5, #0
    3308:	d037      	beq.n	337a <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    330a:	68a0      	ldr	r0, [r4, #8]
    330c:	3042      	adds	r0, #66	; 0x42
    330e:	f007 ff34 	bl	b17a <z_shell_strlen>

			if (cmd_len) {
    3312:	68a3      	ldr	r3, [r4, #8]
    3314:	b398      	cbz	r0, 337e <history_handle+0x9a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    3316:	f103 0142 	add.w	r1, r3, #66	; 0x42
    331a:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    331e:	f009 fd07 	bl	cd30 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    3322:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    3324:	68e0      	ldr	r0, [r4, #12]
    3326:	f10d 0306 	add.w	r3, sp, #6
    332a:	3242      	adds	r2, #66	; 0x42
    332c:	4629      	mov	r1, r5
    332e:	f008 fb38 	bl	b9a2 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    3332:	b958      	cbnz	r0, 334c <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    3334:	68a0      	ldr	r0, [r4, #8]
    3336:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    333a:	3042      	adds	r0, #66	; 0x42
    333c:	f009 fcf8 	bl	cd30 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    3340:	68a0      	ldr	r0, [r4, #8]
    3342:	3042      	adds	r0, #66	; 0x42
    3344:	f007 ff19 	bl	b17a <z_shell_strlen>
    3348:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    334c:	4620      	mov	r0, r4
    334e:	f008 f976 	bl	b63e <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3352:	68a3      	ldr	r3, [r4, #8]
    3354:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3358:	069b      	lsls	r3, r3, #26
    335a:	d503      	bpl.n	3364 <history_handle+0x80>
    335c:	4909      	ldr	r1, [pc, #36]	; (3384 <history_handle+0xa0>)
    335e:	6960      	ldr	r0, [r4, #20]
    3360:	f007 ff11 	bl	b186 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    3364:	4620      	mov	r0, r4
    3366:	f001 f843 	bl	43f0 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    336a:	68a3      	ldr	r3, [r4, #8]
    336c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3370:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    3372:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    3374:	4620      	mov	r0, r4
    3376:	f008 f90b 	bl	b590 <z_shell_op_cond_next_line>
}
    337a:	b003      	add	sp, #12
    337c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    337e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    3382:	e7ce      	b.n	3322 <history_handle+0x3e>
    3384:	0000d610 	.word	0x0000d610

00003388 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    3388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    338c:	2300      	movs	r3, #0
{
    338e:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    3390:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    3394:	6883      	ldr	r3, [r0, #8]
{
    3396:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    3398:	3342      	adds	r3, #66	; 0x42
    339a:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    339c:	f008 f955 	bl	b64a <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    33a0:	4620      	mov	r0, r4
    33a2:	f008 f8e1 	bl	b568 <z_shell_cursor_in_empty_line>
    33a6:	b910      	cbnz	r0, 33ae <execute+0x26>
		z_cursor_next_line_move(shell);
    33a8:	6960      	ldr	r0, [r4, #20]
    33aa:	f7ff ff95 	bl	32d8 <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
    33ae:	68a0      	ldr	r0, [r4, #8]
    33b0:	2214      	movs	r2, #20
    33b2:	2100      	movs	r1, #0
    33b4:	3008      	adds	r0, #8
    33b6:	f009 fb9b 	bl	caf0 <memset>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    33ba:	4620      	mov	r0, r4
    33bc:	f000 ff6a 	bl	4294 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    33c0:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    33c2:	68e0      	ldr	r0, [r4, #12]
    33c4:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    33c6:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    33c8:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    33ca:	f008 fb21 	bl	ba10 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    33ce:	4620      	mov	r0, r4
    33d0:	f008 fba3 	bl	bb1a <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    33d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    33d8:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    33da:	46b2      	mov	sl, r6
    33dc:	af11      	add	r7, sp, #68	; 0x44
    33de:	9602      	str	r6, [sp, #8]
    33e0:	4635      	mov	r5, r6
    33e2:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    33e4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    33e8:	2a01      	cmp	r2, #1
    33ea:	f000 80d6 	beq.w	359a <execute+0x212>
    33ee:	2b0b      	cmp	r3, #11
    33f0:	f240 80ae 	bls.w	3550 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    33f4:	9b06      	ldr	r3, [sp, #24]
    33f6:	2b02      	cmp	r3, #2
    33f8:	f040 80ae 	bne.w	3558 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    33fc:	4b89      	ldr	r3, [pc, #548]	; (3624 <execute+0x29c>)
    33fe:	4a8a      	ldr	r2, [pc, #552]	; (3628 <execute+0x2a0>)
    3400:	2101      	movs	r1, #1
    3402:	e014      	b.n	342e <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    3404:	9a03      	ldr	r2, [sp, #12]
    3406:	2302      	movs	r3, #2
    3408:	4639      	mov	r1, r7
    340a:	a806      	add	r0, sp, #24
    340c:	f000 fe1a 	bl	4044 <z_shell_make_argv>
		if (argc == 0) {
    3410:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    3412:	687a      	ldr	r2, [r7, #4]
    3414:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    3416:	4603      	mov	r3, r0
		if (argc == 0) {
    3418:	b929      	cbnz	r1, 3426 <execute+0x9e>
			return -ENOEXEC;
    341a:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    341e:	4628      	mov	r0, r5
    3420:	b01f      	add	sp, #124	; 0x7c
    3422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    3426:	2901      	cmp	r1, #1
    3428:	d105      	bne.n	3436 <execute+0xae>
    342a:	b120      	cbz	r0, 3436 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    342c:	4a7f      	ldr	r2, [pc, #508]	; (362c <execute+0x2a4>)
    342e:	4620      	mov	r0, r4
    3430:	f008 f9b2 	bl	b798 <z_shell_fprintf>
    3434:	e7f1      	b.n	341a <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    3436:	9b05      	ldr	r3, [sp, #20]
    3438:	b34b      	cbz	r3, 348e <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    343a:	6838      	ldr	r0, [r7, #0]
    343c:	f001 fa18 	bl	4870 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    3440:	b198      	cbz	r0, 346a <execute+0xe2>
			if (help_entry.help) {
    3442:	b166      	cbz	r6, 345e <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    3444:	68a5      	ldr	r5, [r4, #8]
    3446:	960d      	str	r6, [sp, #52]	; 0x34
    3448:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    344a:	ae0c      	add	r6, sp, #48	; 0x30
    344c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    344e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3450:	6833      	ldr	r3, [r6, #0]
    3452:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    3454:	4620      	mov	r0, r4
    3456:	f7ff ff2f 	bl	32b8 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    345a:	2501      	movs	r5, #1
    345c:	e7df      	b.n	341e <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    345e:	4a74      	ldr	r2, [pc, #464]	; (3630 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    3460:	2101      	movs	r1, #1
    3462:	4620      	mov	r0, r4
    3464:	f008 f998 	bl	b798 <z_shell_fprintf>
		return false;
    3468:	e7d7      	b.n	341a <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    346a:	9b05      	ldr	r3, [sp, #20]
    346c:	b17b      	cbz	r3, 348e <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    346e:	683a      	ldr	r2, [r7, #0]
    3470:	4629      	mov	r1, r5
    3472:	4620      	mov	r0, r4
    3474:	f001 fb60 	bl	4b38 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    3478:	2802      	cmp	r0, #2
    347a:	f000 808e 	beq.w	359a <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    347e:	2803      	cmp	r0, #3
    3480:	d005      	beq.n	348e <execute+0x106>
				++cmd_lvl;
    3482:	9b05      	ldr	r3, [sp, #20]
    3484:	3301      	adds	r3, #1
    3486:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    3488:	2301      	movs	r3, #1
    348a:	9302      	str	r3, [sp, #8]
				continue;
    348c:	e7aa      	b.n	33e4 <execute+0x5c>
		if (has_last_handler == false) {
    348e:	f1ba 0f00 	cmp.w	sl, #0
    3492:	d105      	bne.n	34a0 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    3494:	6839      	ldr	r1, [r7, #0]
    3496:	aa07      	add	r2, sp, #28
    3498:	4658      	mov	r0, fp
    349a:	f007 ffb7 	bl	b40c <z_shell_find_cmd>
    349e:	4605      	mov	r5, r0
		argvp++;
    34a0:	3704      	adds	r7, #4
		args_left--;
    34a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    34a6:	2d00      	cmp	r5, #0
    34a8:	d040      	beq.n	352c <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    34aa:	9a02      	ldr	r2, [sp, #8]
    34ac:	68eb      	ldr	r3, [r5, #12]
    34ae:	b142      	cbz	r2, 34c2 <execute+0x13a>
    34b0:	b313      	cbz	r3, 34f8 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    34b2:	4620      	mov	r0, r4
    34b4:	f008 f8c9 	bl	b64a <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    34b8:	4620      	mov	r0, r4
    34ba:	f008 f869 	bl	b590 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    34be:	4a5d      	ldr	r2, [pc, #372]	; (3634 <execute+0x2ac>)
    34c0:	e7ce      	b.n	3460 <execute+0xd8>
	if (entry->handler) {
    34c2:	b1cb      	cbz	r3, 34f8 <execute+0x170>
		*active_cmd = *entry;
    34c4:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    34c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    34ca:	46ae      	mov	lr, r5
    34cc:	f103 0c08 	add.w	ip, r3, #8
    34d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34d8:	f8de 3000 	ldr.w	r3, [lr]
    34dc:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    34e0:	68ab      	ldr	r3, [r5, #8]
    34e2:	b94b      	cbnz	r3, 34f8 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    34e4:	7c6b      	ldrb	r3, [r5, #17]
    34e6:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    34e8:	bf01      	itttt	eq
    34ea:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    34ee:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    34f2:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    34f6:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    34f8:	f8d5 c004 	ldr.w	ip, [r5, #4]
    34fc:	f1bc 0f00 	cmp.w	ip, #0
    3500:	d008      	beq.n	3514 <execute+0x18c>
		*help_entry = *entry;
    3502:	46ae      	mov	lr, r5
    3504:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3508:	ae0c      	add	r6, sp, #48	; 0x30
    350a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    350c:	f8de 3000 	ldr.w	r3, [lr]
    3510:	6033      	str	r3, [r6, #0]
    3512:	4666      	mov	r6, ip
    3514:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    3516:	f1b8 0f00 	cmp.w	r8, #0
    351a:	d103      	bne.n	3524 <execute+0x19c>
    351c:	9b06      	ldr	r3, [sp, #24]
    351e:	2b02      	cmp	r3, #2
    3520:	f47f af60 	bne.w	33e4 <execute+0x5c>
			cmd_lvl++;
    3524:	9b05      	ldr	r3, [sp, #20]
    3526:	3301      	adds	r3, #1
    3528:	9305      	str	r3, [sp, #20]
    352a:	e75b      	b.n	33e4 <execute+0x5c>
			if (cmd_lvl == 0 &&
    352c:	9b05      	ldr	r3, [sp, #20]
    352e:	b963      	cbnz	r3, 354a <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    3530:	68a3      	ldr	r3, [r4, #8]
    3532:	69db      	ldr	r3, [r3, #28]
    3534:	b10b      	cbz	r3, 353a <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    3536:	68db      	ldr	r3, [r3, #12]
    3538:	b93b      	cbnz	r3, 354a <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    353a:	4b3f      	ldr	r3, [pc, #252]	; (3638 <execute+0x2b0>)
    353c:	9300      	str	r3, [sp, #0]
    353e:	4a3f      	ldr	r2, [pc, #252]	; (363c <execute+0x2b4>)
    3540:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3542:	2101      	movs	r1, #1
    3544:	4620      	mov	r0, r4
    3546:	f008 f927 	bl	b798 <z_shell_fprintf>
			has_last_handler = true;
    354a:	f04f 0a01 	mov.w	sl, #1
    354e:	e7e2      	b.n	3516 <execute+0x18e>
		&& args_left > 0) {
    3550:	f1b8 0f00 	cmp.w	r8, #0
    3554:	f47f af56 	bne.w	3404 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    3558:	9b02      	ldr	r3, [sp, #8]
    355a:	b14b      	cbz	r3, 3570 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    355c:	4620      	mov	r0, r4
    355e:	f008 fb01 	bl	bb64 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    3562:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    3564:	230c      	movs	r3, #12
    3566:	3242      	adds	r2, #66	; 0x42
    3568:	a911      	add	r1, sp, #68	; 0x44
    356a:	a805      	add	r0, sp, #20
    356c:	f000 fd6a 	bl	4044 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    3570:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    3572:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    3574:	ab1e      	add	r3, sp, #120	; 0x78
    3576:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    357a:	2200      	movs	r2, #0
    357c:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    3580:	6943      	ldr	r3, [r0, #20]
    3582:	b973      	cbnz	r3, 35a2 <execute+0x21a>
			if (help_entry->help == NULL) {
    3584:	2e00      	cmp	r6, #0
    3586:	f43f af48 	beq.w	341a <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    358a:	68c3      	ldr	r3, [r0, #12]
    358c:	42b3      	cmp	r3, r6
    358e:	f43f af61 	beq.w	3454 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    3592:	960d      	str	r6, [sp, #52]	; 0x34
    3594:	f100 0508 	add.w	r5, r0, #8
    3598:	e757      	b.n	344a <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    359a:	9b05      	ldr	r3, [sp, #20]
    359c:	2b0b      	cmp	r3, #11
    359e:	d9db      	bls.n	3558 <execute+0x1d0>
    35a0:	e728      	b.n	33f4 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    35a2:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    35a4:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    35a8:	b1b3      	cbz	r3, 35d8 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    35aa:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    35ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    35b0:	29ff      	cmp	r1, #255	; 0xff
    35b2:	bf18      	it	ne
    35b4:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    35b6:	429d      	cmp	r5, r3
    35b8:	d302      	bcc.n	35c0 <execute+0x238>
    35ba:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    35bc:	429d      	cmp	r5, r3
    35be:	d90b      	bls.n	35d8 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    35c0:	6883      	ldr	r3, [r0, #8]
    35c2:	4a1f      	ldr	r2, [pc, #124]	; (3640 <execute+0x2b8>)
    35c4:	2101      	movs	r1, #1
    35c6:	4620      	mov	r0, r4
    35c8:	f008 f8e6 	bl	b798 <z_shell_fprintf>
			shell_internal_help_print(shell);
    35cc:	4620      	mov	r0, r4
    35ce:	f7ff fe73 	bl	32b8 <shell_internal_help_print>
		return -EINVAL;
    35d2:	f06f 0515 	mvn.w	r5, #21
    35d6:	e722      	b.n	341e <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    35d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    35dc:	f500 7019 	add.w	r0, r0, #612	; 0x264
    35e0:	f007 fd97 	bl	b112 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    35e4:	68a0      	ldr	r0, [r4, #8]
    35e6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    35ea:	f007 fe23 	bl	b234 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    35ee:	68a3      	ldr	r3, [r4, #8]
    35f0:	aa11      	add	r2, sp, #68	; 0x44
    35f2:	4629      	mov	r1, r5
    35f4:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    35f8:	695b      	ldr	r3, [r3, #20]
    35fa:	4620      	mov	r0, r4
    35fc:	4798      	blx	r3
    35fe:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3600:	68a0      	ldr	r0, [r4, #8]
    3602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    360a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    360e:	f007 fdc7 	bl	b1a0 <k_mutex_lock.constprop.0.isra.0>
    3612:	68a0      	ldr	r0, [r4, #8]
    3614:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3618:	f500 7019 	add.w	r0, r0, #612	; 0x264
    361c:	f007 fd88 	bl	b130 <atomic_and>
	return ret;
    3620:	e6fd      	b.n	341e <execute+0x96>
    3622:	bf00      	nop
    3624:	0000e356 	.word	0x0000e356
    3628:	0000e0b3 	.word	0x0000e0b3
    362c:	0000e2e1 	.word	0x0000e2e1
    3630:	0000e2f5 	.word	0x0000e2f5
    3634:	0000e313 	.word	0x0000e313
    3638:	0000e342 	.word	0x0000e342
    363c:	0000e615 	.word	0x0000e615
    3640:	0000e37a 	.word	0x0000e37a

00003644 <state_set.constprop.0>:
	shell->ctx->state = state;
    3644:	6883      	ldr	r3, [r0, #8]
    3646:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    3648:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    364a:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    364e:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    3650:	b9ba      	cbnz	r2, 3682 <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    3656:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    3658:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    365c:	04db      	lsls	r3, r3, #19
    365e:	d50b      	bpl.n	3678 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    3660:	2103      	movs	r1, #3
    3662:	4b08      	ldr	r3, [pc, #32]	; (3684 <state_set.constprop.0+0x40>)
    3664:	4a08      	ldr	r2, [pc, #32]	; (3688 <state_set.constprop.0+0x44>)
    3666:	f008 f897 	bl	b798 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    366a:	68a0      	ldr	r0, [r4, #8]
    366c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    3670:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3674:	f007 fd5c 	bl	b130 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    3678:	4620      	mov	r0, r4
}
    367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    367e:	f000 bfc9 	b.w	4614 <z_shell_print_prompt_and_cmd>
}
    3682:	bd10      	pop	{r4, pc}
    3684:	0000e395 	.word	0x0000e395
    3688:	0000e0a7 	.word	0x0000e0a7

0000368c <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3690:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    3692:	6880      	ldr	r0, [r0, #8]
    3694:	b0ab      	sub	sp, #172	; 0xac
    3696:	2101      	movs	r1, #1
    3698:	f500 7019 	add.w	r0, r0, #612	; 0x264
    369c:	f007 fd39 	bl	b112 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    36a0:	68a3      	ldr	r3, [r4, #8]
    36a2:	791b      	ldrb	r3, [r3, #4]
    36a4:	2b02      	cmp	r3, #2
    36a6:	d117      	bne.n	36d8 <shell_process+0x4c>
	size_t count = 0;
    36a8:	2300      	movs	r3, #0
    36aa:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    36ac:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    36ae:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    36b0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    36b2:	6803      	ldr	r3, [r0, #0]
    36b4:	691d      	ldr	r5, [r3, #16]
    36b6:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    36b8:	b1c6      	cbz	r6, 36ec <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    36ba:	2210      	movs	r2, #16
    36bc:	a91d      	add	r1, sp, #116	; 0x74
    36be:	47a8      	blx	r5
			if (count) {
    36c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    36c2:	b14a      	cbz	r2, 36d8 <shell_process+0x4c>
				bypass(shell, buf, count);
    36c4:	a91d      	add	r1, sp, #116	; 0x74
    36c6:	4620      	mov	r0, r4
    36c8:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    36ca:	68a3      	ldr	r3, [r4, #8]
    36cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    36ce:	2b00      	cmp	r3, #0
    36d0:	d1ec      	bne.n	36ac <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    36d2:	4620      	mov	r0, r4
    36d4:	f7ff ffb6 	bl	3644 <state_set.constprop.0>
    36d8:	68a0      	ldr	r0, [r4, #8]
    36da:	f06f 0101 	mvn.w	r1, #1
    36de:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    36e2:	b02b      	add	sp, #172	; 0xac
    36e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36e8:	f007 bd22 	b.w	b130 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    36ec:	2201      	movs	r2, #1
    36ee:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    36f2:	47a8      	blx	r5
		if (count == 0) {
    36f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    36f6:	2b00      	cmp	r3, #0
    36f8:	d0ee      	beq.n	36d8 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    36fa:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    36fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    3702:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    3704:	2a00      	cmp	r2, #0
    3706:	dbd1      	blt.n	36ac <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    3708:	7942      	ldrb	r2, [r0, #5]
    370a:	2a03      	cmp	r2, #3
    370c:	f200 8303 	bhi.w	3d16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27e>
    3710:	e8df f012 	tbh	[pc, r2, lsl #1]
    3714:	027b0004 	.word	0x027b0004
    3718:	0301029e 	.word	0x0301029e
	if ((data != '\r') && (data != '\n')) {
    371c:	2b0d      	cmp	r3, #13
    371e:	d01d      	beq.n	375c <shell_process+0xd0>
    3720:	2b0a      	cmp	r3, #10
    3722:	d01b      	beq.n	375c <shell_process+0xd0>
	sh->ctx->ctx.flags.last_nl = val;
    3724:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    3728:	f36f 02ca 	bfc	r2, #3, #8
    372c:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    3730:	2b09      	cmp	r3, #9
    3732:	d04f      	beq.n	37d4 <shell_process+0x148>
    3734:	d835      	bhi.n	37a2 <shell_process+0x116>
    3736:	2b00      	cmp	r3, #0
    3738:	d0b8      	beq.n	36ac <shell_process+0x20>
    373a:	2b08      	cmp	r3, #8
    373c:	f000 81c9 	beq.w	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
				if (isprint((int) data)) {
    3740:	1c5a      	adds	r2, r3, #1
    3742:	497e      	ldr	r1, [pc, #504]	; (393c <shell_process+0x2b0>)
    3744:	b2d2      	uxtb	r2, r2
    3746:	5c52      	ldrb	r2, [r2, r1]
    3748:	f012 0f97 	tst.w	r2, #151	; 0x97
    374c:	f000 81cd 	beq.w	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
					z_flag_history_exit_set(shell, true);
    3750:	2101      	movs	r1, #1
    3752:	f007 fd56 	bl	b202 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    3756:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    375a:	e0e5      	b.n	3928 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    375c:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    3760:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    3764:	b12a      	cbz	r2, 3772 <shell_process+0xe6>
    3766:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    376a:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    376e:	4293      	cmp	r3, r2
    3770:	d1de      	bne.n	3730 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    3772:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    3776:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    3778:	f363 02ca 	bfi	r2, r3, #3, #8
    377c:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    3780:	b959      	cbnz	r1, 379a <shell_process+0x10e>
	z_flag_history_exit_set(shell, false);
    3782:	f007 fd3e 	bl	b202 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    3786:	68e0      	ldr	r0, [r4, #12]
    3788:	f008 f908 	bl	b99c <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    378c:	6960      	ldr	r0, [r4, #20]
    378e:	f7ff fda3 	bl	32d8 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    3792:	4620      	mov	r0, r4
    3794:	f7ff ff56 	bl	3644 <state_set.constprop.0>
		break;
    3798:	e788      	b.n	36ac <shell_process+0x20>
					(void)execute(shell);
    379a:	4620      	mov	r0, r4
    379c:	f7ff fdf4 	bl	3388 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    37a0:	e7f7      	b.n	3792 <shell_process+0x106>
    37a2:	2b1b      	cmp	r3, #27
    37a4:	d013      	beq.n	37ce <shell_process+0x142>
    37a6:	2b7f      	cmp	r3, #127	; 0x7f
    37a8:	d1ca      	bne.n	3740 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    37aa:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    37ae:	079a      	lsls	r2, r3, #30
    37b0:	f57f af7c 	bpl.w	36ac <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    37b4:	2101      	movs	r1, #1
    37b6:	f007 fd24 	bl	b202 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    37ba:	68a3      	ldr	r3, [r4, #8]
    37bc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    37c0:	071b      	lsls	r3, r3, #28
    37c2:	f100 818e 	bmi.w	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
		z_shell_op_char_delete(shell);
    37c6:	4620      	mov	r0, r4
    37c8:	f008 f826 	bl	b818 <z_shell_op_char_delete>
		break;
    37cc:	e76e      	b.n	36ac <shell_process+0x20>
	shell->ctx->receive_state = state;
    37ce:	2301      	movs	r3, #1
    37d0:	7143      	strb	r3, [r0, #5]
}
    37d2:	e76b      	b.n	36ac <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    37d4:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    37d8:	079f      	lsls	r7, r3, #30
    37da:	f57f af67 	bpl.w	36ac <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    37de:	2101      	movs	r1, #1
    37e0:	f007 fd0f 	bl	b202 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    37e4:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    37e6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    37e8:	2bff      	cmp	r3, #255	; 0xff
    37ea:	f43f af5f 	beq.w	36ac <shell_process+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    37ee:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    37f0:	f100 0142 	add.w	r1, r0, #66	; 0x42
    37f4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    37f8:	f009 f952 	bl	caa0 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    37fc:	68a2      	ldr	r2, [r4, #8]
    37fe:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    3800:	4413      	add	r3, r2
    3802:	2500      	movs	r5, #0
    3804:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    3808:	a91d      	add	r1, sp, #116	; 0x74
    380a:	230c      	movs	r3, #12
    380c:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    3810:	a80d      	add	r0, sp, #52	; 0x34
    3812:	f000 fc17 	bl	4044 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    3816:	990d      	ldr	r1, [sp, #52]	; 0x34
    3818:	290c      	cmp	r1, #12
    381a:	f63f af47 	bhi.w	36ac <shell_process+0x20>
	(*argv)[*argc] = NULL;
    381e:	ab2a      	add	r3, sp, #168	; 0xa8
    3820:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3824:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    3828:	b151      	cbz	r1, 3840 <shell_process+0x1b4>
	int space = isspace((int)shell->ctx->cmd_buff[
    382a:	68a3      	ldr	r3, [r4, #8]
    382c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    382e:	4413      	add	r3, r2
    3830:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
    3834:	4b42      	ldr	r3, [pc, #264]	; (3940 <shell_process+0x2b4>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    3836:	5cd3      	ldrb	r3, [r2, r3]
    3838:	071e      	lsls	r6, r3, #28
    383a:	d451      	bmi.n	38e0 <shell_process+0x254>
    383c:	2901      	cmp	r1, #1
    383e:	d14e      	bne.n	38de <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    3840:	2500      	movs	r5, #0
    3842:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    3844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3846:	aa2a      	add	r2, sp, #168	; 0xa8
    3848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    384c:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    384e:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    3852:	4650      	mov	r0, sl
    3854:	f007 fc91 	bl	b17a <z_shell_strlen>
	size_t first = 0;
    3858:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    385a:	4681      	mov	r9, r0
	*longest = 0U;
    385c:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    385e:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    3860:	aa18      	add	r2, sp, #96	; 0x60
    3862:	4639      	mov	r1, r7
    3864:	4628      	mov	r0, r5
    3866:	f000 fcb5 	bl	41d4 <z_shell_cmd_get>
    386a:	4683      	mov	fp, r0
    386c:	2800      	cmp	r0, #0
    386e:	d143      	bne.n	38f8 <shell_process+0x26c>
	if (cnt == 1) {
    3870:	2e01      	cmp	r6, #1
    3872:	d167      	bne.n	3944 <shell_process+0x2b8>
		autocomplete(shell, cmd, argv[arg_idx], first);
    3874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3876:	aa2a      	add	r2, sp, #168	; 0xa8
    3878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    387c:	f853 0c34 	ldr.w	r0, [r3, #-52]
    3880:	f007 fc7b 	bl	b17a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    3884:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    3886:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    3888:	3208      	adds	r2, #8
    388a:	4641      	mov	r1, r8
    388c:	4628      	mov	r0, r5
    388e:	f000 fca1 	bl	41d4 <z_shell_cmd_get>
    3892:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    3894:	6800      	ldr	r0, [r0, #0]
    3896:	f007 fc70 	bl	b17a <z_shell_strlen>
	if (cmd_len != arg_len) {
    389a:	4286      	cmp	r6, r0
    389c:	d006      	beq.n	38ac <shell_process+0x220>
		z_shell_op_completion_insert(shell,
    389e:	6829      	ldr	r1, [r5, #0]
    38a0:	1b82      	subs	r2, r0, r6
    38a2:	b292      	uxth	r2, r2
    38a4:	4431      	add	r1, r6
    38a6:	4620      	mov	r0, r4
    38a8:	f007 ffb4 	bl	b814 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    38ac:	68a0      	ldr	r0, [r4, #8]
    38ae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    38b0:	4403      	add	r3, r0
    38b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
    38b6:	4b22      	ldr	r3, [pc, #136]	; (3940 <shell_process+0x2b4>)
    38b8:	5cd1      	ldrb	r1, [r2, r3]
    38ba:	f011 0108 	ands.w	r1, r1, #8
    38be:	d137      	bne.n	3930 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    38c0:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    38c4:	07dd      	lsls	r5, r3, #31
    38c6:	d52e      	bpl.n	3926 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    38c8:	f007 fca5 	bl	b216 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    38cc:	2120      	movs	r1, #32
    38ce:	4620      	mov	r0, r4
    38d0:	f000 fe6c 	bl	45ac <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    38d4:	68a0      	ldr	r0, [r4, #8]
    38d6:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    38d8:	f007 fc9d 	bl	b216 <z_flag_insert_mode_set.isra.0>
				break;
    38dc:	e6e6      	b.n	36ac <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    38de:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    38e0:	2000      	movs	r0, #0
    38e2:	ab0e      	add	r3, sp, #56	; 0x38
    38e4:	9300      	str	r3, [sp, #0]
    38e6:	9001      	str	r0, [sp, #4]
    38e8:	ab0c      	add	r3, sp, #48	; 0x30
    38ea:	aa1d      	add	r2, sp, #116	; 0x74
    38ec:	f007 fdb9 	bl	b462 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    38f0:	4605      	mov	r5, r0
    38f2:	2800      	cmp	r0, #0
    38f4:	d1a6      	bne.n	3844 <shell_process+0x1b8>
    38f6:	e6d9      	b.n	36ac <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    38f8:	f8db 0000 	ldr.w	r0, [fp]
    38fc:	464a      	mov	r2, r9
    38fe:	4651      	mov	r1, sl
    3900:	f009 fa1e 	bl	cd40 <strncmp>
		if (is_candidate) {
    3904:	b968      	cbnz	r0, 3922 <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    3906:	f8db 0000 	ldr.w	r0, [fp]
    390a:	f7fd fa54 	bl	db6 <strlen>
    390e:	9b04      	ldr	r3, [sp, #16]
    3910:	4283      	cmp	r3, r0
    3912:	bf38      	it	cc
    3914:	4603      	movcc	r3, r0
    3916:	b29b      	uxth	r3, r3
				*first_idx = idx;
    3918:	2e00      	cmp	r6, #0
    391a:	bf08      	it	eq
    391c:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    391e:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    3920:	3601      	adds	r6, #1
		idx++;
    3922:	3701      	adds	r7, #1
    3924:	e79c      	b.n	3860 <shell_process+0x1d4>
			z_shell_op_char_insert(shell, ' ');
    3926:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    3928:	4620      	mov	r0, r4
    392a:	f000 fe3f 	bl	45ac <z_shell_op_char_insert>
    392e:	e6bd      	b.n	36ac <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    3930:	2101      	movs	r1, #1
    3932:	4620      	mov	r0, r4
    3934:	f007 fe5f 	bl	b5f6 <z_shell_op_cursor_move>
    3938:	e6b8      	b.n	36ac <shell_process+0x20>
    393a:	bf00      	nop
    393c:	0000edfa 	.word	0x0000edfa
    3940:	0000edfb 	.word	0x0000edfb
	} else if (cnt > 1) {
    3944:	f67f aeb2 	bls.w	36ac <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    3948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    394a:	aa2a      	add	r2, sp, #168	; 0xa8
    394c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3950:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    3954:	4650      	mov	r0, sl
    3956:	f007 fc10 	bl	b17a <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    395a:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    395c:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    395e:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    3962:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3966:	9605      	str	r6, [sp, #20]
    3968:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    396c:	68a2      	ldr	r2, [r4, #8]
    396e:	9903      	ldr	r1, [sp, #12]
    3970:	3208      	adds	r2, #8
    3972:	4628      	mov	r0, r5
    3974:	f000 fc2e 	bl	41d4 <z_shell_cmd_get>
		idx++;
    3978:	9b03      	ldr	r3, [sp, #12]
    397a:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    397c:	4607      	mov	r7, r0
		idx++;
    397e:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    3980:	f1ba 0f00 	cmp.w	sl, #0
    3984:	d152      	bne.n	3a2c <shell_process+0x3a0>
		tab_item_print(shell, match->syntax, longest);
    3986:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    3988:	2f00      	cmp	r7, #0
    398a:	d159      	bne.n	3a40 <shell_process+0x3b4>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    398c:	68a2      	ldr	r2, [r4, #8]
    398e:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    3990:	9b05      	ldr	r3, [sp, #20]
    3992:	3b01      	subs	r3, #1
    3994:	9305      	str	r3, [sp, #20]
    3996:	d1e9      	bne.n	396c <shell_process+0x2e0>
	z_cursor_next_line_move(shell);
    3998:	6960      	ldr	r0, [r4, #20]
    399a:	f7ff fc9d 	bl	32d8 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    399e:	4620      	mov	r0, r4
    39a0:	f000 fe38 	bl	4614 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    39a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39a6:	aa2a      	add	r2, sp, #168	; 0xa8
    39a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    39ac:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    39b0:	f853 0c34 	ldr.w	r0, [r3, #-52]
    39b4:	f007 fbe1 	bl	b17a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    39b8:	4641      	mov	r1, r8
    39ba:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    39bc:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    39be:	4628      	mov	r0, r5
    39c0:	f000 fc08 	bl	41d4 <z_shell_cmd_get>
    39c4:	4680      	mov	r8, r0
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    39c6:	68a0      	ldr	r0, [r4, #8]
    39c8:	f8d8 1000 	ldr.w	r1, [r8]
    39cc:	22ff      	movs	r2, #255	; 0xff
    39ce:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    39d2:	f009 f9c9 	bl	cd68 <strncpy>
	*str = match->syntax;
    39d6:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    39da:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    39de:	aa18      	add	r2, sp, #96	; 0x60
    39e0:	4649      	mov	r1, r9
    39e2:	4628      	mov	r0, r5
    39e4:	f109 0b01 	add.w	fp, r9, #1
    39e8:	f000 fbf4 	bl	41d4 <z_shell_cmd_get>
		if (match2 == NULL) {
    39ec:	2800      	cmp	r0, #0
    39ee:	d063      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    39f0:	68a3      	ldr	r3, [r4, #8]
    39f2:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    39f4:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    39f8:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    39fa:	f813 cb01 	ldrb.w	ip, [r3], #1
    39fe:	5c81      	ldrb	r1, [r0, r2]
    3a00:	4561      	cmp	r1, ip
    3a02:	d105      	bne.n	3a10 <shell_process+0x384>
    3a04:	b121      	cbz	r1, 3a10 <shell_process+0x384>
		common++;
    3a06:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3a08:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3a0c:	428a      	cmp	r2, r1
    3a0e:	d1f4      	bne.n	39fa <shell_process+0x36e>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    3a10:	b10f      	cbz	r7, 3a16 <shell_process+0x38a>
    3a12:	42ba      	cmp	r2, r7
    3a14:	db08      	blt.n	3a28 <shell_process+0x39c>
			common = (curr_common < common) ? curr_common : common;
    3a16:	4542      	cmp	r2, r8
			--cnt;
    3a18:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    3a1c:	bfa8      	it	ge
    3a1e:	4642      	movge	r2, r8
	while (cnt > 1) {
    3a20:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    3a22:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    3a26:	d047      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3a28:	46d9      	mov	r9, fp
    3a2a:	e7d8      	b.n	39de <shell_process+0x352>
		if (str && match->syntax &&
    3a2c:	6800      	ldr	r0, [r0, #0]
    3a2e:	2800      	cmp	r0, #0
    3a30:	d0a9      	beq.n	3986 <shell_process+0x2fa>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    3a32:	9a06      	ldr	r2, [sp, #24]
    3a34:	4651      	mov	r1, sl
    3a36:	f009 f983 	bl	cd40 <strncmp>
		if (str && match->syntax &&
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d0a3      	beq.n	3986 <shell_process+0x2fa>
    3a3e:	e795      	b.n	396c <shell_process+0x2e0>
	longest_option += z_shell_strlen(tab);
    3a40:	4658      	mov	r0, fp
    3a42:	f007 fb9a 	bl	b17a <z_shell_strlen>
    3a46:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3a48:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    3a4a:	18c2      	adds	r2, r0, r3
    3a4c:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3a4e:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    3a50:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3a52:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    3a54:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    3a56:	f007 fb90 	bl	b17a <z_shell_strlen>
    3a5a:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    3a5c:	4638      	mov	r0, r7
    3a5e:	f007 fb8c 	bl	b17a <z_shell_strlen>
    3a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    3a64:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    3a68:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3a6c:	68a0      	ldr	r0, [r4, #8]
    3a6e:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    3a72:	1a59      	subs	r1, r3, r1
    3a74:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3a78:	b292      	uxth	r2, r2
    3a7a:	fbbc f1f2 	udiv	r1, ip, r2
    3a7e:	fb02 c211 	mls	r2, r2, r1, ip
    3a82:	f10c 0e01 	add.w	lr, ip, #1
    3a86:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    3a88:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3a8c:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    3a90:	b95a      	cbnz	r2, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    3a92:	4a6a      	ldr	r2, [pc, #424]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3a94:	9700      	str	r7, [sp, #0]
    3a96:	465b      	mov	r3, fp
    3a98:	2106      	movs	r1, #6
    3a9a:	4620      	mov	r0, r4
    3a9c:	f007 fe7c 	bl	b798 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    3aa0:	4649      	mov	r1, r9
    3aa2:	4620      	mov	r0, r4
    3aa4:	f000 fc54 	bl	4350 <z_shell_op_cursor_horiz_move>
    3aa8:	e772      	b.n	3990 <shell_process+0x304>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    3aaa:	4a65      	ldr	r2, [pc, #404]	; (3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3aac:	463b      	mov	r3, r7
    3aae:	2106      	movs	r1, #6
    3ab0:	4620      	mov	r0, r4
    3ab2:	f007 fe71 	bl	b798 <z_shell_fprintf>
    3ab6:	e7f3      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	if (common) {
    3ab8:	f1b8 0f00 	cmp.w	r8, #0
    3abc:	f43f adf6 	beq.w	36ac <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    3ac0:	eba8 0207 	sub.w	r2, r8, r7
    3ac4:	b292      	uxth	r2, r2
    3ac6:	eb0a 0107 	add.w	r1, sl, r7
    3aca:	4620      	mov	r0, r4
    3acc:	f007 fea2 	bl	b814 <z_shell_op_completion_insert>
    3ad0:	e5ec      	b.n	36ac <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    3ad2:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    3ad6:	0799      	lsls	r1, r3, #30
    3ad8:	f57f ade8 	bpl.w	36ac <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    3adc:	2101      	movs	r1, #1
    3ade:	f007 fb90 	bl	b202 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    3ae2:	4620      	mov	r0, r4
    3ae4:	f007 feb3 	bl	b84e <z_shell_op_char_backspace>
    3ae8:	e5e0      	b.n	36ac <shell_process+0x20>
    3aea:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    3aee:	0797      	lsls	r7, r2, #30
    3af0:	f57f addc 	bpl.w	36ac <shell_process+0x20>
	switch (data) {
    3af4:	3b01      	subs	r3, #1
    3af6:	2b16      	cmp	r3, #22
    3af8:	f63f add8 	bhi.w	36ac <shell_process+0x20>
    3afc:	a201      	add	r2, pc, #4	; (adr r2, 3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b02:	bf00      	nop
    3b04:	00003ced 	.word	0x00003ced
    3b08:	00003b61 	.word	0x00003b61
    3b0c:	00003b69 	.word	0x00003b69
    3b10:	000037c7 	.word	0x000037c7
    3b14:	00003ce1 	.word	0x00003ce1
    3b18:	00003b87 	.word	0x00003b87
    3b1c:	000036ad 	.word	0x000036ad
    3b20:	000036ad 	.word	0x000036ad
    3b24:	000036ad 	.word	0x000036ad
    3b28:	000036ad 	.word	0x000036ad
    3b2c:	00003b8f 	.word	0x00003b8f
    3b30:	00003b97 	.word	0x00003b97
    3b34:	000036ad 	.word	0x000036ad
    3b38:	00003bc1 	.word	0x00003bc1
    3b3c:	000036ad 	.word	0x000036ad
    3b40:	00003bcb 	.word	0x00003bcb
    3b44:	000036ad 	.word	0x000036ad
    3b48:	000036ad 	.word	0x000036ad
    3b4c:	000036ad 	.word	0x000036ad
    3b50:	000036ad 	.word	0x000036ad
    3b54:	00003bcf 	.word	0x00003bcf
    3b58:	000036ad 	.word	0x000036ad
    3b5c:	00003bfb 	.word	0x00003bfb
		z_shell_op_left_arrow(shell);
    3b60:	4620      	mov	r0, r4
    3b62:	f007 fd79 	bl	b658 <z_shell_op_left_arrow>
		break;
    3b66:	e5a1      	b.n	36ac <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    3b68:	4620      	mov	r0, r4
    3b6a:	f007 fd6e 	bl	b64a <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    3b6e:	4620      	mov	r0, r4
    3b70:	f007 fcfa 	bl	b568 <z_shell_cursor_in_empty_line>
    3b74:	b910      	cbnz	r0, 3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
			z_cursor_next_line_move(shell);
    3b76:	6960      	ldr	r0, [r4, #20]
    3b78:	f7ff fbae 	bl	32d8 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    3b7c:	68a0      	ldr	r0, [r4, #8]
    3b7e:	2101      	movs	r1, #1
    3b80:	f007 fb3f 	bl	b202 <z_flag_history_exit_set.isra.0>
    3b84:	e605      	b.n	3792 <shell_process+0x106>
		z_shell_op_right_arrow(shell);
    3b86:	4620      	mov	r0, r4
    3b88:	f007 fd6e 	bl	b668 <z_shell_op_right_arrow>
		break;
    3b8c:	e58e      	b.n	36ac <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    3b8e:	4620      	mov	r0, r4
    3b90:	f007 fd73 	bl	b67a <z_shell_op_delete_from_cursor>
		break;
    3b94:	e58a      	b.n	36ac <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3b96:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3b9a:	069e      	lsls	r6, r3, #26
    3b9c:	d503      	bpl.n	3ba6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10e>
    3b9e:	4929      	ldr	r1, [pc, #164]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3ba0:	6960      	ldr	r0, [r4, #20]
    3ba2:	f007 faf0 	bl	b186 <z_shell_raw_fprintf>
    3ba6:	68a3      	ldr	r3, [r4, #8]
    3ba8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3bac:	069d      	lsls	r5, r3, #26
    3bae:	d503      	bpl.n	3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
    3bb0:	4925      	ldr	r1, [pc, #148]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3bb2:	6960      	ldr	r0, [r4, #20]
    3bb4:	f007 fae7 	bl	b186 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    3bb8:	4620      	mov	r0, r4
    3bba:	f000 fd2b 	bl	4614 <z_shell_print_prompt_and_cmd>
		break;
    3bbe:	e575      	b.n	36ac <shell_process+0x20>
		history_handle(shell, false);
    3bc0:	2100      	movs	r1, #0
		history_handle(shell, true);
    3bc2:	4620      	mov	r0, r4
    3bc4:	f7ff fb8e 	bl	32e4 <history_handle>
		break;
    3bc8:	e570      	b.n	36ac <shell_process+0x20>
		history_handle(shell, true);
    3bca:	2101      	movs	r1, #1
    3bcc:	e7f9      	b.n	3bc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12a>
		z_shell_op_cursor_home_move(shell);
    3bce:	4620      	mov	r0, r4
    3bd0:	f007 fd35 	bl	b63e <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    3bd4:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    3bd6:	2300      	movs	r3, #0
    3bd8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    3bdc:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    3bde:	2101      	movs	r1, #1
    3be0:	f007 fb0f 	bl	b202 <z_flag_history_exit_set.isra.0>
    3be4:	68a3      	ldr	r3, [r4, #8]
    3be6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3bea:	0698      	lsls	r0, r3, #26
    3bec:	f57f ad5e 	bpl.w	36ac <shell_process+0x20>
    3bf0:	4916      	ldr	r1, [pc, #88]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3bf2:	6960      	ldr	r0, [r4, #20]
    3bf4:	f007 fac7 	bl	b186 <z_shell_raw_fprintf>
    3bf8:	e558      	b.n	36ac <shell_process+0x20>
		z_shell_op_word_remove(shell);
    3bfa:	4620      	mov	r0, r4
    3bfc:	f000 fc3e 	bl	447c <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    3c00:	68a0      	ldr	r0, [r4, #8]
    3c02:	2101      	movs	r1, #1
    3c04:	f007 fafd 	bl	b202 <z_flag_history_exit_set.isra.0>
		break;
    3c08:	e550      	b.n	36ac <shell_process+0x20>
			if (data == '[') {
    3c0a:	2b5b      	cmp	r3, #91	; 0x5b
    3c0c:	d101      	bne.n	3c12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17a>
	shell->ctx->receive_state = state;
    3c0e:	2302      	movs	r3, #2
    3c10:	e5de      	b.n	37d0 <shell_process+0x144>
	return sh->ctx->cfg.flags.echo == 1;
    3c12:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    3c16:	0791      	lsls	r1, r2, #30
    3c18:	d506      	bpl.n	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    3c1a:	2b62      	cmp	r3, #98	; 0x62
    3c1c:	d108      	bne.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
		z_shell_op_cursor_word_move(shell, -1);
    3c1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    3c22:	4620      	mov	r0, r4
    3c24:	f000 fbaa 	bl	437c <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    3c28:	68a3      	ldr	r3, [r4, #8]
    3c2a:	2200      	movs	r2, #0
    3c2c:	715a      	strb	r2, [r3, #5]
}
    3c2e:	e53d      	b.n	36ac <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    3c30:	2b66      	cmp	r3, #102	; 0x66
    3c32:	d1f9      	bne.n	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
		z_shell_op_cursor_word_move(shell, 1);
    3c34:	2101      	movs	r1, #1
    3c36:	e7f4      	b.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c38:	0000e5a5 	.word	0x0000e5a5
    3c3c:	0000e3d9 	.word	0x0000e3d9
    3c40:	0000e0a7 	.word	0x0000e0a7
    3c44:	0000d615 	.word	0x0000d615
    3c48:	0000d61a 	.word	0x0000d61a
    3c4c:	0000d610 	.word	0x0000d610
	shell->ctx->receive_state = state;
    3c50:	2200      	movs	r2, #0
    3c52:	7142      	strb	r2, [r0, #5]
    3c54:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    3c58:	0792      	lsls	r2, r2, #30
    3c5a:	f57f ad27 	bpl.w	36ac <shell_process+0x20>
			switch (data) {
    3c5e:	3b31      	subs	r3, #49	; 0x31
    3c60:	2b1b      	cmp	r3, #27
    3c62:	f63f ad23 	bhi.w	36ac <shell_process+0x20>
    3c66:	a201      	add	r2, pc, #4	; (adr r2, 3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>)
    3c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c6c:	00003ce9 	.word	0x00003ce9
    3c70:	00003cf5 	.word	0x00003cf5
    3c74:	00003d07 	.word	0x00003d07
    3c78:	00003cdd 	.word	0x00003cdd
    3c7c:	000036ad 	.word	0x000036ad
    3c80:	000036ad 	.word	0x000036ad
    3c84:	000036ad 	.word	0x000036ad
    3c88:	000036ad 	.word	0x000036ad
    3c8c:	000036ad 	.word	0x000036ad
    3c90:	000036ad 	.word	0x000036ad
    3c94:	000036ad 	.word	0x000036ad
    3c98:	000036ad 	.word	0x000036ad
    3c9c:	000036ad 	.word	0x000036ad
    3ca0:	000036ad 	.word	0x000036ad
    3ca4:	000036ad 	.word	0x000036ad
    3ca8:	000036ad 	.word	0x000036ad
    3cac:	00003bcb 	.word	0x00003bcb
    3cb0:	00003bc1 	.word	0x00003bc1
    3cb4:	00003b87 	.word	0x00003b87
    3cb8:	00003b61 	.word	0x00003b61
    3cbc:	000036ad 	.word	0x000036ad
    3cc0:	00003ce1 	.word	0x00003ce1
    3cc4:	000036ad 	.word	0x000036ad
    3cc8:	00003ced 	.word	0x00003ced
    3ccc:	000036ad 	.word	0x000036ad
    3cd0:	000036ad 	.word	0x000036ad
    3cd4:	000036ad 	.word	0x000036ad
    3cd8:	00003cf9 	.word	0x00003cf9
	shell->ctx->receive_state = state;
    3cdc:	2303      	movs	r3, #3
    3cde:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    3ce0:	4620      	mov	r0, r4
    3ce2:	f007 fcb2 	bl	b64a <z_shell_op_cursor_end_move>
		break;
    3ce6:	e4e1      	b.n	36ac <shell_process+0x20>
	shell->ctx->receive_state = state;
    3ce8:	2303      	movs	r3, #3
    3cea:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    3cec:	4620      	mov	r0, r4
    3cee:	f007 fca6 	bl	b63e <z_shell_op_cursor_home_move>
		break;
    3cf2:	e4db      	b.n	36ac <shell_process+0x20>
	shell->ctx->receive_state = state;
    3cf4:	2303      	movs	r3, #3
    3cf6:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    3cf8:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    3cfc:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    3d00:	f081 0101 	eor.w	r1, r1, #1
    3d04:	e5e8      	b.n	38d8 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    3d06:	2303      	movs	r3, #3
    3d08:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    3d0a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    3d0e:	079b      	lsls	r3, r3, #30
    3d10:	f57f accc 	bpl.w	36ac <shell_process+0x20>
    3d14:	e557      	b.n	37c6 <shell_process+0x13a>
	shell->ctx->receive_state = state;
    3d16:	2300      	movs	r3, #0
    3d18:	e55a      	b.n	37d0 <shell_process+0x144>
    3d1a:	bf00      	nop

00003d1c <shell_init>:
{
    3d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d20:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    3d22:	6880      	ldr	r0, [r0, #8]
{
    3d24:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    3d26:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    3d2a:	b089      	sub	sp, #36	; 0x24
    3d2c:	4615      	mov	r5, r2
    3d2e:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    3d30:	2900      	cmp	r1, #0
    3d32:	d161      	bne.n	3df8 <shell_init+0xdc>
__ssp_bos_icheck3(memset, void *, int)
    3d34:	f44f 7244 	mov.w	r2, #784	; 0x310
    3d38:	f008 feda 	bl	caf0 <memset>
	sh->ctx->prompt = sh->default_prompt;
    3d3c:	68a3      	ldr	r3, [r4, #8]
    3d3e:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    3d40:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    3d42:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    3d44:	f007 fecf 	bl	bae6 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    3d48:	68a0      	ldr	r0, [r4, #8]
    3d4a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
    3d4e:	f008 fbde 	bl	c50e <z_impl_k_mutex_init>
    3d52:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    3d56:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    3d5a:	68a0      	ldr	r0, [r4, #8]
    3d5c:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    3d5e:	f008 fe53 	bl	ca08 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    3d62:	68a0      	ldr	r0, [r4, #8]
    3d64:	2200      	movs	r2, #0
    3d66:	1983      	adds	r3, r0, r6
    3d68:	2101      	movs	r1, #1
    3d6a:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    3d6c:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    3d6e:	f008 fe2e 	bl	c9ce <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    3d72:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    3d76:	f109 0914 	add.w	r9, r9, #20
    3d7a:	d1ee      	bne.n	3d5a <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    3d7c:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    3d7e:	68a0      	ldr	r0, [r4, #8]
    3d80:	2600      	movs	r6, #0
    3d82:	2102      	movs	r1, #2
    3d84:	601e      	str	r6, [r3, #0]
    3d86:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3d8a:	f007 f9c2 	bl	b112 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    3d8e:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    3d90:	4a1b      	ldr	r2, [pc, #108]	; (3e00 <shell_init+0xe4>)
    3d92:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3d94:	6818      	ldr	r0, [r3, #0]
    3d96:	f007 f9f0 	bl	b17a <z_shell_strlen>
    3d9a:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3d9c:	4a19      	ldr	r2, [pc, #100]	; (3e04 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3d9e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3da2:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    3da4:	f366 0582 	bfi	r5, r6, #2, #1
    3da8:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3dac:	6803      	ldr	r3, [r0, #0]
    3dae:	4641      	mov	r1, r8
    3db0:	681d      	ldr	r5, [r3, #0]
    3db2:	4623      	mov	r3, r4
    3db4:	47a8      	blx	r5
	if (ret == 0) {
    3db6:	4605      	mov	r5, r0
    3db8:	b9d0      	cbnz	r0, 3df0 <shell_init+0xd4>
	shell->ctx->state = state;
    3dba:	68a3      	ldr	r3, [r4, #8]
    3dbc:	2201      	movs	r2, #1
    3dbe:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    3dc0:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3dc4:	2200      	movs	r2, #0
    3dc6:	2300      	movs	r3, #0
    3dc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3dcc:	230e      	movs	r3, #14
    3dce:	9303      	str	r3, [sp, #12]
    3dd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3dd2:	9504      	str	r5, [sp, #16]
    3dd4:	e9cd 7301 	strd	r7, r3, [sp, #4]
    3dd8:	9400      	str	r4, [sp, #0]
    3dda:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <shell_init+0xec>)
    3ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3de0:	f003 ff76 	bl	7cd0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    3de4:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    3de6:	6a21      	ldr	r1, [r4, #32]
	shell->ctx->tid = tid;
    3de8:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    3dec:	f003 fec0 	bl	7b70 <z_impl_k_thread_name_set>
}
    3df0:	4628      	mov	r0, r5
    3df2:	b009      	add	sp, #36	; 0x24
    3df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    3df8:	f06f 0577 	mvn.w	r5, #119	; 0x77
    3dfc:	e7f8      	b.n	3df0 <shell_init+0xd4>
    3dfe:	bf00      	nop
    3e00:	00500018 	.word	0x00500018
    3e04:	0000b1a5 	.word	0x0000b1a5
    3e08:	00003e59 	.word	0x00003e59

00003e0c <shell_start>:
{
    3e0c:	b510      	push	{r4, lr}
    3e0e:	4604      	mov	r4, r0
	return shell->ctx->state;
    3e10:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    3e12:	7903      	ldrb	r3, [r0, #4]
    3e14:	2b01      	cmp	r3, #1
    3e16:	d119      	bne.n	3e4c <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e20:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3e24:	f007 f9bc 	bl	b1a0 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    3e28:	2108      	movs	r1, #8
    3e2a:	4620      	mov	r0, r4
    3e2c:	f000 fae8 	bl	4400 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    3e30:	4908      	ldr	r1, [pc, #32]	; (3e54 <shell_start+0x48>)
    3e32:	6960      	ldr	r0, [r4, #20]
    3e34:	f007 f9a7 	bl	b186 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    3e38:	4620      	mov	r0, r4
    3e3a:	f7ff fc03 	bl	3644 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    3e3e:	68a0      	ldr	r0, [r4, #8]
    3e40:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3e44:	f007 f9f6 	bl	b234 <k_mutex_unlock.isra.0>
	return 0;
    3e48:	2000      	movs	r0, #0
}
    3e4a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    3e4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e50:	e7fb      	b.n	3e4a <shell_start+0x3e>
    3e52:	bf00      	nop
    3e54:	0000df87 	.word	0x0000df87

00003e58 <shell_thread>:
{
    3e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e5a:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    3e5c:	6840      	ldr	r0, [r0, #4]
    3e5e:	6803      	ldr	r3, [r0, #0]
    3e60:	2100      	movs	r1, #0
    3e62:	689b      	ldr	r3, [r3, #8]
    3e64:	4798      	blx	r3
	if (err != 0) {
    3e66:	2800      	cmp	r0, #0
    3e68:	d13f      	bne.n	3eea <shell_thread+0x92>
	err = shell_start(shell);
    3e6a:	4620      	mov	r0, r4
    3e6c:	f7ff ffce 	bl	3e0c <shell_start>
	if (err != 0) {
    3e70:	2800      	cmp	r0, #0
    3e72:	d13a      	bne.n	3eea <shell_thread+0x92>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3e74:	4f1d      	ldr	r7, [pc, #116]	; (3eec <shell_thread+0x94>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3e76:	4e1e      	ldr	r6, [pc, #120]	; (3ef0 <shell_thread+0x98>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    3e78:	68a0      	ldr	r0, [r4, #8]
    3e7a:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    3e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e86:	2103      	movs	r1, #3
    3e88:	f004 fd90 	bl	89ac <z_impl_k_poll>
		if (err != 0) {
    3e8c:	4605      	mov	r5, r0
    3e8e:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e98:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    3e9c:	b175      	cbz	r5, 3ebc <shell_thread+0x64>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3e9e:	f007 f97f 	bl	b1a0 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    3ea2:	4620      	mov	r0, r4
    3ea4:	462b      	mov	r3, r5
    3ea6:	4a13      	ldr	r2, [pc, #76]	; (3ef4 <shell_thread+0x9c>)
    3ea8:	2101      	movs	r1, #1
    3eaa:	f007 fc75 	bl	b798 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3eae:	68a0      	ldr	r0, [r4, #8]
}
    3eb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3eb4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3eb8:	f007 b9bc 	b.w	b234 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3ebc:	f007 f970 	bl	b1a0 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    3ec0:	6860      	ldr	r0, [r4, #4]
    3ec2:	6803      	ldr	r3, [r0, #0]
    3ec4:	695b      	ldr	r3, [r3, #20]
    3ec6:	b103      	cbz	r3, 3eca <shell_thread+0x72>
			shell->iface->api->update(shell->iface);
    3ec8:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3eca:	463a      	mov	r2, r7
    3ecc:	4620      	mov	r0, r4
    3ece:	2102      	movs	r1, #2
    3ed0:	f007 f93d 	bl	b14e <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3ed4:	4620      	mov	r0, r4
    3ed6:	4632      	mov	r2, r6
    3ed8:	2100      	movs	r1, #0
    3eda:	f007 f938 	bl	b14e <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    3ede:	68a0      	ldr	r0, [r4, #8]
    3ee0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    3ee4:	f007 f9a6 	bl	b234 <k_mutex_unlock.isra.0>
    3ee8:	e7c6      	b.n	3e78 <shell_thread+0x20>
}
    3eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eec:	0000b1b9 	.word	0x0000b1b9
    3ef0:	0000368d 	.word	0x0000368d
    3ef4:	0000e3df 	.word	0x0000e3df

00003ef8 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    3ef8:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    3efa:	4a0d      	ldr	r2, [pc, #52]	; (3f30 <cmd_help+0x38>)
{
    3efc:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    3efe:	2108      	movs	r1, #8
    3f00:	f007 f9d7 	bl	b2b2 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    3f04:	4620      	mov	r0, r4
    3f06:	4a0b      	ldr	r2, [pc, #44]	; (3f34 <cmd_help+0x3c>)
    3f08:	2108      	movs	r1, #8
    3f0a:	f007 f9d2 	bl	b2b2 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    3f0e:	4620      	mov	r0, r4
    3f10:	4a09      	ldr	r2, [pc, #36]	; (3f38 <cmd_help+0x40>)
    3f12:	2108      	movs	r1, #8
    3f14:	f007 f9cd 	bl	b2b2 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    3f18:	4620      	mov	r0, r4
    3f1a:	4a08      	ldr	r2, [pc, #32]	; (3f3c <cmd_help+0x44>)
    3f1c:	2108      	movs	r1, #8
    3f1e:	f007 f9c8 	bl	b2b2 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    3f22:	4620      	mov	r0, r4
    3f24:	4a06      	ldr	r2, [pc, #24]	; (3f40 <cmd_help+0x48>)
    3f26:	2100      	movs	r1, #0
    3f28:	f000 fc06 	bl	4738 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    3f2c:	2000      	movs	r0, #0
    3f2e:	bd10      	pop	{r4, pc}
    3f30:	0000e3f6 	.word	0x0000e3f6
    3f34:	0000e434 	.word	0x0000e434
    3f38:	0000e493 	.word	0x0000e493
    3f3c:	0000e4e7 	.word	0x0000e4e7
    3f40:	0000e581 	.word	0x0000e581

00003f44 <shell_hexdump_line>:
{
    3f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f48:	4616      	mov	r6, r2
    3f4a:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3f4c:	4a2b      	ldr	r2, [pc, #172]	; (3ffc <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3f4e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4000 <shell_hexdump_line+0xbc>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    3f52:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4004 <shell_hexdump_line+0xc0>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3f56:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4008 <shell_hexdump_line+0xc4>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3f5a:	460b      	mov	r3, r1
    3f5c:	2108      	movs	r1, #8
{
    3f5e:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3f60:	f007 f9a7 	bl	b2b2 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3f64:	2500      	movs	r5, #0
		if (i < len) {
    3f66:	42af      	cmp	r7, r5
    3f68:	d934      	bls.n	3fd4 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    3f6a:	5d73      	ldrb	r3, [r6, r5]
    3f6c:	464a      	mov	r2, r9
    3f6e:	2108      	movs	r1, #8
    3f70:	4620      	mov	r0, r4
    3f72:	f007 f99e 	bl	b2b2 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3f76:	3501      	adds	r5, #1
    3f78:	2d10      	cmp	r5, #16
    3f7a:	d123      	bne.n	3fc4 <shell_hexdump_line+0x80>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    3f7c:	4a23      	ldr	r2, [pc, #140]	; (400c <shell_hexdump_line+0xc8>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3f7e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4008 <shell_hexdump_line+0xc4>
				      isprint((int)c) ? c : '.');
    3f82:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4010 <shell_hexdump_line+0xcc>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    3f86:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4014 <shell_hexdump_line+0xd0>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    3f8a:	2108      	movs	r1, #8
    3f8c:	4620      	mov	r0, r4
    3f8e:	f007 f990 	bl	b2b2 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3f92:	2500      	movs	r5, #0
		if (i < len) {
    3f94:	42bd      	cmp	r5, r7
    3f96:	d22b      	bcs.n	3ff0 <shell_hexdump_line+0xac>
			char c = data[i];
    3f98:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    3f9a:	f813 2009 	ldrb.w	r2, [r3, r9]
    3f9e:	f012 0f97 	tst.w	r2, #151	; 0x97
    3fa2:	bf08      	it	eq
    3fa4:	232e      	moveq	r3, #46	; 0x2e
    3fa6:	4652      	mov	r2, sl
    3fa8:	2108      	movs	r1, #8
    3faa:	4620      	mov	r0, r4
    3fac:	f007 f981 	bl	b2b2 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3fb0:	3501      	adds	r5, #1
    3fb2:	2d10      	cmp	r5, #16
    3fb4:	d114      	bne.n	3fe0 <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
    3fb6:	4620      	mov	r0, r4
    3fb8:	4a17      	ldr	r2, [pc, #92]	; (4018 <shell_hexdump_line+0xd4>)
}
    3fba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
    3fbe:	2108      	movs	r1, #8
    3fc0:	f007 b977 	b.w	b2b2 <shell_fprintf>
		if (i > 0 && !(i % 8)) {
    3fc4:	076a      	lsls	r2, r5, #29
    3fc6:	d1ce      	bne.n	3f66 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3fc8:	4652      	mov	r2, sl
    3fca:	2108      	movs	r1, #8
    3fcc:	4620      	mov	r0, r4
    3fce:	f007 f970 	bl	b2b2 <shell_fprintf>
    3fd2:	e7c8      	b.n	3f66 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3fd4:	4642      	mov	r2, r8
    3fd6:	2108      	movs	r1, #8
    3fd8:	4620      	mov	r0, r4
    3fda:	f007 f96a 	bl	b2b2 <shell_fprintf>
    3fde:	e7ca      	b.n	3f76 <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
    3fe0:	076b      	lsls	r3, r5, #29
    3fe2:	d1d7      	bne.n	3f94 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3fe4:	4642      	mov	r2, r8
    3fe6:	2108      	movs	r1, #8
    3fe8:	4620      	mov	r0, r4
    3fea:	f007 f962 	bl	b2b2 <shell_fprintf>
    3fee:	e7d1      	b.n	3f94 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3ff0:	4642      	mov	r2, r8
    3ff2:	2108      	movs	r1, #8
    3ff4:	4620      	mov	r0, r4
    3ff6:	f007 f95c 	bl	b2b2 <shell_fprintf>
    3ffa:	e7d9      	b.n	3fb0 <shell_hexdump_line+0x6c>
    3ffc:	0000e597 	.word	0x0000e597
    4000:	0000e5a4 	.word	0x0000e5a4
    4004:	0000e59e 	.word	0x0000e59e
    4008:	0000e5a6 	.word	0x0000e5a6
    400c:	0000e5a8 	.word	0x0000e5a8
    4010:	0000edfb 	.word	0x0000edfb
    4014:	0000e5ca 	.word	0x0000e5ca
    4018:	0000e5aa 	.word	0x0000e5aa

0000401c <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    401c:	b510      	push	{r4, lr}
    401e:	4604      	mov	r4, r0
    4020:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    4022:	460a      	mov	r2, r1
    4024:	4601      	mov	r1, r0
    4026:	4806      	ldr	r0, [pc, #24]	; (4040 <z_shell_fprintf_fmt+0x24>)
    4028:	f7fd ff24 	bl	1e74 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    402c:	6923      	ldr	r3, [r4, #16]
    402e:	791b      	ldrb	r3, [r3, #4]
    4030:	b123      	cbz	r3, 403c <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    4032:	4620      	mov	r0, r4
	}
}
    4034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    4038:	f007 b963 	b.w	b302 <z_shell_fprintf_buffer_flush>
}
    403c:	bd10      	pop	{r4, pc}
    403e:	bf00      	nop
    4040:	0000b31b 	.word	0x0000b31b

00004044 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
    4044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4048:	461f      	mov	r7, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
    404a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 41d0 <z_shell_make_argv+0x18c>
	*argc = 0;
    404e:	2300      	movs	r3, #0
{
    4050:	4605      	mov	r5, r0
    4052:	460e      	mov	r6, r1
    4054:	4614      	mov	r4, r2
	*argc = 0;
    4056:	6003      	str	r3, [r0, #0]
	char quote = 0;
    4058:	469a      	mov	sl, r3
	char quote = 0;
    405a:	4699      	mov	r9, r3
		c = *cmd;
    405c:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
    405e:	2b00      	cmp	r3, #0
    4060:	f000 80b1 	beq.w	41c6 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    4064:	f813 3008 	ldrb.w	r3, [r3, r8]
    4068:	f013 0308 	ands.w	r3, r3, #8
    406c:	d002      	beq.n	4074 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
    406e:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
    4072:	e7f3      	b.n	405c <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
    4074:	6829      	ldr	r1, [r5, #0]
    4076:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
    4078:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
    407a:	602a      	str	r2, [r5, #0]
    407c:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
    4080:	f000 80a1 	beq.w	41c6 <z_shell_make_argv+0x182>
	char quote = 0;
    4084:	469a      	mov	sl, r3
		c = *cmd;
    4086:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
    408a:	f1bb 0f00 	cmp.w	fp, #0
    408e:	d0e5      	beq.n	405c <z_shell_make_argv+0x18>
		if (!quote) {
    4090:	f1ba 0f00 	cmp.w	sl, #0
    4094:	f040 8083 	bne.w	419e <z_shell_make_argv+0x15a>
			switch (c) {
    4098:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
    409c:	d006      	beq.n	40ac <z_shell_make_argv+0x68>
    409e:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
    40a2:	f000 8084 	beq.w	41ae <z_shell_make_argv+0x16a>
    40a6:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
    40aa:	d171      	bne.n	4190 <z_shell_make_argv+0x14c>
				memmove(cmd, cmd + 1,
    40ac:	4620      	mov	r0, r4
    40ae:	f007 f950 	bl	b352 <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
    40b2:	1c61      	adds	r1, r4, #1
    40b4:	4602      	mov	r2, r0
    40b6:	4620      	mov	r0, r4
    40b8:	f008 fd00 	bl	cabc <memmove>
				continue;
    40bc:	46da      	mov	sl, fp
    40be:	e7e2      	b.n	4086 <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    40c0:	4620      	mov	r0, r4
    40c2:	f007 f946 	bl	b352 <z_shell_strlen>
    40c6:	1c61      	adds	r1, r4, #1
    40c8:	4602      	mov	r2, r0
    40ca:	4620      	mov	r0, r4
    40cc:	f008 fcf6 	bl	cabc <memmove>
			quote = 0;
    40d0:	f04f 0a00 	mov.w	sl, #0
			continue;
    40d4:	e7d7      	b.n	4086 <z_shell_make_argv+0x42>
			if (t == '0') {
    40d6:	2930      	cmp	r1, #48	; 0x30
    40d8:	d126      	bne.n	4128 <z_shell_make_argv+0xe4>
				uint8_t v = 0U;
    40da:	f04f 0b00 	mov.w	fp, #0
    40de:	2302      	movs	r3, #2
					t = *(cmd + i);
    40e0:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    40e2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    40e6:	fa5f fc80 	uxtb.w	ip, r0
    40ea:	f1bc 0f07 	cmp.w	ip, #7
    40ee:	b2da      	uxtb	r2, r3
    40f0:	d818      	bhi.n	4124 <z_shell_make_argv+0xe0>
				for (i = 2U; i < (2 + 3); i++) {
    40f2:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    40f4:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    40f8:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    40fa:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
    40fe:	d1ef      	bne.n	40e0 <z_shell_make_argv+0x9c>
    4100:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
    4102:	1e51      	subs	r1, r2, #1
    4104:	4421      	add	r1, r4
    4106:	4620      	mov	r0, r4
    4108:	9201      	str	r2, [sp, #4]
    410a:	9100      	str	r1, [sp, #0]
    410c:	f007 f921 	bl	b352 <z_shell_strlen>
    4110:	9a01      	ldr	r2, [sp, #4]
    4112:	3002      	adds	r0, #2
    4114:	1a82      	subs	r2, r0, r2
    4116:	4620      	mov	r0, r4
    4118:	9900      	ldr	r1, [sp, #0]
    411a:	f008 fccf 	bl	cabc <memmove>
					*cmd++ = v;
    411e:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
    4122:	e7b0      	b.n	4086 <z_shell_make_argv+0x42>
				if (i > 2) {
    4124:	2a02      	cmp	r2, #2
    4126:	d1ec      	bne.n	4102 <z_shell_make_argv+0xbe>
			if (t == 'x') {
    4128:	2978      	cmp	r1, #120	; 0x78
    412a:	d136      	bne.n	419a <z_shell_make_argv+0x156>
				uint8_t v = 0U;
    412c:	f04f 0b00 	mov.w	fp, #0
    4130:	2302      	movs	r3, #2
					t = *(cmd + i);
    4132:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
    4134:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    4138:	fa5f fc81 	uxtb.w	ip, r1
    413c:	f1bc 0f09 	cmp.w	ip, #9
    4140:	b2d8      	uxtb	r0, r3
    4142:	d813      	bhi.n	416c <z_shell_make_argv+0x128>
						v = (v << 4) | (t - '0');
    4144:	ea41 120b 	orr.w	r2, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    4148:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
    414a:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
    414e:	d10b      	bne.n	4168 <z_shell_make_argv+0x124>
    4150:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
    4152:	1e59      	subs	r1, r3, #1
    4154:	4421      	add	r1, r4
    4156:	4620      	mov	r0, r4
    4158:	9301      	str	r3, [sp, #4]
    415a:	9100      	str	r1, [sp, #0]
    415c:	f007 f8f9 	bl	b352 <z_shell_strlen>
    4160:	9b01      	ldr	r3, [sp, #4]
    4162:	1c82      	adds	r2, r0, #2
    4164:	1ad2      	subs	r2, r2, r3
    4166:	e7d6      	b.n	4116 <z_shell_make_argv+0xd2>
    4168:	2303      	movs	r3, #3
    416a:	e7e2      	b.n	4132 <z_shell_make_argv+0xee>
					} else if ((t >= 'a') &&
    416c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    4170:	2905      	cmp	r1, #5
    4172:	d803      	bhi.n	417c <z_shell_make_argv+0x138>
						v = (v << 4) | (t - 'a' + 10);
    4174:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    4176:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
    417a:	e7e5      	b.n	4148 <z_shell_make_argv+0x104>
					} else if ((t >= 'A') && (t <= 'F')) {
    417c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
    4180:	2905      	cmp	r1, #5
    4182:	d801      	bhi.n	4188 <z_shell_make_argv+0x144>
						v = (v << 4) | (t - 'A' + 10);
    4184:	3a37      	subs	r2, #55	; 0x37
    4186:	e7f6      	b.n	4176 <z_shell_make_argv+0x132>
				if (i > 2) {
    4188:	2802      	cmp	r0, #2
    418a:	d006      	beq.n	419a <z_shell_make_argv+0x156>
    418c:	2303      	movs	r3, #3
    418e:	e7e0      	b.n	4152 <z_shell_make_argv+0x10e>
		if (!quote && isspace((int) c)) {
    4190:	f818 300b 	ldrb.w	r3, [r8, fp]
    4194:	071b      	lsls	r3, r3, #28
    4196:	f53f af61 	bmi.w	405c <z_shell_make_argv+0x18>
		cmd += 1;
    419a:	3401      	adds	r4, #1
    419c:	e773      	b.n	4086 <z_shell_make_argv+0x42>
		if (quote == c) {
    419e:	45d3      	cmp	fp, sl
    41a0:	d08e      	beq.n	40c0 <z_shell_make_argv+0x7c>
		if (quote && c == '\\') {
    41a2:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
    41a6:	d1f8      	bne.n	419a <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
    41a8:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    41aa:	458a      	cmp	sl, r1
    41ac:	d193      	bne.n	40d6 <z_shell_make_argv+0x92>
				memmove(cmd, cmd + 1,
    41ae:	4620      	mov	r0, r4
    41b0:	f007 f8cf 	bl	b352 <z_shell_strlen>
    41b4:	f104 0b01 	add.w	fp, r4, #1
    41b8:	4602      	mov	r2, r0
    41ba:	4659      	mov	r1, fp
    41bc:	4620      	mov	r0, r4
    41be:	f008 fc7d 	bl	cabc <memmove>
				continue;
    41c2:	465c      	mov	r4, fp
    41c4:	e75f      	b.n	4086 <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
    41c6:	4650      	mov	r0, sl
    41c8:	b003      	add	sp, #12
    41ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41ce:	bf00      	nop
    41d0:	0000edfb 	.word	0x0000edfb

000041d4 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    41d4:	b510      	push	{r4, lr}
    41d6:	460b      	mov	r3, r1
    41d8:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    41da:	b950      	cbnz	r0, 41f2 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    41dc:	490e      	ldr	r1, [pc, #56]	; (4218 <z_shell_cmd_get+0x44>)
    41de:	4a0f      	ldr	r2, [pc, #60]	; (421c <z_shell_cmd_get+0x48>)
    41e0:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    41e2:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    41e6:	d20f      	bcs.n	4208 <z_shell_cmd_get+0x34>
    41e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    41ec:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    41ee:	4620      	mov	r0, r4
    41f0:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    41f2:	6881      	ldr	r1, [r0, #8]
    41f4:	b141      	cbz	r1, 4208 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    41f6:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    41f8:	7809      	ldrb	r1, [r1, #0]
    41fa:	b139      	cbz	r1, 420c <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    41fc:	4618      	mov	r0, r3
    41fe:	4621      	mov	r1, r4
    4200:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    4202:	6823      	ldr	r3, [r4, #0]
    4204:	2b00      	cmp	r3, #0
    4206:	d1f2      	bne.n	41ee <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    4208:	2400      	movs	r4, #0
    420a:	e7f0      	b.n	41ee <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    420c:	2014      	movs	r0, #20
    420e:	4343      	muls	r3, r0
    4210:	18d4      	adds	r4, r2, r3
    4212:	58d3      	ldr	r3, [r2, r3]
    4214:	e7f6      	b.n	4204 <z_shell_cmd_get+0x30>
    4216:	bf00      	nop
    4218:	0000d5a0 	.word	0x0000d5a0
    421c:	0000d5f0 	.word	0x0000d5f0

00004220 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    4220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4224:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
    4226:	f007 f894 	bl	b352 <z_shell_strlen>
    422a:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
    422c:	bb56      	cbnz	r6, 4284 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
    422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
    4232:	b14c      	cbz	r4, 4248 <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
    4234:	1c6a      	adds	r2, r5, #1
    4236:	b29b      	uxth	r3, r3
    4238:	3001      	adds	r0, #1
    423a:	1ad2      	subs	r2, r2, r3
    423c:	4430      	add	r0, r6
    423e:	f008 fc3d 	bl	cabc <memmove>
					len -= shift;
    4242:	1b2d      	subs	r5, r5, r4
    4244:	b2ad      	uxth	r5, r5
					shift = 0U;
    4246:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
    4248:	3701      	adds	r7, #1
    424a:	b2bb      	uxth	r3, r7
    424c:	1e6a      	subs	r2, r5, #1
    424e:	4293      	cmp	r3, r2
    4250:	4618      	mov	r0, r3
    4252:	daec      	bge.n	422e <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    4254:	5c32      	ldrb	r2, [r6, r0]
    4256:	f812 2008 	ldrb.w	r2, [r2, r8]
    425a:	0712      	lsls	r2, r2, #28
    425c:	d5f4      	bpl.n	4248 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
    425e:	3301      	adds	r3, #1
    4260:	b29b      	uxth	r3, r3
    4262:	b29a      	uxth	r2, r3
    4264:	4295      	cmp	r5, r2
    4266:	d9ef      	bls.n	4248 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    4268:	5cf2      	ldrb	r2, [r6, r3]
    426a:	f818 2002 	ldrb.w	r2, [r8, r2]
    426e:	f012 0908 	ands.w	r9, r2, #8
    4272:	eb06 0103 	add.w	r1, r6, r3
    4276:	f103 0c01 	add.w	ip, r3, #1
    427a:	d0da      	beq.n	4232 <z_shell_spaces_trim+0x12>
					shift++;
    427c:	3401      	adds	r4, #1
    427e:	b2a4      	uxth	r4, r4
    4280:	4663      	mov	r3, ip
    4282:	e7ee      	b.n	4262 <z_shell_spaces_trim+0x42>
    4284:	2700      	movs	r7, #0
		if (isspace((int)str[i])) {
    4286:	f8df 8008 	ldr.w	r8, [pc, #8]	; 4290 <z_shell_spaces_trim+0x70>
	uint16_t shift = 0U;
    428a:	463c      	mov	r4, r7
    428c:	e7dd      	b.n	424a <z_shell_spaces_trim+0x2a>
    428e:	bf00      	nop
    4290:	0000edfb 	.word	0x0000edfb

00004294 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    4294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    4296:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    4298:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    429c:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    429e:	b953      	cbnz	r3, 42b6 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    42a0:	68ab      	ldr	r3, [r5, #8]
    42a2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    42a4:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    42a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    42a8:	3a01      	subs	r2, #1
    42aa:	b292      	uxth	r2, r2
    42ac:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    42ae:	b92a      	cbnz	r2, 42bc <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
    42b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    42b4:	e7f4      	b.n	42a0 <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
    42b6:	4e11      	ldr	r6, [pc, #68]	; (42fc <z_shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    42b8:	f104 0042 	add.w	r0, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    42bc:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    42be:	1883      	adds	r3, r0, r2
    42c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    42c4:	5d9b      	ldrb	r3, [r3, r6]
    42c6:	f013 0308 	ands.w	r3, r3, #8
    42ca:	d1ed      	bne.n	42a8 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    42cc:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
    42ce:	b29f      	uxth	r7, r3
    42d0:	fa10 f183 	uxtah	r1, r0, r3
    42d4:	f810 c007 	ldrb.w	ip, [r0, r7]
    42d8:	f816 c00c 	ldrb.w	ip, [r6, ip]
    42dc:	f01c 0f08 	tst.w	ip, #8
    42e0:	f103 0301 	add.w	r3, r3, #1
    42e4:	d1f3      	bne.n	42ce <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    42e6:	2f00      	cmp	r7, #0
    42e8:	d0da      	beq.n	42a0 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    42ea:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    42ec:	1c73      	adds	r3, r6, #1
    42ee:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
    42f0:	1bf6      	subs	r6, r6, r7
    42f2:	f008 fbe3 	bl	cabc <memmove>
    42f6:	87a6      	strh	r6, [r4, #60]	; 0x3c
    42f8:	e7d2      	b.n	42a0 <z_shell_cmd_trim+0xc>
    42fa:	bf00      	nop
    42fc:	0000edfb 	.word	0x0000edfb

00004300 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4300:	6883      	ldr	r3, [r0, #8]
    4302:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    4306:	069b      	lsls	r3, r3, #26
    4308:	d503      	bpl.n	4312 <z_clear_eos+0x12>
    430a:	4902      	ldr	r1, [pc, #8]	; (4314 <z_clear_eos+0x14>)
    430c:	6940      	ldr	r0, [r0, #20]
    430e:	f007 b90a 	b.w	b526 <z_shell_raw_fprintf>
}
    4312:	4770      	bx	lr
    4314:	0000d620 	.word	0x0000d620

00004318 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    4318:	4901      	ldr	r1, [pc, #4]	; (4320 <z_cursor_next_line_move.isra.0+0x8>)
    431a:	f007 b904 	b.w	b526 <z_shell_raw_fprintf>
    431e:	bf00      	nop
    4320:	0000df88 	.word	0x0000df88

00004324 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    4324:	1e0a      	subs	r2, r1, #0
    4326:	dc0d      	bgt.n	4344 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    4328:	d00e      	beq.n	4348 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    432a:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    432c:	6881      	ldr	r1, [r0, #8]
    432e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    4332:	0689      	lsls	r1, r1, #26
    4334:	d508      	bpl.n	4348 <z_shell_op_cursor_vert_move+0x24>
    4336:	2a00      	cmp	r2, #0
    4338:	4904      	ldr	r1, [pc, #16]	; (434c <z_shell_op_cursor_vert_move+0x28>)
    433a:	6940      	ldr	r0, [r0, #20]
    433c:	bfb8      	it	lt
    433e:	4252      	neglt	r2, r2
    4340:	f007 b8f1 	b.w	b526 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    4344:	2341      	movs	r3, #65	; 0x41
    4346:	e7f1      	b.n	432c <z_shell_op_cursor_vert_move+0x8>
}
    4348:	4770      	bx	lr
    434a:	bf00      	nop
    434c:	0000e5c6 	.word	0x0000e5c6

00004350 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    4350:	1e0a      	subs	r2, r1, #0
    4352:	dc0d      	bgt.n	4370 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    4354:	d00e      	beq.n	4374 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    4356:	2344      	movs	r3, #68	; 0x44
    4358:	6881      	ldr	r1, [r0, #8]
    435a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    435e:	0689      	lsls	r1, r1, #26
    4360:	d508      	bpl.n	4374 <z_shell_op_cursor_horiz_move+0x24>
    4362:	2a00      	cmp	r2, #0
    4364:	4904      	ldr	r1, [pc, #16]	; (4378 <z_shell_op_cursor_horiz_move+0x28>)
    4366:	6940      	ldr	r0, [r0, #20]
    4368:	bfb8      	it	lt
    436a:	4252      	neglt	r2, r2
    436c:	f007 b8db 	b.w	b526 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    4370:	2343      	movs	r3, #67	; 0x43
    4372:	e7f1      	b.n	4358 <z_shell_op_cursor_horiz_move+0x8>
}
    4374:	4770      	bx	lr
    4376:	bf00      	nop
    4378:	0000e5c6 	.word	0x0000e5c6

0000437c <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
    437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
    4380:	1e0c      	subs	r4, r1, #0
{
    4382:	4606      	mov	r6, r0
	if (val < 0) {
    4384:	da2f      	bge.n	43e6 <z_shell_op_cursor_word_move+0x6a>
		val = -val;
    4386:	4264      	negs	r4, r4
    4388:	b224      	sxth	r4, r4
		sign = -1;
    438a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (isalnum((int)str[idx]) != 0) {
    438e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 43ec <z_shell_op_cursor_word_move+0x70>
    4392:	b2a4      	uxth	r4, r4
    4394:	b2af      	uxth	r7, r5
    4396:	e01e      	b.n	43d6 <z_shell_op_cursor_word_move+0x5a>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
    4398:	68b3      	ldr	r3, [r6, #8]
    439a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    439c:	f8b3 e03c 	ldrh.w	lr, [r3, #60]	; 0x3c
    43a0:	f103 0c42 	add.w	ip, r3, #66	; 0x42
	bool found = false;
    43a4:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    43a6:	4613      	mov	r3, r2
		idx = pos + ret * sign;
    43a8:	1a99      	subs	r1, r3, r2
    43aa:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    43ac:	b913      	cbnz	r3, 43b4 <z_shell_op_cursor_word_move+0x38>
    43ae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    43b2:	d00b      	beq.n	43cc <z_shell_op_cursor_word_move+0x50>
    43b4:	459e      	cmp	lr, r3
    43b6:	d101      	bne.n	43bc <z_shell_op_cursor_word_move+0x40>
		    ((idx == len) && (sign > 0))) {
    43b8:	2d01      	cmp	r5, #1
    43ba:	d007      	beq.n	43cc <z_shell_op_cursor_word_move+0x50>
		if (isalnum((int)str[idx]) != 0) {
    43bc:	f81c 9003 	ldrb.w	r9, [ip, r3]
    43c0:	f819 9008 	ldrb.w	r9, [r9, r8]
    43c4:	f019 0f07 	tst.w	r9, #7
    43c8:	d109      	bne.n	43de <z_shell_op_cursor_word_move+0x62>
			if (found) {
    43ca:	b148      	cbz	r0, 43e0 <z_shell_op_cursor_word_move+0x64>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
    43cc:	4630      	mov	r0, r6
    43ce:	f007 f912 	bl	b5f6 <z_shell_op_cursor_move>
    43d2:	3c01      	subs	r4, #1
    43d4:	b2a4      	uxth	r4, r4
	while (val--) {
    43d6:	2c00      	cmp	r4, #0
    43d8:	d1de      	bne.n	4398 <z_shell_op_cursor_word_move+0x1c>
	}
}
    43da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    43de:	2001      	movs	r0, #1
	while (1) {
    43e0:	443b      	add	r3, r7
    43e2:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    43e4:	e7e0      	b.n	43a8 <z_shell_op_cursor_word_move+0x2c>
		sign = 1;
    43e6:	2501      	movs	r5, #1
    43e8:	e7d1      	b.n	438e <z_shell_op_cursor_word_move+0x12>
    43ea:	bf00      	nop
    43ec:	0000edfb 	.word	0x0000edfb

000043f0 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    43f0:	6882      	ldr	r2, [r0, #8]
    43f2:	4902      	ldr	r1, [pc, #8]	; (43fc <z_shell_print_cmd+0xc>)
    43f4:	6940      	ldr	r0, [r0, #20]
    43f6:	3242      	adds	r2, #66	; 0x42
    43f8:	f007 b895 	b.w	b526 <z_shell_raw_fprintf>
    43fc:	0000e0a7 	.word	0x0000e0a7

00004400 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    4400:	2908      	cmp	r1, #8
{
    4402:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    4404:	d816      	bhi.n	4434 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    4406:	6883      	ldr	r3, [r0, #8]
    4408:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    440c:	4291      	cmp	r1, r2
    440e:	d011      	beq.n	4434 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    4410:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    4412:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4416:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    441a:	d005      	beq.n	4428 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    441c:	0699      	lsls	r1, r3, #26
    441e:	d509      	bpl.n	4434 <z_shell_vt100_color_set+0x34>
    4420:	4905      	ldr	r1, [pc, #20]	; (4438 <z_shell_vt100_color_set+0x38>)
    4422:	6940      	ldr	r0, [r0, #20]
    4424:	f007 b87f 	b.w	b526 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    4428:	069b      	lsls	r3, r3, #26
    442a:	d503      	bpl.n	4434 <z_shell_vt100_color_set+0x34>
    442c:	4903      	ldr	r1, [pc, #12]	; (443c <z_shell_vt100_color_set+0x3c>)
    442e:	6940      	ldr	r0, [r0, #20]
    4430:	f007 b879 	b.w	b526 <z_shell_raw_fprintf>
	}
}
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	0000e5cd 	.word	0x0000e5cd
    443c:	0000d625 	.word	0x0000d625

00004440 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    4440:	b538      	push	{r3, r4, r5, lr}
    4442:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    4444:	7809      	ldrb	r1, [r1, #0]
{
    4446:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    4448:	f7ff ffda 	bl	4400 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    444c:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    444e:	2a07      	cmp	r2, #7
    4450:	d810      	bhi.n	4474 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    4452:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    4454:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    4458:	4291      	cmp	r1, r2
    445a:	d00b      	beq.n	4474 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    445c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    4460:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    4464:	069b      	lsls	r3, r3, #26
    4466:	d505      	bpl.n	4474 <z_shell_vt100_colors_restore+0x34>
    4468:	6960      	ldr	r0, [r4, #20]
    446a:	4903      	ldr	r1, [pc, #12]	; (4478 <z_shell_vt100_colors_restore+0x38>)
}
    446c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    4470:	f007 b859 	b.w	b526 <z_shell_raw_fprintf>
}
    4474:	bd38      	pop	{r3, r4, r5, pc}
    4476:	bf00      	nop
    4478:	0000e5d6 	.word	0x0000e5d6

0000447c <z_shell_op_word_remove>:
{
    447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    447e:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    4480:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    4482:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    4484:	2a00      	cmp	r2, #0
    4486:	d04e      	beq.n	4526 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    4488:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    448a:	2800      	cmp	r0, #0
    448c:	d04b      	beq.n	4526 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    448e:	3041      	adds	r0, #65	; 0x41
    4490:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    4492:	f103 0642 	add.w	r6, r3, #66	; 0x42
    4496:	4603      	mov	r3, r0
    4498:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    449a:	42b3      	cmp	r3, r6
    449c:	b2a4      	uxth	r4, r4
    449e:	4619      	mov	r1, r3
    44a0:	d30d      	bcc.n	44be <z_shell_op_word_remove+0x42>
    44a2:	f811 7901 	ldrb.w	r7, [r1], #-1
    44a6:	2f20      	cmp	r7, #32
    44a8:	d03b      	beq.n	4522 <z_shell_op_word_remove+0xa6>
    44aa:	4619      	mov	r1, r3
    44ac:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    44ae:	7808      	ldrb	r0, [r1, #0]
    44b0:	2820      	cmp	r0, #32
    44b2:	d004      	beq.n	44be <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    44b4:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    44b6:	429e      	cmp	r6, r3
		++chars_to_delete;
    44b8:	b2a4      	uxth	r4, r4
		--str;
    44ba:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    44bc:	d9f5      	bls.n	44aa <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    44be:	1c63      	adds	r3, r4, #1
    44c0:	1c4e      	adds	r6, r1, #1
    44c2:	1b12      	subs	r2, r2, r4
    44c4:	4419      	add	r1, r3
    44c6:	4630      	mov	r0, r6
    44c8:	f008 faf8 	bl	cabc <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    44cc:	68a9      	ldr	r1, [r5, #8]
    44ce:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    44d0:	1b12      	subs	r2, r2, r4
    44d2:	b292      	uxth	r2, r2
    44d4:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    44d6:	440a      	add	r2, r1
    44d8:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    44da:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    44dc:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    44e0:	b209      	sxth	r1, r1
    44e2:	4628      	mov	r0, r5
    44e4:	f007 f887 	bl	b5f6 <z_shell_op_cursor_move>
    44e8:	68ab      	ldr	r3, [r5, #8]
    44ea:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    44ee:	069a      	lsls	r2, r3, #26
    44f0:	d503      	bpl.n	44fa <z_shell_op_word_remove+0x7e>
    44f2:	490d      	ldr	r1, [pc, #52]	; (4528 <z_shell_op_word_remove+0xac>)
    44f4:	6968      	ldr	r0, [r5, #20]
    44f6:	f007 f816 	bl	b526 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    44fa:	4633      	mov	r3, r6
    44fc:	4a0b      	ldr	r2, [pc, #44]	; (452c <z_shell_op_word_remove+0xb0>)
    44fe:	2108      	movs	r1, #8
    4500:	4628      	mov	r0, r5
    4502:	f007 f949 	bl	b798 <z_shell_fprintf>
	z_clear_eos(shell);
    4506:	4628      	mov	r0, r5
    4508:	f7ff fefa 	bl	4300 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    450c:	68ab      	ldr	r3, [r5, #8]
    450e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    4512:	069b      	lsls	r3, r3, #26
    4514:	d507      	bpl.n	4526 <z_shell_op_word_remove+0xaa>
    4516:	6968      	ldr	r0, [r5, #20]
    4518:	4905      	ldr	r1, [pc, #20]	; (4530 <z_shell_op_word_remove+0xb4>)
}
    451a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    451e:	f007 b802 	b.w	b526 <z_shell_raw_fprintf>
    4522:	460b      	mov	r3, r1
    4524:	e7b8      	b.n	4498 <z_shell_op_word_remove+0x1c>
    4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4528:	0000d62a 	.word	0x0000d62a
    452c:	0000e0a7 	.word	0x0000e0a7
    4530:	0000d62e 	.word	0x0000d62e

00004534 <reprint_from_cursor>:
{
    4534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4538:	4604      	mov	r4, r0
    453a:	460d      	mov	r5, r1
	if (data_removed) {
    453c:	4617      	mov	r7, r2
    453e:	b10a      	cbz	r2, 4544 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    4540:	f7ff fede 	bl	4300 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    4544:	68a3      	ldr	r3, [r4, #8]
    4546:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    454a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    454c:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    454e:	f100 0042 	add.w	r0, r0, #66	; 0x42
    4552:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    4554:	d51f      	bpl.n	4596 <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4556:	4618      	mov	r0, r3
    4558:	f7fc fc2d 	bl	db6 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    455c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 45a4 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    4560:	4606      	mov	r6, r0
		while (len--) {
    4562:	b996      	cbnz	r6, 458a <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    4564:	68a3      	ldr	r3, [r4, #8]
    4566:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    4568:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    456a:	4620      	mov	r0, r4
    456c:	f006 ffe8 	bl	b540 <full_line_cmd>
    4570:	b120      	cbz	r0, 457c <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    4572:	b107      	cbz	r7, 4576 <reprint_from_cursor+0x42>
    4574:	b115      	cbz	r5, 457c <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    4576:	6960      	ldr	r0, [r4, #20]
    4578:	f7ff fece 	bl	4318 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    457c:	4269      	negs	r1, r5
    457e:	4620      	mov	r0, r4
    4580:	b209      	sxth	r1, r1
}
    4582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    4586:	f007 b836 	b.w	b5f6 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    458a:	6960      	ldr	r0, [r4, #20]
    458c:	4641      	mov	r1, r8
    458e:	f006 ffca 	bl	b526 <z_shell_raw_fprintf>
    4592:	3e01      	subs	r6, #1
    4594:	e7e5      	b.n	4562 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    4596:	4a04      	ldr	r2, [pc, #16]	; (45a8 <reprint_from_cursor+0x74>)
    4598:	2108      	movs	r1, #8
    459a:	4620      	mov	r0, r4
    459c:	f007 f8fc 	bl	b798 <z_shell_fprintf>
    45a0:	e7e0      	b.n	4564 <reprint_from_cursor+0x30>
    45a2:	bf00      	nop
    45a4:	0000ded2 	.word	0x0000ded2
    45a8:	0000e0a7 	.word	0x0000e0a7

000045ac <z_shell_op_char_insert>:
{
    45ac:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    45ae:	6883      	ldr	r3, [r0, #8]
    45b0:	f88d 1007 	strb.w	r1, [sp, #7]
    45b4:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    45b8:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    45ba:	07d0      	lsls	r0, r2, #31
    45bc:	d521      	bpl.n	4602 <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    45be:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    45c0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    45c2:	428a      	cmp	r2, r1
    45c4:	d01d      	beq.n	4602 <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    45c6:	1c48      	adds	r0, r1, #1
    45c8:	4419      	add	r1, r3
		char_replace(shell, data);
    45ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    45ce:	87d8      	strh	r0, [r3, #62]	; 0x3e
    45d0:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    45d4:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    45d8:	0789      	lsls	r1, r1, #30
    45da:	d510      	bpl.n	45fe <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    45dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    45e0:	6960      	ldr	r0, [r4, #20]
    45e2:	490b      	ldr	r1, [pc, #44]	; (4610 <z_shell_op_char_insert+0x64>)
		data = '*';
    45e4:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    45e8:	bf18      	it	ne
    45ea:	222a      	movne	r2, #42	; 0x2a
    45ec:	f006 ff9b 	bl	b526 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    45f0:	4620      	mov	r0, r4
    45f2:	f006 ffb9 	bl	b568 <z_shell_cursor_in_empty_line>
    45f6:	b110      	cbz	r0, 45fe <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    45f8:	6960      	ldr	r0, [r4, #20]
    45fa:	f7ff fe8d 	bl	4318 <z_cursor_next_line_move.isra.0>
}
    45fe:	b002      	add	sp, #8
    4600:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    4602:	2201      	movs	r2, #1
    4604:	f10d 0107 	add.w	r1, sp, #7
    4608:	4620      	mov	r0, r4
    460a:	f007 f8d2 	bl	b7b2 <data_insert>
}
    460e:	e7f6      	b.n	45fe <z_shell_op_char_insert+0x52>
    4610:	0000e5ca 	.word	0x0000e5ca

00004614 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    4614:	6883      	ldr	r3, [r0, #8]
    4616:	4a0a      	ldr	r2, [pc, #40]	; (4640 <z_shell_print_prompt_and_cmd+0x2c>)
    4618:	681b      	ldr	r3, [r3, #0]
{
    461a:	b510      	push	{r4, lr}
    461c:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    461e:	2102      	movs	r1, #2
    4620:	f007 f8ba 	bl	b798 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    4624:	68a3      	ldr	r3, [r4, #8]
    4626:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    462a:	079b      	lsls	r3, r3, #30
    462c:	d507      	bpl.n	463e <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    462e:	4620      	mov	r0, r4
    4630:	f7ff fede 	bl	43f0 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    4634:	4620      	mov	r0, r4
}
    4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    463a:	f006 bfb9 	b.w	b5b0 <z_shell_op_cursor_position_synchronize>
}
    463e:	bd10      	pop	{r4, pc}
    4640:	0000e0a7 	.word	0x0000e0a7

00004644 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    4644:	4901      	ldr	r1, [pc, #4]	; (464c <z_cursor_next_line_move.isra.0+0x8>)
    4646:	f007 b913 	b.w	b870 <z_shell_raw_fprintf>
    464a:	bf00      	nop
    464c:	0000df88 	.word	0x0000df88

00004650 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
    4650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4654:	4604      	mov	r4, r0
    4656:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    4658:	460e      	mov	r6, r1
    465a:	2900      	cmp	r1, #0
    465c:	d067      	beq.n	472e <formatted_text_print.constprop.0+0xde>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
    465e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 4734 <formatted_text_print.constprop.0+0xe4>
    4662:	2500      	movs	r5, #0
    4664:	5d73      	ldrb	r3, [r6, r5]
    4666:	f813 3009 	ldrb.w	r3, [r3, r9]
    466a:	071a      	lsls	r2, r3, #28
    466c:	d41e      	bmi.n	46ac <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    466e:	4630      	mov	r0, r6
    4670:	f7fc fba1 	bl	db6 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    4674:	68a3      	ldr	r3, [r4, #8]
    4676:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    4678:	b280      	uxth	r0, r0
    467a:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    467c:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
    4680:	4298      	cmp	r0, r3
    4682:	eb06 0a05 	add.w	sl, r6, r5
    4686:	d913      	bls.n	46b0 <formatted_text_print.constprop.0+0x60>
    4688:	4651      	mov	r1, sl
		size_t idx = 0;
    468a:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
    468c:	f811 0b01 	ldrb.w	r0, [r1], #1
    4690:	f819 c000 	ldrb.w	ip, [r9, r0]
    4694:	f01c 0f08 	tst.w	ip, #8
    4698:	d002      	beq.n	46a0 <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
    469a:	280a      	cmp	r0, #10
    469c:	d02f      	beq.n	46fe <formatted_text_print.constprop.0+0xae>
    469e:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
    46a0:	eb08 0007 	add.w	r0, r8, r7
    46a4:	4282      	cmp	r2, r0
    46a6:	d929      	bls.n	46fc <formatted_text_print.constprop.0+0xac>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
    46a8:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    46aa:	e7ef      	b.n	468c <formatted_text_print.constprop.0+0x3c>
		++offset;
    46ac:	3501      	adds	r5, #1
    46ae:	e7d9      	b.n	4664 <formatted_text_print.constprop.0+0x14>
    46b0:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
    46b2:	2700      	movs	r7, #0
    46b4:	42b8      	cmp	r0, r7
    46b6:	d016      	beq.n	46e6 <formatted_text_print.constprop.0+0x96>
				if (*(str + offset + idx) == '\n') {
    46b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    46bc:	2a0a      	cmp	r2, #10
    46be:	eb05 0907 	add.w	r9, r5, r7
    46c2:	d119      	bne.n	46f8 <formatted_text_print.constprop.0+0xa8>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    46c4:	6960      	ldr	r0, [r4, #20]
    46c6:	f006 fe1c 	bl	b302 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    46ca:	4651      	mov	r1, sl
    46cc:	463a      	mov	r2, r7
    46ce:	4620      	mov	r0, r4
    46d0:	f006 fff6 	bl	b6c0 <z_shell_write>
					z_cursor_next_line_move(shell);
    46d4:	6960      	ldr	r0, [r4, #20]
    46d6:	f7ff ffb5 	bl	4644 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
    46da:	4641      	mov	r1, r8
    46dc:	4620      	mov	r0, r4
					offset += idx + 1;
    46de:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
    46e2:	f7ff fe35 	bl	4350 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    46e6:	6960      	ldr	r0, [r4, #20]
    46e8:	1971      	adds	r1, r6, r5
    46ea:	f007 f8c1 	bl	b870 <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
    46ee:	6960      	ldr	r0, [r4, #20]
}
    46f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    46f4:	f7ff bfa6 	b.w	4644 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    46f8:	3701      	adds	r7, #1
    46fa:	e7db      	b.n	46b4 <formatted_text_print.constprop.0+0x64>
    46fc:	461f      	mov	r7, r3
    46fe:	6960      	ldr	r0, [r4, #20]
    4700:	f006 fdff 	bl	b302 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    4704:	463a      	mov	r2, r7
    4706:	4651      	mov	r1, sl
    4708:	4620      	mov	r0, r4
    470a:	f006 ffd9 	bl	b6c0 <z_shell_write>
		offset += length;
    470e:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    4710:	5d73      	ldrb	r3, [r6, r5]
    4712:	f819 3003 	ldrb.w	r3, [r9, r3]
    4716:	071b      	lsls	r3, r3, #28
    4718:	d407      	bmi.n	472a <formatted_text_print.constprop.0+0xda>
		z_cursor_next_line_move(shell);
    471a:	6960      	ldr	r0, [r4, #20]
    471c:	f7ff ff92 	bl	4644 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    4720:	4641      	mov	r1, r8
    4722:	4620      	mov	r0, r4
    4724:	f7ff fe14 	bl	4350 <z_shell_op_cursor_horiz_move>
	while (true) {
    4728:	e7a1      	b.n	466e <formatted_text_print.constprop.0+0x1e>
			++offset;
    472a:	3501      	adds	r5, #1
    472c:	e7f0      	b.n	4710 <formatted_text_print.constprop.0+0xc0>
}
    472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4732:	bf00      	nop
    4734:	0000edfb 	.word	0x0000edfb

00004738 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    4738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    473c:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    473e:	2100      	movs	r1, #0
{
    4740:	b08d      	sub	sp, #52	; 0x34
    4742:	4604      	mov	r4, r0
    4744:	4616      	mov	r6, r2
	uint16_t longest = 0U;
    4746:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    4748:	aa07      	add	r2, sp, #28
    474a:	4638      	mov	r0, r7
    474c:	f101 0801 	add.w	r8, r1, #1
    4750:	f7ff fd40 	bl	41d4 <z_shell_cmd_get>
    4754:	b9a8      	cbnz	r0, 4782 <z_shell_help_subcmd_print+0x4a>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    4756:	b18d      	cbz	r5, 477c <z_shell_help_subcmd_print+0x44>
		return;
	}

	if (description != NULL) {
    4758:	b126      	cbz	r6, 4764 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    475a:	4632      	mov	r2, r6
    475c:	2108      	movs	r1, #8
    475e:	4620      	mov	r0, r4
    4760:	f007 f81a 	bl	b798 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    4764:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 481c <z_shell_help_subcmd_print+0xe4>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
    4768:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 4820 <z_shell_help_subcmd_print+0xe8>
		for (uint16_t i = 0; i < tmp; i++) {
    476c:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    476e:	1c4b      	adds	r3, r1, #1
    4770:	aa07      	add	r2, sp, #28
    4772:	4638      	mov	r0, r7
    4774:	9303      	str	r3, [sp, #12]
    4776:	f7ff fd2d 	bl	41d4 <z_shell_cmd_get>
    477a:	b960      	cbnz	r0, 4796 <z_shell_help_subcmd_print+0x5e>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    477c:	b00d      	add	sp, #52	; 0x34
    477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    4782:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    4784:	b110      	cbz	r0, 478c <z_shell_help_subcmd_print+0x54>
    4786:	f7fc fb16 	bl	db6 <strlen>
    478a:	b280      	uxth	r0, r0
    478c:	4285      	cmp	r5, r0
    478e:	bf38      	it	cc
    4790:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    4792:	4641      	mov	r1, r8
    4794:	e7d8      	b.n	4748 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    4796:	e9d0 a900 	ldrd	sl, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    479a:	4640      	mov	r0, r8
    479c:	f7fc fb0b 	bl	db6 <strlen>
    47a0:	9004      	str	r0, [sp, #16]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    47a2:	f1ba 0f00 	cmp.w	sl, #0
    47a6:	d022      	beq.n	47ee <z_shell_help_subcmd_print+0xb6>
    47a8:	f89a 2000 	ldrb.w	r2, [sl]
    47ac:	b1fa      	cbz	r2, 47ee <z_shell_help_subcmd_print+0xb6>
		uint16_t tmp = item_name_width - strlen(item_name);
    47ae:	4650      	mov	r0, sl
    47b0:	f7fc fb01 	bl	db6 <strlen>
		char space = ' ';
    47b4:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
    47b6:	1a2e      	subs	r6, r5, r0
		char space = ' ';
    47b8:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
    47bc:	4643      	mov	r3, r8
    47be:	4a19      	ldr	r2, [pc, #100]	; (4824 <z_shell_help_subcmd_print+0xec>)
    47c0:	f8cd a000 	str.w	sl, [sp]
    47c4:	2108      	movs	r1, #8
    47c6:	4620      	mov	r0, r4
    47c8:	f006 ffe6 	bl	b798 <z_shell_fprintf>
		uint16_t tmp = item_name_width - strlen(item_name);
    47cc:	b2b6      	uxth	r6, r6
		for (uint16_t i = 0; i < tmp; i++) {
    47ce:	2300      	movs	r3, #0
    47d0:	b29a      	uxth	r2, r3
    47d2:	42b2      	cmp	r2, r6
    47d4:	d30d      	bcc.n	47f2 <z_shell_help_subcmd_print+0xba>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
    47d6:	4643      	mov	r3, r8
    47d8:	465a      	mov	r2, fp
    47da:	2108      	movs	r1, #8
    47dc:	4620      	mov	r0, r4
    47de:	f006 ffdb 	bl	b798 <z_shell_fprintf>
	if (item_help == NULL) {
    47e2:	f1b9 0f00 	cmp.w	r9, #0
    47e6:	d10e      	bne.n	4806 <z_shell_help_subcmd_print+0xce>
		z_cursor_next_line_move(shell);
    47e8:	6960      	ldr	r0, [r4, #20]
    47ea:	f7ff ff2b 	bl	4644 <z_cursor_next_line_move.isra.0>
		for (uint16_t i = 0; i < tmp; i++) {
    47ee:	9903      	ldr	r1, [sp, #12]
    47f0:	e7bd      	b.n	476e <z_shell_help_subcmd_print+0x36>
			z_shell_write(shell, &space, 1);
    47f2:	2201      	movs	r2, #1
    47f4:	f10d 011b 	add.w	r1, sp, #27
    47f8:	4620      	mov	r0, r4
    47fa:	9305      	str	r3, [sp, #20]
    47fc:	f006 ff60 	bl	b6c0 <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
    4800:	9b05      	ldr	r3, [sp, #20]
    4802:	3301      	adds	r3, #1
    4804:	e7e4      	b.n	47d0 <z_shell_help_subcmd_print+0x98>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    4806:	9b04      	ldr	r3, [sp, #16]
    4808:	1c6a      	adds	r2, r5, #1
    480a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    480e:	b292      	uxth	r2, r2
    4810:	4649      	mov	r1, r9
    4812:	4620      	mov	r0, r4
    4814:	f7ff ff1c 	bl	4650 <formatted_text_print.constprop.0>
    4818:	e7e9      	b.n	47ee <z_shell_help_subcmd_print+0xb6>
    481a:	bf00      	nop
    481c:	0000e5f1 	.word	0x0000e5f1
    4820:	0000e5df 	.word	0x0000e5df
    4824:	0000e3da 	.word	0x0000e3da

00004828 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    4828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    482a:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    482c:	6808      	ldr	r0, [r1, #0]
{
    482e:	460d      	mov	r5, r1
    4830:	b1b8      	cbz	r0, 4862 <z_shell_help_cmd_print+0x3a>
    4832:	f7fc fac0 	bl	db6 <strlen>
    4836:	b284      	uxth	r4, r0
    4838:	4f0b      	ldr	r7, [pc, #44]	; (4868 <z_shell_help_cmd_print+0x40>)
    483a:	4638      	mov	r0, r7
    483c:	f7fc fabb 	bl	db6 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    4840:	682b      	ldr	r3, [r5, #0]
    4842:	4a0a      	ldr	r2, [pc, #40]	; (486c <z_shell_help_cmd_print+0x44>)
    4844:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    4846:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    4848:	2108      	movs	r1, #8
    484a:	4630      	mov	r0, r6
    484c:	f006 ffa4 	bl	b798 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    4850:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    4852:	6869      	ldr	r1, [r5, #4]
    4854:	4622      	mov	r2, r4
    4856:	4630      	mov	r0, r6
}
    4858:	b003      	add	sp, #12
    485a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    485e:	f7ff bef7 	b.w	4650 <formatted_text_print.constprop.0>
    4862:	4604      	mov	r4, r0
    4864:	e7e8      	b.n	4838 <z_shell_help_cmd_print+0x10>
    4866:	bf00      	nop
    4868:	0000e5ed 	.word	0x0000e5ed
    486c:	0000e3da 	.word	0x0000e3da

00004870 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    4870:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    4872:	4907      	ldr	r1, [pc, #28]	; (4890 <z_shell_help_request+0x20>)
{
    4874:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    4876:	f7fc fa94 	bl	da2 <strcmp>
    487a:	b138      	cbz	r0, 488c <z_shell_help_request+0x1c>
    487c:	4905      	ldr	r1, [pc, #20]	; (4894 <z_shell_help_request+0x24>)
    487e:	4620      	mov	r0, r4
    4880:	f7fc fa8f 	bl	da2 <strcmp>
    4884:	fab0 f080 	clz	r0, r0
    4888:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    488a:	bd10      	pop	{r4, pc}
		return true;
    488c:	2001      	movs	r0, #1
    488e:	e7fc      	b.n	488a <z_shell_help_request+0x1a>
    4890:	0000e5e3 	.word	0x0000e5e3
    4894:	0000e5e6 	.word	0x0000e5e6

00004898 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    4898:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    489a:	6883      	ldr	r3, [r0, #8]
    489c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    48a0:	069b      	lsls	r3, r3, #26
{
    48a2:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    48a4:	d503      	bpl.n	48ae <cmd_resize_default+0x16>
    48a6:	4904      	ldr	r1, [pc, #16]	; (48b8 <cmd_resize_default+0x20>)
    48a8:	6940      	ldr	r0, [r0, #20]
    48aa:	f006 fff2 	bl	b892 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    48ae:	68a3      	ldr	r3, [r4, #8]
    48b0:	4a02      	ldr	r2, [pc, #8]	; (48bc <cmd_resize_default+0x24>)
    48b2:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    48b4:	2000      	movs	r0, #0
    48b6:	bd10      	pop	{r4, pc}
    48b8:	0000d632 	.word	0x0000d632
    48bc:	00500018 	.word	0x00500018

000048c0 <cmd_shell_stats_show>:
{
    48c0:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    48c2:	6983      	ldr	r3, [r0, #24]
    48c4:	4a03      	ldr	r2, [pc, #12]	; (48d4 <cmd_shell_stats_show+0x14>)
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	2108      	movs	r1, #8
    48ca:	f006 fcf2 	bl	b2b2 <shell_fprintf>
}
    48ce:	2000      	movs	r0, #0
    48d0:	bd08      	pop	{r3, pc}
    48d2:	bf00      	nop
    48d4:	0000e5f4 	.word	0x0000e5f4

000048d8 <cmd_history>:
{
    48d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    48da:	4e0f      	ldr	r6, [pc, #60]	; (4918 <cmd_history+0x40>)
{
    48dc:	4604      	mov	r4, r0
    48de:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    48e0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    48e2:	68e0      	ldr	r0, [r4, #12]
    48e4:	f10d 030e 	add.w	r3, sp, #14
    48e8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    48ec:	2101      	movs	r1, #1
    48ee:	f007 f858 	bl	b9a2 <z_shell_history_get>
		if (len) {
    48f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    48f6:	68a3      	ldr	r3, [r4, #8]
    48f8:	b150      	cbz	r0, 4910 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    48fa:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    48fe:	9300      	str	r3, [sp, #0]
    4900:	4632      	mov	r2, r6
    4902:	462b      	mov	r3, r5
    4904:	2108      	movs	r1, #8
    4906:	4620      	mov	r0, r4
    4908:	f006 fcd3 	bl	b2b2 <shell_fprintf>
	while (1) {
    490c:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    490e:	e7e7      	b.n	48e0 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    4910:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    4914:	b004      	add	sp, #16
    4916:	bd70      	pop	{r4, r5, r6, pc}
    4918:	0000e604 	.word	0x0000e604

0000491c <cmd_echo>:
	if (argc == 2) {
    491c:	2902      	cmp	r1, #2
{
    491e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    4920:	d10d      	bne.n	493e <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    4922:	6853      	ldr	r3, [r2, #4]
    4924:	9301      	str	r3, [sp, #4]
    4926:	4b0e      	ldr	r3, [pc, #56]	; (4960 <cmd_echo+0x44>)
    4928:	9300      	str	r3, [sp, #0]
    492a:	6813      	ldr	r3, [r2, #0]
    492c:	4a0d      	ldr	r2, [pc, #52]	; (4964 <cmd_echo+0x48>)
    492e:	2101      	movs	r1, #1
    4930:	f006 fcbf 	bl	b2b2 <shell_fprintf>
    4934:	f06f 0015 	mvn.w	r0, #21
}
    4938:	b003      	add	sp, #12
    493a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    493e:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    4940:	4a09      	ldr	r2, [pc, #36]	; (4968 <cmd_echo+0x4c>)
    4942:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    4946:	f013 0f02 	tst.w	r3, #2
    494a:	f04f 0108 	mov.w	r1, #8
    494e:	4b07      	ldr	r3, [pc, #28]	; (496c <cmd_echo+0x50>)
    4950:	bf18      	it	ne
    4952:	4613      	movne	r3, r2
    4954:	4a06      	ldr	r2, [pc, #24]	; (4970 <cmd_echo+0x54>)
    4956:	f006 fcac 	bl	b2b2 <shell_fprintf>
	return 0;
    495a:	2000      	movs	r0, #0
    495c:	e7ec      	b.n	4938 <cmd_echo+0x1c>
    495e:	bf00      	nop
    4960:	0000e61b 	.word	0x0000e61b
    4964:	0000e612 	.word	0x0000e612
    4968:	0000e064 	.word	0x0000e064
    496c:	0000e60e 	.word	0x0000e60e
    4970:	0000e630 	.word	0x0000e630

00004974 <cmd_clear>:
{
    4974:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4976:	6883      	ldr	r3, [r0, #8]
    4978:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    497c:	069a      	lsls	r2, r3, #26
{
    497e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    4980:	d503      	bpl.n	498a <cmd_clear+0x16>
    4982:	4907      	ldr	r1, [pc, #28]	; (49a0 <cmd_clear+0x2c>)
    4984:	6940      	ldr	r0, [r0, #20]
    4986:	f006 ff84 	bl	b892 <z_shell_raw_fprintf>
    498a:	68a3      	ldr	r3, [r4, #8]
    498c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    4990:	069b      	lsls	r3, r3, #26
    4992:	d503      	bpl.n	499c <cmd_clear+0x28>
    4994:	4903      	ldr	r1, [pc, #12]	; (49a4 <cmd_clear+0x30>)
    4996:	6960      	ldr	r0, [r4, #20]
    4998:	f006 ff7b 	bl	b892 <z_shell_raw_fprintf>
}
    499c:	2000      	movs	r0, #0
    499e:	bd10      	pop	{r4, pc}
    49a0:	0000d639 	.word	0x0000d639
    49a4:	0000d63e 	.word	0x0000d63e

000049a8 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    49a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    49aa:	2901      	cmp	r1, #1
{
    49ac:	b085      	sub	sp, #20
    49ae:	4604      	mov	r4, r0
	if (argc != 1) {
    49b0:	d00d      	beq.n	49ce <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    49b2:	6853      	ldr	r3, [r2, #4]
    49b4:	9301      	str	r3, [sp, #4]
    49b6:	4b59      	ldr	r3, [pc, #356]	; (4b1c <cmd_resize+0x174>)
    49b8:	9300      	str	r3, [sp, #0]
    49ba:	6813      	ldr	r3, [r2, #0]
    49bc:	4a58      	ldr	r2, [pc, #352]	; (4b20 <cmd_resize+0x178>)
    49be:	2101      	movs	r1, #1
    49c0:	f006 fc77 	bl	b2b2 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    49c4:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    49c8:	4628      	mov	r0, r5
    49ca:	b005      	add	sp, #20
    49cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ce:	6883      	ldr	r3, [r0, #8]
    49d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    49d4:	069a      	lsls	r2, r3, #26
    49d6:	d503      	bpl.n	49e0 <cmd_resize+0x38>
    49d8:	4952      	ldr	r1, [pc, #328]	; (4b24 <cmd_resize+0x17c>)
    49da:	6940      	ldr	r0, [r0, #20]
    49dc:	f006 ff59 	bl	b892 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    49e0:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    49e4:	4620      	mov	r0, r4
    49e6:	f7ff fc9d 	bl	4324 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    49ea:	21fa      	movs	r1, #250	; 0xfa
    49ec:	4620      	mov	r0, r4
    49ee:	f7ff fcaf 	bl	4350 <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
    49f2:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    49f4:	2500      	movs	r5, #0
    49f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    49fa:	4629      	mov	r1, r5
    49fc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    4a00:	f88d 500b 	strb.w	r5, [sp, #11]
    4a04:	f008 f874 	bl	caf0 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    4a08:	4947      	ldr	r1, [pc, #284]	; (4b28 <cmd_resize+0x180>)
    4a0a:	6960      	ldr	r0, [r4, #20]
    4a0c:	f006 ff41 	bl	b892 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    4a10:	6960      	ldr	r0, [r4, #20]
    4a12:	f006 fc76 	bl	b302 <z_shell_fprintf_buffer_flush>
    4a16:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    4a1a:	6860      	ldr	r0, [r4, #4]
    4a1c:	6803      	ldr	r3, [r0, #0]
    4a1e:	2201      	movs	r2, #1
    4a20:	691f      	ldr	r7, [r3, #16]
    4a22:	f10d 010b 	add.w	r1, sp, #11
    4a26:	ab03      	add	r3, sp, #12
    4a28:	47b8      	blx	r7
			if (cnt == 0) {
    4a2a:	9b03      	ldr	r3, [sp, #12]
    4a2c:	b953      	cbnz	r3, 4a44 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    4a2e:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    4a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4a34:	b2b6      	uxth	r6, r6
    4a36:	f007 fe94 	bl	c762 <z_impl_k_busy_wait>
    4a3a:	2e00      	cmp	r6, #0
    4a3c:	d1ed      	bne.n	4a1a <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    4a3e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4a42:	e034      	b.n	4aae <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    4a44:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    4a48:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    4a4a:	2b1b      	cmp	r3, #27
    4a4c:	d05a      	beq.n	4b04 <cmd_resize+0x15c>
    4a4e:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    4a52:	2a1b      	cmp	r2, #27
    4a54:	d1e1      	bne.n	4a1a <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    4a56:	2b52      	cmp	r3, #82	; 0x52
    4a58:	d154      	bne.n	4b04 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    4a5a:	440d      	add	r5, r1
    4a5c:	2300      	movs	r3, #0
    4a5e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    4a62:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    4a66:	2a5b      	cmp	r2, #91	; 0x5b
    4a68:	d154      	bne.n	4b14 <cmd_resize+0x16c>
    4a6a:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    4a6e:	461f      	mov	r7, r3
				buff_idx = 2U;
    4a70:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    4a72:	f815 0b01 	ldrb.w	r0, [r5], #1
    4a76:	4632      	mov	r2, r6
    4a78:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    4a7a:	f106 0601 	add.w	r6, r6, #1
    4a7e:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    4a80:	d12b      	bne.n	4ada <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    4a82:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    4a86:	d0da      	beq.n	4a3e <cmd_resize+0x96>
    4a88:	f202 1243 	addw	r2, r2, #323	; 0x143
    4a8c:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    4a90:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    4a92:	f812 5b01 	ldrb.w	r5, [r2], #1
    4a96:	bb55      	cbnz	r5, 4aee <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4a98:	2bfa      	cmp	r3, #250	; 0xfa
    4a9a:	bf28      	it	cs
    4a9c:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4a9e:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    4aa0:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4aa2:	463b      	mov	r3, r7
    4aa4:	bf28      	it	cs
    4aa6:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    4aa8:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    4aac:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    4aae:	68a3      	ldr	r3, [r4, #8]
    4ab0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    4ab4:	069b      	lsls	r3, r3, #26
    4ab6:	d503      	bpl.n	4ac0 <cmd_resize+0x118>
    4ab8:	491c      	ldr	r1, [pc, #112]	; (4b2c <cmd_resize+0x184>)
    4aba:	6960      	ldr	r0, [r4, #20]
    4abc:	f006 fee9 	bl	b892 <z_shell_raw_fprintf>
	if (err != 0) {
    4ac0:	2d00      	cmp	r5, #0
    4ac2:	d081      	beq.n	49c8 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    4ac4:	68a3      	ldr	r3, [r4, #8]
    4ac6:	4a1a      	ldr	r2, [pc, #104]	; (4b30 <cmd_resize+0x188>)
    4ac8:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    4aca:	2103      	movs	r1, #3
    4acc:	4a19      	ldr	r2, [pc, #100]	; (4b34 <cmd_resize+0x18c>)
    4ace:	4620      	mov	r0, r4
    4ad0:	f006 fbef 	bl	b2b2 <shell_fprintf>
    4ad4:	f06f 0507 	mvn.w	r5, #7
    4ad8:	e776      	b.n	49c8 <cmd_resize+0x20>
					*y = *y * 10U +
    4ada:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    4ade:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    4ae2:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    4ae4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    4ae8:	b29f      	uxth	r7, r3
					if (buff_idx >=
    4aea:	d1c2      	bne.n	4a72 <cmd_resize+0xca>
    4aec:	e7a7      	b.n	4a3e <cmd_resize+0x96>
					*x = *x * 10U +
    4aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    4af2:	3601      	adds	r6, #1
					*x = *x * 10U +
    4af4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    4af8:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    4afa:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    4afc:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    4afe:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    4b00:	d9c7      	bls.n	4a92 <cmd_resize+0xea>
    4b02:	e79c      	b.n	4a3e <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    4b04:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4b06:	3501      	adds	r5, #1
    4b08:	b2ad      	uxth	r5, r5
    4b0a:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    4b0c:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    4b10:	d983      	bls.n	4a1a <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    4b12:	2300      	movs	r3, #0
    4b14:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    4b18:	e791      	b.n	4a3e <cmd_resize+0x96>
    4b1a:	bf00      	nop
    4b1c:	0000e61b 	.word	0x0000e61b
    4b20:	0000e612 	.word	0x0000e612
    4b24:	0000d644 	.word	0x0000d644
    4b28:	0000ea3f 	.word	0x0000ea3f
    4b2c:	0000d648 	.word	0x0000d648
    4b30:	00500018 	.word	0x00500018
    4b34:	0000e641 	.word	0x0000e641

00004b38 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    4b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b3c:	4607      	mov	r7, r0
    4b3e:	b089      	sub	sp, #36	; 0x24
    4b40:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    4b42:	4689      	mov	r9, r1
    4b44:	b921      	cbnz	r1, 4b50 <z_shell_wildcard_process+0x18>
		return ret_val;
    4b46:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    4b48:	4620      	mov	r0, r4
    4b4a:	b009      	add	sp, #36	; 0x24
    4b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    4b50:	4610      	mov	r0, r2
    4b52:	f006 ffce 	bl	baf2 <z_shell_has_wildcard>
    4b56:	2800      	cmp	r0, #0
    4b58:	d0f5      	beq.n	4b46 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    4b5a:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    4b5e:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    4b60:	2402      	movs	r4, #2
    4b62:	e024      	b.n	4bae <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    4b64:	465c      	mov	r4, fp
    4b66:	e03c      	b.n	4be2 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    4b68:	4629      	mov	r1, r5
    4b6a:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    4b6e:	f008 f91a 	bl	cda6 <strstr>
	if (!completion_addr) {
    4b72:	4606      	mov	r6, r0
    4b74:	2800      	cmp	r0, #0
    4b76:	d04e      	beq.n	4c16 <z_shell_wildcard_process+0xde>
    4b78:	f7fc f91d 	bl	db6 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    4b7c:	b282      	uxth	r2, r0
    4b7e:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
    4b80:	3201      	adds	r2, #1
    4b82:	4631      	mov	r1, r6
    4b84:	4430      	add	r0, r6
    4b86:	f007 ff99 	bl	cabc <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4b8a:	4622      	mov	r2, r4
    4b8c:	4659      	mov	r1, fp
    4b8e:	4630      	mov	r0, r6
    4b90:	f007 ff86 	bl	caa0 <memcpy>
	completion_addr[cmd_len] = ' ';
    4b94:	f04f 0320 	mov.w	r3, #32
    4b98:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    4b9a:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    4b9e:	4404      	add	r4, r0
    4ba0:	3401      	adds	r4, #1
    4ba2:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    4ba6:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    4baa:	2400      	movs	r4, #0
    4bac:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    4bae:	1c4b      	adds	r3, r1, #1
    4bb0:	aa03      	add	r2, sp, #12
    4bb2:	4648      	mov	r0, r9
    4bb4:	9301      	str	r3, [sp, #4]
    4bb6:	f7ff fb0d 	bl	41d4 <z_shell_cmd_get>
    4bba:	4606      	mov	r6, r0
    4bbc:	b1f8      	cbz	r0, 4bfe <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    4bbe:	6831      	ldr	r1, [r6, #0]
    4bc0:	2200      	movs	r2, #0
    4bc2:	4628      	mov	r0, r5
    4bc4:	f006 f9d1 	bl	af6a <fnmatch>
    4bc8:	2800      	cmp	r0, #0
    4bca:	d1ef      	bne.n	4bac <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    4bcc:	f8d6 b000 	ldr.w	fp, [r6]
    4bd0:	f8d7 a008 	ldr.w	sl, [r7, #8]
    4bd4:	f1bb 0f00 	cmp.w	fp, #0
    4bd8:	d0c4      	beq.n	4b64 <z_shell_wildcard_process+0x2c>
    4bda:	4658      	mov	r0, fp
    4bdc:	f7fc f8eb 	bl	db6 <strlen>
    4be0:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    4be2:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    4be6:	3201      	adds	r2, #1
    4be8:	4422      	add	r2, r4
    4bea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    4bee:	ddbb      	ble.n	4b68 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    4bf0:	4a0a      	ldr	r2, [pc, #40]	; (4c1c <z_shell_wildcard_process+0xe4>)
    4bf2:	462b      	mov	r3, r5
    4bf4:	2103      	movs	r1, #3
    4bf6:	4638      	mov	r0, r7
    4bf8:	f006 fdce 	bl	b798 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    4bfc:	2401      	movs	r4, #1
	if (cnt > 0) {
    4bfe:	f1b8 0f00 	cmp.w	r8, #0
    4c02:	d0a1      	beq.n	4b48 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    4c04:	68b8      	ldr	r0, [r7, #8]
    4c06:	462a      	mov	r2, r5
    4c08:	f100 0140 	add.w	r1, r0, #64	; 0x40
    4c0c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    4c10:	f006 fbd5 	bl	b3be <z_shell_pattern_remove>
	return ret_val;
    4c14:	e798      	b.n	4b48 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    4c16:	2402      	movs	r4, #2
    4c18:	e7f1      	b.n	4bfe <z_shell_wildcard_process+0xc6>
    4c1a:	bf00      	nop
    4c1c:	0000ea44 	.word	0x0000ea44

00004c20 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    4c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c24:	4605      	mov	r5, r0
    4c26:	f04f 0320 	mov.w	r3, #32
    4c2a:	f3ef 8611 	mrs	r6, BASEPRI
    4c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c32:	f3bf 8f6f 	isb	sy
	return list->head;
    4c36:	4b0e      	ldr	r3, [pc, #56]	; (4c70 <pm_state_notify+0x50>)
    4c38:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4c3a:	b19c      	cbz	r4, 4c64 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    4c3c:	4f0d      	ldr	r7, [pc, #52]	; (4c74 <pm_state_notify+0x54>)
    4c3e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4c78 <pm_state_notify+0x58>
    4c42:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    4c46:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4c4a:	2d00      	cmp	r5, #0
    4c4c:	bf08      	it	eq
    4c4e:	4613      	moveq	r3, r2
		if (callback) {
    4c50:	b12b      	cbz	r3, 4c5e <pm_state_notify+0x3e>
			callback(z_power_states[_current_cpu->id].state);
    4c52:	f898 2014 	ldrb.w	r2, [r8, #20]
    4c56:	fb09 f202 	mul.w	r2, r9, r2
    4c5a:	5cb8      	ldrb	r0, [r7, r2]
    4c5c:	4798      	blx	r3
	return node->next;
    4c5e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4c60:	2c00      	cmp	r4, #0
    4c62:	d1f0      	bne.n	4c46 <pm_state_notify+0x26>
	__asm__ volatile(
    4c64:	f386 8811 	msr	BASEPRI, r6
    4c68:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c70:	200009e8 	.word	0x200009e8
    4c74:	200009f4 	.word	0x200009f4
    4c78:	20000b94 	.word	0x20000b94

00004c7c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4c7c:	f000 031f 	and.w	r3, r0, #31
    4c80:	2201      	movs	r2, #1
    4c82:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c84:	4b0a      	ldr	r3, [pc, #40]	; (4cb0 <atomic_test_and_set_bit.constprop.0+0x34>)
    4c86:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4c8a:	0940      	lsrs	r0, r0, #5
    4c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4c90:	e850 3f00 	ldrex	r3, [r0]
    4c94:	ea43 0102 	orr.w	r1, r3, r2
    4c98:	e840 1c00 	strex	ip, r1, [r0]
    4c9c:	f1bc 0f00 	cmp.w	ip, #0
    4ca0:	d1f6      	bne.n	4c90 <atomic_test_and_set_bit.constprop.0+0x14>
    4ca2:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    4ca6:	421a      	tst	r2, r3
}
    4ca8:	bf14      	ite	ne
    4caa:	2001      	movne	r0, #1
    4cac:	2000      	moveq	r0, #0
    4cae:	4770      	bx	lr
    4cb0:	20000a00 	.word	0x20000a00

00004cb4 <pm_system_resume>:

void pm_system_resume(void)
{
    4cb4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    4cb6:	4b1d      	ldr	r3, [pc, #116]	; (4d2c <pm_system_resume+0x78>)
    4cb8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4cba:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    4cbe:	f004 031f 	and.w	r3, r4, #31
    4cc2:	2201      	movs	r2, #1
    4cc4:	409a      	lsls	r2, r3
    4cc6:	4b1a      	ldr	r3, [pc, #104]	; (4d30 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4cc8:	0961      	lsrs	r1, r4, #5
{
    4cca:	b085      	sub	sp, #20
    4ccc:	43d0      	mvns	r0, r2
    4cce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4cd2:	e853 1f00 	ldrex	r1, [r3]
    4cd6:	ea01 0500 	and.w	r5, r1, r0
    4cda:	e843 5c00 	strex	ip, r5, [r3]
    4cde:	f1bc 0f00 	cmp.w	ip, #0
    4ce2:	d1f6      	bne.n	4cd2 <pm_system_resume+0x1e>
    4ce4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4ce8:	4211      	tst	r1, r2
    4cea:	d017      	beq.n	4d1c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    4cec:	4d11      	ldr	r5, [pc, #68]	; (4d34 <pm_system_resume+0x80>)
    4cee:	220c      	movs	r2, #12
    4cf0:	fb02 5204 	mla	r2, r2, r4, r5
    4cf4:	ca07      	ldmia	r2, {r0, r1, r2}
    4cf6:	ab01      	add	r3, sp, #4
    4cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    4cfc:	4a0e      	ldr	r2, [pc, #56]	; (4d38 <pm_system_resume+0x84>)
    4cfe:	b17a      	cbz	r2, 4d20 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    4d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4d04:	f006 ff9c 	bl	bc40 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    4d08:	2000      	movs	r0, #0
    4d0a:	f7ff ff89 	bl	4c20 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4d0e:	230c      	movs	r3, #12
    4d10:	435c      	muls	r4, r3
    4d12:	192a      	adds	r2, r5, r4
    4d14:	2300      	movs	r3, #0
    4d16:	512b      	str	r3, [r5, r4]
    4d18:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    4d1c:	b005      	add	sp, #20
    4d1e:	bd30      	pop	{r4, r5, pc}
    4d20:	f382 8811 	msr	BASEPRI, r2
    4d24:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4d28:	e7ee      	b.n	4d08 <pm_system_resume+0x54>
    4d2a:	bf00      	nop
    4d2c:	20000b94 	.word	0x20000b94
    4d30:	200009f0 	.word	0x200009f0
    4d34:	200009f4 	.word	0x200009f4
    4d38:	0000bc41 	.word	0x0000bc41

00004d3c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    4d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    4d40:	4b37      	ldr	r3, [pc, #220]	; (4e20 <pm_system_suspend+0xe4>)
    4d42:	4c38      	ldr	r4, [pc, #224]	; (4e24 <pm_system_suspend+0xe8>)
    4d44:	7d1d      	ldrb	r5, [r3, #20]
{
    4d46:	b088      	sub	sp, #32
    4d48:	4680      	mov	r8, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    4d4a:	4628      	mov	r0, r5
    4d4c:	f7ff ff96 	bl	4c7c <atomic_test_and_set_bit.constprop.0>
    4d50:	b960      	cbnz	r0, 4d6c <pm_system_suspend+0x30>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    4d52:	466f      	mov	r7, sp
    4d54:	4642      	mov	r2, r8
    4d56:	4629      	mov	r1, r5
    4d58:	4638      	mov	r0, r7
    4d5a:	f006 ff12 	bl	bb82 <pm_policy_next_state>
    4d5e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    4d62:	260c      	movs	r6, #12
    4d64:	fb06 4605 	mla	r6, r6, r5, r4
    4d68:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    4d6c:	230c      	movs	r3, #12
    4d6e:	436b      	muls	r3, r5
    4d70:	18e2      	adds	r2, r4, r3
    4d72:	5ce0      	ldrb	r0, [r4, r3]
    4d74:	096e      	lsrs	r6, r5, #5
    4d76:	f005 071f 	and.w	r7, r5, #31
    4d7a:	2800      	cmp	r0, #0
    4d7c:	d03b      	beq.n	4df6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    4d7e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    4d82:	d010      	beq.n	4da6 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4d84:	f8d2 e008 	ldr.w	lr, [r2, #8]
    4d88:	4827      	ldr	r0, [pc, #156]	; (4e28 <pm_system_suspend+0xec>)
    4d8a:	4a28      	ldr	r2, [pc, #160]	; (4e2c <pm_system_suspend+0xf0>)
    4d8c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    4d90:	2100      	movs	r1, #0
    4d92:	2300      	movs	r3, #0
    4d94:	fbee 010c 	umlal	r0, r1, lr, ip
    4d98:	f7fb fdd0 	bl	93c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    4d9c:	2101      	movs	r1, #1
    4d9e:	eba8 0000 	sub.w	r0, r8, r0
    4da2:	f007 fcbe 	bl	c722 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4da6:	f003 f997 	bl	80d8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    4daa:	2001      	movs	r0, #1
    4dac:	f7ff ff38 	bl	4c20 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4db0:	f3bf 8f5b 	dmb	ish
    4db4:	4b1e      	ldr	r3, [pc, #120]	; (4e30 <pm_system_suspend+0xf4>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4db6:	2201      	movs	r2, #1
    4db8:	40ba      	lsls	r2, r7
    4dba:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    4dbe:	e853 1f00 	ldrex	r1, [r3]
    4dc2:	4311      	orrs	r1, r2
    4dc4:	e843 1000 	strex	r0, r1, [r3]
    4dc8:	2800      	cmp	r0, #0
    4dca:	d1f8      	bne.n	4dbe <pm_system_suspend+0x82>
    4dcc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    4dd0:	230c      	movs	r3, #12
    4dd2:	fb03 4405 	mla	r4, r3, r5, r4
    4dd6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    4dda:	ab05      	add	r3, sp, #20
    4ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    4de0:	4a14      	ldr	r2, [pc, #80]	; (4e34 <pm_system_suspend+0xf8>)
    4de2:	b11a      	cbz	r2, 4dec <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    4de4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4de8:	f006 ff17 	bl	bc1a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    4dec:	f7ff ff62 	bl	4cb4 <pm_system_resume>
	k_sched_unlock();
    4df0:	f003 fb40 	bl	8474 <k_sched_unlock>
	bool ret = true;
    4df4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4df6:	4a10      	ldr	r2, [pc, #64]	; (4e38 <pm_system_suspend+0xfc>)
    4df8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    4dfc:	2301      	movs	r3, #1
    4dfe:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4e00:	43db      	mvns	r3, r3
    4e02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4e06:	e856 2f00 	ldrex	r2, [r6]
    4e0a:	401a      	ands	r2, r3
    4e0c:	e846 2100 	strex	r1, r2, [r6]
    4e10:	2900      	cmp	r1, #0
    4e12:	d1f8      	bne.n	4e06 <pm_system_suspend+0xca>
    4e14:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    4e18:	b008      	add	sp, #32
    4e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e1e:	bf00      	nop
    4e20:	20000b94 	.word	0x20000b94
    4e24:	200009f4 	.word	0x200009f4
    4e28:	000f423f 	.word	0x000f423f
    4e2c:	000f4240 	.word	0x000f4240
    4e30:	200009f0 	.word	0x200009f0
    4e34:	0000bc1b 	.word	0x0000bc1b
    4e38:	20000a00 	.word	0x20000a00

00004e3c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4e3c:	4901      	ldr	r1, [pc, #4]	; (4e44 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4e3e:	2210      	movs	r2, #16
	str	r2, [r1]
    4e40:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4e42:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4e44:	e000ed10 	.word	0xe000ed10

00004e48 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4e48:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4e4a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4e4c:	f380 8811 	msr	BASEPRI, r0
	isb
    4e50:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4e54:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4e58:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4e5a:	b662      	cpsie	i
	isb
    4e5c:	f3bf 8f6f 	isb	sy

	bx	lr
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop

00004e64 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4e64:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4e66:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4e68:	f381 8811 	msr	BASEPRI, r1

	wfe
    4e6c:	bf20      	wfe

	msr	BASEPRI, r0
    4e6e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4e72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4e74:	4770      	bx	lr
    4e76:	bf00      	nop

00004e78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4e78:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	db08      	blt.n	4e90 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e7e:	2201      	movs	r2, #1
    4e80:	f000 001f 	and.w	r0, r0, #31
    4e84:	fa02 f000 	lsl.w	r0, r2, r0
    4e88:	095b      	lsrs	r3, r3, #5
    4e8a:	4a02      	ldr	r2, [pc, #8]	; (4e94 <arch_irq_enable+0x1c>)
    4e8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop
    4e94:	e000e100 	.word	0xe000e100

00004e98 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4e98:	4b05      	ldr	r3, [pc, #20]	; (4eb0 <arch_irq_is_enabled+0x18>)
    4e9a:	0942      	lsrs	r2, r0, #5
    4e9c:	f000 001f 	and.w	r0, r0, #31
    4ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4ea4:	2301      	movs	r3, #1
    4ea6:	fa03 f000 	lsl.w	r0, r3, r0
}
    4eaa:	4010      	ands	r0, r2
    4eac:	4770      	bx	lr
    4eae:	bf00      	nop
    4eb0:	e000e100 	.word	0xe000e100

00004eb4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4eb4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4eb6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4eb8:	bfa8      	it	ge
    4eba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4ebe:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ec2:	bfb8      	it	lt
    4ec4:	4b06      	ldrlt	r3, [pc, #24]	; (4ee0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ec6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4eca:	bfac      	ite	ge
    4ecc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ed0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ed4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ed6:	bfb4      	ite	lt
    4ed8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4eda:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    4ede:	4770      	bx	lr
    4ee0:	e000ed14 	.word	0xe000ed14

00004ee4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4ee4:	bf30      	wfi
    b z_SysNmiOnReset
    4ee6:	f7ff bffd 	b.w	4ee4 <z_SysNmiOnReset>
    4eea:	bf00      	nop

00004eec <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4eec:	4a0f      	ldr	r2, [pc, #60]	; (4f2c <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4eee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4ef0:	4b0f      	ldr	r3, [pc, #60]	; (4f30 <z_arm_prep_c+0x44>)
    4ef2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4ef6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4efc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4f04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4f0c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4f10:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4f14:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    4f18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4f1c:	f002 fd74 	bl	7a08 <z_bss_zero>
	z_data_copy();
    4f20:	f003 fbf0 	bl	8704 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4f24:	f000 f9d6 	bl	52d4 <z_arm_interrupt_init>
	z_cstart();
    4f28:	f002 fd78 	bl	7a1c <z_cstart>
    4f2c:	00000000 	.word	0x00000000
    4f30:	e000ed00 	.word	0xe000ed00

00004f34 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4f34:	4a0a      	ldr	r2, [pc, #40]	; (4f60 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4f36:	490b      	ldr	r1, [pc, #44]	; (4f64 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4f38:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4f3a:	6809      	ldr	r1, [r1, #0]
    4f3c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f40:	4909      	ldr	r1, [pc, #36]	; (4f68 <arch_swap+0x34>)
	_current->arch.basepri = key;
    4f42:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f46:	684b      	ldr	r3, [r1, #4]
    4f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4f4c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    4f4e:	2300      	movs	r3, #0
    4f50:	f383 8811 	msr	BASEPRI, r3
    4f54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4f58:	6893      	ldr	r3, [r2, #8]
}
    4f5a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    4f5e:	4770      	bx	lr
    4f60:	20000b94 	.word	0x20000b94
    4f64:	0000dd24 	.word	0x0000dd24
    4f68:	e000ed00 	.word	0xe000ed00

00004f6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4f6c:	4913      	ldr	r1, [pc, #76]	; (4fbc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4f6e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4f70:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4f74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4f76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4f7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4f7e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4f80:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4f84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4f88:	4f0d      	ldr	r7, [pc, #52]	; (4fc0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4f8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4f8e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4f90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4f92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4f94:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    4f98:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4f9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4f9e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4fa2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4fa4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4fa6:	f000 f9dd 	bl	5364 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4faa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4fae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4fb2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4fb6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4fba:	4770      	bx	lr
    ldr r1, =_kernel
    4fbc:	20000b94 	.word	0x20000b94
    ldr v4, =_SCS_ICSR
    4fc0:	e000ed04 	.word	0xe000ed04

00004fc4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4fc4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4fc8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4fca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4fce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4fd2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4fd4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4fd8:	2902      	cmp	r1, #2
    beq _oops
    4fda:	d0ff      	beq.n	4fdc <_oops>

00004fdc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4fdc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4fde:	f006 fdd7 	bl	bb90 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4fe2:	bd01      	pop	{r0, pc}

00004fe4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4fe4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4fe8:	9b00      	ldr	r3, [sp, #0]
    4fea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4fee:	490a      	ldr	r1, [pc, #40]	; (5018 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4ff6:	9b02      	ldr	r3, [sp, #8]
    4ff8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4ffc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5004:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5008:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    500c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    500e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5010:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5012:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5016:	4770      	bx	lr
    5018:	0000aaf1 	.word	0x0000aaf1

0000501c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    501c:	4a0a      	ldr	r2, [pc, #40]	; (5048 <z_check_thread_stack_fail+0x2c>)
{
    501e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    5020:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    5022:	b178      	cbz	r0, 5044 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5024:	f113 0f16 	cmn.w	r3, #22
    5028:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    502c:	d005      	beq.n	503a <z_check_thread_stack_fail+0x1e>
    502e:	f1a0 0220 	sub.w	r2, r0, #32
    5032:	429a      	cmp	r2, r3
    5034:	d805      	bhi.n	5042 <z_check_thread_stack_fail+0x26>
    5036:	4283      	cmp	r3, r0
    5038:	d203      	bcs.n	5042 <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    503a:	4281      	cmp	r1, r0
    503c:	bf28      	it	cs
    503e:	2000      	movcs	r0, #0
    5040:	4770      	bx	lr
    5042:	2000      	movs	r0, #0
}
    5044:	4770      	bx	lr
    5046:	bf00      	nop
    5048:	20000b94 	.word	0x20000b94

0000504c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    504c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    504e:	4b09      	ldr	r3, [pc, #36]	; (5074 <arch_switch_to_main_thread+0x28>)
    5050:	6098      	str	r0, [r3, #8]
{
    5052:	460d      	mov	r5, r1
    5054:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5056:	f000 f985 	bl	5364 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    505a:	4620      	mov	r0, r4
    505c:	f385 8809 	msr	PSP, r5
    5060:	2100      	movs	r1, #0
    5062:	b663      	cpsie	if
    5064:	f381 8811 	msr	BASEPRI, r1
    5068:	f3bf 8f6f 	isb	sy
    506c:	2200      	movs	r2, #0
    506e:	2300      	movs	r3, #0
    5070:	f005 fd3e 	bl	aaf0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5074:	20000b94 	.word	0x20000b94

00005078 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5078:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    507a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    507c:	4a0b      	ldr	r2, [pc, #44]	; (50ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    507e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5080:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5082:	bf1e      	ittt	ne
	movne	r1, #0
    5084:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5086:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5088:	f007 fa32 	blne	c4f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    508c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    508e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5092:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5096:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    509a:	4905      	ldr	r1, [pc, #20]	; (50b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    509c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    509e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    50a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    50a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    50a6:	4903      	ldr	r1, [pc, #12]	; (50b4 <_isr_wrapper+0x3c>)
	bx r1
    50a8:	4708      	bx	r1
    50aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    50ac:	20000b94 	.word	0x20000b94
	ldr r1, =_sw_isr_table
    50b0:	0000d3f4 	.word	0x0000d3f4
	ldr r1, =z_arm_int_exit
    50b4:	000050b9 	.word	0x000050b9

000050b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    50b8:	4b04      	ldr	r3, [pc, #16]	; (50cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    50ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    50bc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    50be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    50c0:	d003      	beq.n	50ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    50c2:	4903      	ldr	r1, [pc, #12]	; (50d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    50c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    50c8:	600a      	str	r2, [r1, #0]

000050ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    50ca:	4770      	bx	lr
	ldr r3, =_kernel
    50cc:	20000b94 	.word	0x20000b94
	ldr r1, =_SCS_ICSR
    50d0:	e000ed04 	.word	0xe000ed04

000050d4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    50d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    50d6:	4b19      	ldr	r3, [pc, #100]	; (513c <mem_manage_fault+0x68>)
{
    50d8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    50da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    50dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    50de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    50e0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    50e2:	0790      	lsls	r0, r2, #30
    50e4:	d519      	bpl.n	511a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    50e6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    50e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50ea:	0612      	lsls	r2, r2, #24
    50ec:	d515      	bpl.n	511a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    50ee:	b119      	cbz	r1, 50f8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    50f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    50f6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    50f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    50fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    50fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50fe:	06d1      	lsls	r1, r2, #27
    5100:	d40e      	bmi.n	5120 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5104:	079a      	lsls	r2, r3, #30
    5106:	d40b      	bmi.n	5120 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5108:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    510a:	4a0c      	ldr	r2, [pc, #48]	; (513c <mem_manage_fault+0x68>)
    510c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    510e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5112:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5114:	2300      	movs	r3, #0
    5116:	7023      	strb	r3, [r4, #0]

	return reason;
}
    5118:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    511a:	f06f 0015 	mvn.w	r0, #21
    511e:	e7eb      	b.n	50f8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5120:	4b06      	ldr	r3, [pc, #24]	; (513c <mem_manage_fault+0x68>)
    5122:	685b      	ldr	r3, [r3, #4]
    5124:	051b      	lsls	r3, r3, #20
    5126:	d5ef      	bpl.n	5108 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5128:	4629      	mov	r1, r5
    512a:	f7ff ff77 	bl	501c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    512e:	2800      	cmp	r0, #0
    5130:	d0ea      	beq.n	5108 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5132:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5136:	2002      	movs	r0, #2
    5138:	e7e7      	b.n	510a <mem_manage_fault+0x36>
    513a:	bf00      	nop
    513c:	e000ed00 	.word	0xe000ed00

00005140 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5140:	4b0d      	ldr	r3, [pc, #52]	; (5178 <bus_fault.constprop.0+0x38>)
    5142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5148:	0592      	lsls	r2, r2, #22
    514a:	d508      	bpl.n	515e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    514c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    514e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5150:	0412      	lsls	r2, r2, #16
    5152:	d504      	bpl.n	515e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    5154:	b118      	cbz	r0, 515e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    515c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    515e:	4b06      	ldr	r3, [pc, #24]	; (5178 <bus_fault.constprop.0+0x38>)
    5160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5164:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5166:	bf58      	it	pl
    5168:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    516a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    516c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    516e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    5172:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5174:	7008      	strb	r0, [r1, #0]

	return reason;
}
    5176:	4770      	bx	lr
    5178:	e000ed00 	.word	0xe000ed00

0000517c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    517c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    517e:	4b4b      	ldr	r3, [pc, #300]	; (52ac <z_arm_fault+0x130>)
    5180:	685b      	ldr	r3, [r3, #4]
{
    5182:	b08b      	sub	sp, #44	; 0x2c
    5184:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5186:	f3c3 0308 	ubfx	r3, r3, #0, #9
    518a:	2500      	movs	r5, #0
    518c:	f385 8811 	msr	BASEPRI, r5
    5190:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5194:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    5198:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    519c:	d111      	bne.n	51c2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    519e:	f002 010c 	and.w	r1, r2, #12
    51a2:	2908      	cmp	r1, #8
    51a4:	d00d      	beq.n	51c2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    51a6:	0716      	lsls	r6, r2, #28
    51a8:	d401      	bmi.n	51ae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    51aa:	4604      	mov	r4, r0
			*nested_exc = true;
    51ac:	2501      	movs	r5, #1
	*recoverable = false;
    51ae:	2200      	movs	r2, #0
	switch (fault) {
    51b0:	3b03      	subs	r3, #3
	*recoverable = false;
    51b2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    51b6:	2b03      	cmp	r3, #3
    51b8:	d871      	bhi.n	529e <z_arm_fault+0x122>
    51ba:	e8df f003 	tbb	[pc, r3]
    51be:	5b04      	.short	0x5b04
    51c0:	635f      	.short	0x635f
		return NULL;
    51c2:	462c      	mov	r4, r5
    51c4:	e7f3      	b.n	51ae <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    51c6:	4a39      	ldr	r2, [pc, #228]	; (52ac <z_arm_fault+0x130>)
    51c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    51ca:	f013 0302 	ands.w	r3, r3, #2
    51ce:	d166      	bne.n	529e <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    51d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    51d2:	2900      	cmp	r1, #0
    51d4:	db15      	blt.n	5202 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    51d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    51d8:	0049      	lsls	r1, r1, #1
    51da:	d512      	bpl.n	5202 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    51dc:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    51de:	f831 0c02 	ldrh.w	r0, [r1, #-2]
    51e2:	f64d 7102 	movw	r1, #57090	; 0xdf02
    51e6:	4288      	cmp	r0, r1
    51e8:	d00a      	beq.n	5200 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    51ea:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
    51ee:	b339      	cbz	r1, 5240 <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
    51f0:	f10d 0207 	add.w	r2, sp, #7
    51f4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    51f6:	4620      	mov	r0, r4
    51f8:	f7ff ff6c 	bl	50d4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    51fc:	4603      	mov	r3, r0
		break;
    51fe:	e000      	b.n	5202 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    5200:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5202:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5206:	b9ca      	cbnz	r2, 523c <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5208:	ae02      	add	r6, sp, #8
    520a:	f104 0720 	add.w	r7, r4, #32
    520e:	6820      	ldr	r0, [r4, #0]
    5210:	6861      	ldr	r1, [r4, #4]
    5212:	4632      	mov	r2, r6
    5214:	c203      	stmia	r2!, {r0, r1}
    5216:	3408      	adds	r4, #8
    5218:	42bc      	cmp	r4, r7
    521a:	4616      	mov	r6, r2
    521c:	d1f7      	bne.n	520e <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5220:	2d00      	cmp	r5, #0
    5222:	d03e      	beq.n	52a2 <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5224:	f3c2 0108 	ubfx	r1, r2, #0, #9
    5228:	b921      	cbnz	r1, 5234 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    522a:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    522e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5232:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5234:	a902      	add	r1, sp, #8
    5236:	4618      	mov	r0, r3
    5238:	f006 fca8 	bl	bb8c <z_arm_fatal_error>
}
    523c:	b00b      	add	sp, #44	; 0x2c
    523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    5240:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    5244:	b129      	cbz	r1, 5252 <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
    5246:	f10d 0107 	add.w	r1, sp, #7
    524a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    524c:	f7ff ff78 	bl	5140 <bus_fault.constprop.0>
    5250:	e7d4      	b.n	51fc <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    5252:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
    5254:	b289      	uxth	r1, r1
    5256:	2900      	cmp	r1, #0
    5258:	d0d3      	beq.n	5202 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    525a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    525c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    525e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5260:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5262:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5264:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5266:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5268:	ea6f 4101 	mvn.w	r1, r1, lsl #16
    526c:	ea6f 4111 	mvn.w	r1, r1, lsr #16
    5270:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
    5272:	e7c6      	b.n	5202 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    5274:	f10d 0207 	add.w	r2, sp, #7
    5278:	2100      	movs	r1, #0
    527a:	e7bc      	b.n	51f6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    527c:	f10d 0107 	add.w	r1, sp, #7
    5280:	2000      	movs	r0, #0
    5282:	e7e3      	b.n	524c <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5284:	4b09      	ldr	r3, [pc, #36]	; (52ac <z_arm_fault+0x130>)
    5286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    528a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    528c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    528e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5294:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    5298:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    529c:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    529e:	2300      	movs	r3, #0
    52a0:	e7af      	b.n	5202 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    52a2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    52a6:	f022 0201 	bic.w	r2, r2, #1
    52aa:	e7c2      	b.n	5232 <z_arm_fault+0xb6>
    52ac:	e000ed00 	.word	0xe000ed00

000052b0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    52b0:	4a02      	ldr	r2, [pc, #8]	; (52bc <z_arm_fault_init+0xc>)
    52b2:	6953      	ldr	r3, [r2, #20]
    52b4:	f043 0310 	orr.w	r3, r3, #16
    52b8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    52ba:	4770      	bx	lr
    52bc:	e000ed00 	.word	0xe000ed00

000052c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    52c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    52c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    52c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    52ca:	4672      	mov	r2, lr
	bl z_arm_fault
    52cc:	f7ff ff56 	bl	517c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    52d0:	bd01      	pop	{r0, pc}
    52d2:	bf00      	nop

000052d4 <z_arm_interrupt_init>:
    52d4:	4804      	ldr	r0, [pc, #16]	; (52e8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    52d6:	2300      	movs	r3, #0
    52d8:	2120      	movs	r1, #32
    52da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    52dc:	3301      	adds	r3, #1
    52de:	2b30      	cmp	r3, #48	; 0x30
    52e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    52e4:	d1f9      	bne.n	52da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    52e6:	4770      	bx	lr
    52e8:	e000e100 	.word	0xe000e100

000052ec <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    52ec:	f008 f80c 	bl	d308 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    52f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    52f2:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    52f6:	480b      	ldr	r0, [pc, #44]	; (5324 <__start+0x38>)
    ldr r1, =0xaa
    52f8:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    52fc:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    5300:	f007 fbf6 	bl	caf0 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5304:	4807      	ldr	r0, [pc, #28]	; (5324 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5306:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    530a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    530c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5310:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5314:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5316:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5318:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    531c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5320:	f7ff fde4 	bl	4eec <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    5324:	20001de0 	.word	0x20001de0

00005328 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    5328:	4b06      	ldr	r3, [pc, #24]	; (5344 <z_impl_k_thread_abort+0x1c>)
    532a:	689b      	ldr	r3, [r3, #8]
    532c:	4283      	cmp	r3, r0
    532e:	d107      	bne.n	5340 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5330:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5334:	b123      	cbz	r3, 5340 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5336:	4a04      	ldr	r2, [pc, #16]	; (5348 <z_impl_k_thread_abort+0x20>)
    5338:	6853      	ldr	r3, [r2, #4]
    533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    533e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    5340:	f003 b978 	b.w	8634 <z_thread_abort>
    5344:	20000b94 	.word	0x20000b94
    5348:	e000ed00 	.word	0xe000ed00

0000534c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    534c:	4b02      	ldr	r3, [pc, #8]	; (5358 <z_arm_configure_static_mpu_regions+0xc>)
    534e:	4a03      	ldr	r2, [pc, #12]	; (535c <z_arm_configure_static_mpu_regions+0x10>)
    5350:	4803      	ldr	r0, [pc, #12]	; (5360 <z_arm_configure_static_mpu_regions+0x14>)
    5352:	2101      	movs	r1, #1
    5354:	f000 b870 	b.w	5438 <arm_core_mpu_configure_static_mpu_regions>
    5358:	20040000 	.word	0x20040000
    535c:	20000000 	.word	0x20000000
    5360:	0000dadc 	.word	0x0000dadc

00005364 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5364:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5368:	4b05      	ldr	r3, [pc, #20]	; (5380 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    536a:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    536c:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    536e:	4a05      	ldr	r2, [pc, #20]	; (5384 <z_arm_configure_dynamic_mpu_regions+0x20>)
    5370:	2120      	movs	r1, #32
    5372:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5376:	4618      	mov	r0, r3
    5378:	2101      	movs	r1, #1
    537a:	f000 b867 	b.w	544c <arm_core_mpu_configure_dynamic_mpu_regions>
    537e:	bf00      	nop
    5380:	20000a04 	.word	0x20000a04
    5384:	150b0000 	.word	0x150b0000

00005388 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5388:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    538a:	4f1f      	ldr	r7, [pc, #124]	; (5408 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    538c:	2600      	movs	r6, #0
    538e:	428e      	cmp	r6, r1
    5390:	db01      	blt.n	5396 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    5392:	4610      	mov	r0, r2
    5394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    5396:	6844      	ldr	r4, [r0, #4]
    5398:	b39c      	cbz	r4, 5402 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    539a:	b153      	cbz	r3, 53b2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    539c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    53a0:	ea14 0f0c 	tst.w	r4, ip
    53a4:	d118      	bne.n	53d8 <mpu_configure_regions+0x50>
		&&
    53a6:	2c1f      	cmp	r4, #31
    53a8:	d916      	bls.n	53d8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    53aa:	6805      	ldr	r5, [r0, #0]
		&&
    53ac:	ea1c 0f05 	tst.w	ip, r5
    53b0:	d112      	bne.n	53d8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    53b2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    53b4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    53b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    53ba:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    53bc:	d90f      	bls.n	53de <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    53be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    53c2:	d80e      	bhi.n	53e2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    53c4:	3c01      	subs	r4, #1
    53c6:	fab4 f484 	clz	r4, r4
    53ca:	f1c4 041f 	rsb	r4, r4, #31
    53ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    53d0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    53d2:	ea4c 0404 	orr.w	r4, ip, r4
    53d6:	d906      	bls.n	53e6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    53d8:	f06f 0215 	mvn.w	r2, #21
    53dc:	e7d9      	b.n	5392 <mpu_configure_regions+0xa>
		return REGION_32B;
    53de:	2408      	movs	r4, #8
    53e0:	e7f6      	b.n	53d0 <mpu_configure_regions+0x48>
		return REGION_4G;
    53e2:	243e      	movs	r4, #62	; 0x3e
    53e4:	e7f4      	b.n	53d0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53e6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    53ea:	4315      	orrs	r5, r2
    53ec:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    53f0:	f044 0401 	orr.w	r4, r4, #1
    53f4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53f8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    53fc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    53fe:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    5402:	3601      	adds	r6, #1
    5404:	300c      	adds	r0, #12
    5406:	e7c2      	b.n	538e <mpu_configure_regions+0x6>
    5408:	e000ed00 	.word	0xe000ed00

0000540c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    540c:	4b04      	ldr	r3, [pc, #16]	; (5420 <arm_core_mpu_enable+0x14>)
    540e:	2205      	movs	r2, #5
    5410:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    5414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5418:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    541c:	4770      	bx	lr
    541e:	bf00      	nop
    5420:	e000ed00 	.word	0xe000ed00

00005424 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5424:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5428:	4b02      	ldr	r3, [pc, #8]	; (5434 <arm_core_mpu_disable+0x10>)
    542a:	2200      	movs	r2, #0
    542c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5430:	4770      	bx	lr
    5432:	bf00      	nop
    5434:	e000ed00 	.word	0xe000ed00

00005438 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5438:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    543a:	4c03      	ldr	r4, [pc, #12]	; (5448 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    543c:	2301      	movs	r3, #1
    543e:	7822      	ldrb	r2, [r4, #0]
    5440:	f7ff ffa2 	bl	5388 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5444:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5446:	bd10      	pop	{r4, pc}
    5448:	20000c07 	.word	0x20000c07

0000544c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    544c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    544e:	4a09      	ldr	r2, [pc, #36]	; (5474 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5450:	2300      	movs	r3, #0
    5452:	7812      	ldrb	r2, [r2, #0]
    5454:	f7ff ff98 	bl	5388 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5458:	f110 0f16 	cmn.w	r0, #22
    545c:	d002      	beq.n	5464 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    545e:	4a06      	ldr	r2, [pc, #24]	; (5478 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5460:	2807      	cmp	r0, #7
    5462:	dd00      	ble.n	5466 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5464:	bd08      	pop	{r3, pc}
    5466:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    546a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    546e:	3001      	adds	r0, #1
    5470:	e7f6      	b.n	5460 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    5472:	bf00      	nop
    5474:	20000c07 	.word	0x20000c07
    5478:	e000ed00 	.word	0xe000ed00

0000547c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    547c:	4914      	ldr	r1, [pc, #80]	; (54d0 <z_arm_mpu_init+0x54>)
    547e:	6808      	ldr	r0, [r1, #0]
    5480:	2808      	cmp	r0, #8
{
    5482:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5484:	d821      	bhi.n	54ca <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5486:	f7ff ffcd 	bl	5424 <arm_core_mpu_disable>
    548a:	4c12      	ldr	r4, [pc, #72]	; (54d4 <z_arm_mpu_init+0x58>)
    548c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    548e:	2200      	movs	r2, #0
    5490:	4290      	cmp	r0, r2
    5492:	f101 010c 	add.w	r1, r1, #12
    5496:	d105      	bne.n	54a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5498:	4b0f      	ldr	r3, [pc, #60]	; (54d8 <z_arm_mpu_init+0x5c>)
    549a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    549c:	f7ff ffb6 	bl	540c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    54a0:	2000      	movs	r0, #0
}
    54a2:	bd10      	pop	{r4, pc}
    54a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54a8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    54ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    54b0:	4313      	orrs	r3, r2
    54b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54b6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
    54be:	f043 0301 	orr.w	r3, r3, #1
    54c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    54c6:	3201      	adds	r2, #1
    54c8:	e7e2      	b.n	5490 <z_arm_mpu_init+0x14>
		return -1;
    54ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    54ce:	e7e8      	b.n	54a2 <z_arm_mpu_init+0x26>
    54d0:	0000dae8 	.word	0x0000dae8
    54d4:	e000ed00 	.word	0xe000ed00
    54d8:	20000c07 	.word	0x20000c07

000054dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    54dc:	4b01      	ldr	r3, [pc, #4]	; (54e4 <__stdout_hook_install+0x8>)
    54de:	6018      	str	r0, [r3, #0]
}
    54e0:	4770      	bx	lr
    54e2:	bf00      	nop
    54e4:	2000007c 	.word	0x2000007c

000054e8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    54e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    54ea:	4f08      	ldr	r7, [pc, #32]	; (550c <z_impl_zephyr_read_stdin+0x24>)
{
    54ec:	4606      	mov	r6, r0
    54ee:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    54f0:	2400      	movs	r4, #0
    54f2:	42ac      	cmp	r4, r5
    54f4:	da08      	bge.n	5508 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    54f6:	683b      	ldr	r3, [r7, #0]
    54f8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    54fa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    54fc:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    54fe:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    5502:	d001      	beq.n	5508 <z_impl_zephyr_read_stdin+0x20>
    5504:	280d      	cmp	r0, #13
    5506:	d1f4      	bne.n	54f2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    5508:	4620      	mov	r0, r4
    550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    550c:	20000078 	.word	0x20000078

00005510 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    5510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5512:	4f0a      	ldr	r7, [pc, #40]	; (553c <z_impl_zephyr_write_stdout+0x2c>)
    5514:	460d      	mov	r5, r1
    5516:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    5518:	f1c0 0401 	rsb	r4, r0, #1
    551c:	19a3      	adds	r3, r4, r6
    551e:	429d      	cmp	r5, r3
    5520:	dc01      	bgt.n	5526 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    5522:	4628      	mov	r0, r5
    5524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    5526:	7873      	ldrb	r3, [r6, #1]
    5528:	2b0a      	cmp	r3, #10
    552a:	d102      	bne.n	5532 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    552c:	683b      	ldr	r3, [r7, #0]
    552e:	200d      	movs	r0, #13
    5530:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    5532:	683b      	ldr	r3, [r7, #0]
    5534:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    5538:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    553a:	e7ef      	b.n	551c <z_impl_zephyr_write_stdout+0xc>
    553c:	2000007c 	.word	0x2000007c

00005540 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    5540:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    5542:	4802      	ldr	r0, [pc, #8]	; (554c <_exit+0xc>)
    5544:	2105      	movs	r1, #5
    5546:	f7ff ffe3 	bl	5510 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    554a:	e7fe      	b.n	554a <_exit+0xa>
    554c:	0000ea96 	.word	0x0000ea96

00005550 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    5550:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    5552:	4c07      	ldr	r4, [pc, #28]	; (5570 <_sbrk+0x20>)
    5554:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    5556:	18c2      	adds	r2, r0, r3
    5558:	4806      	ldr	r0, [pc, #24]	; (5574 <_sbrk+0x24>)
    555a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    555e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    5562:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    5564:	bf3a      	itte	cc
    5566:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    5568:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    556a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    556e:	bd10      	pop	{r4, pc}
    5570:	20000a10 	.word	0x20000a10
    5574:	20002c68 	.word	0x20002c68

00005578 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5578:	f04f 0220 	mov.w	r2, #32
    557c:	f3ef 8311 	mrs	r3, BASEPRI
    5580:	f382 8812 	msr	BASEPRI_MAX, r2
    5584:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5588:	4a04      	ldr	r2, [pc, #16]	; (559c <nordicsemi_nrf52_init+0x24>)
    558a:	2101      	movs	r1, #1
    558c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    5590:	f383 8811 	msr	BASEPRI, r3
    5594:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5598:	2000      	movs	r0, #0
    559a:	4770      	bx	lr
    559c:	4001e000 	.word	0x4001e000

000055a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    55a0:	b120      	cbz	r0, 55ac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    55a2:	4b03      	ldr	r3, [pc, #12]	; (55b0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    55a4:	0180      	lsls	r0, r0, #6
    55a6:	f043 0301 	orr.w	r3, r3, #1
    55aa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    55ac:	4770      	bx	lr
    55ae:	bf00      	nop
    55b0:	0000d650 	.word	0x0000d650

000055b4 <bmd345_fem_init>:

#define MODE_PIN	4 /* P1.04 */
#define A_SEL_PIN	2 /* P1.02 */

static int bmd345_fem_init(const struct device *dev)
{
    55b4:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    55b6:	480a      	ldr	r0, [pc, #40]	; (55e0 <bmd345_fem_init+0x2c>)
    55b8:	f002 f9a6 	bl	7908 <z_impl_device_get_binding>
	int ret;
	const struct device *mode_asel_port_dev;

	mode_asel_port_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio1)));

	if (!mode_asel_port_dev) {
    55bc:	4604      	mov	r4, r0
    55be:	b158      	cbz	r0, 55d8 <bmd345_fem_init+0x24>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    55c0:	2104      	movs	r1, #4
    55c2:	f006 fb48 	bl	bc56 <z_impl_gpio_pin_configure.constprop.0>
		return -ENODEV;
	}

	ret = gpio_pin_configure(mode_asel_port_dev, MODE_PIN, GPIO_OUTPUT_LOW);
	if (ret < 0) {
    55c6:	2800      	cmp	r0, #0
    55c8:	db05      	blt.n	55d6 <bmd345_fem_init+0x22>
    55ca:	2102      	movs	r1, #2
    55cc:	4620      	mov	r0, r4
    55ce:	f006 fb42 	bl	bc56 <z_impl_gpio_pin_configure.constprop.0>
		return ret;
	}

	ret = gpio_pin_configure(mode_asel_port_dev, A_SEL_PIN, GPIO_OUTPUT_LOW);
	if (ret < 0) {
    55d2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return ret;
	}

	return 0;
}
    55d6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    55d8:	f06f 0012 	mvn.w	r0, #18
    55dc:	e7fb      	b.n	55d6 <bmd345_fem_init+0x22>
    55de:	bf00      	nop
    55e0:	0000eaab 	.word	0x0000eaab

000055e4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    55e4:	4b08      	ldr	r3, [pc, #32]	; (5608 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    55e6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    55e8:	1ac3      	subs	r3, r0, r3
{
    55ea:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    55ec:	4907      	ldr	r1, [pc, #28]	; (560c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    55ee:	109b      	asrs	r3, r3, #2
{
    55f0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    55f2:	4359      	muls	r1, r3
    55f4:	4806      	ldr	r0, [pc, #24]	; (5610 <onoff_stop+0x2c>)
    55f6:	2240      	movs	r2, #64	; 0x40
    55f8:	f006 fb58 	bl	bcac <stop>
	notify(mgr, res);
    55fc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    55fe:	4601      	mov	r1, r0
	notify(mgr, res);
    5600:	4620      	mov	r0, r4
}
    5602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5606:	4718      	bx	r3
    5608:	20000a24 	.word	0x20000a24
    560c:	b6db6db7 	.word	0xb6db6db7
    5610:	0000d37c 	.word	0x0000d37c

00005614 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5614:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5616:	4c0c      	ldr	r4, [pc, #48]	; (5648 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5618:	4a0c      	ldr	r2, [pc, #48]	; (564c <onoff_start+0x38>)
    561a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    561c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    561e:	9300      	str	r3, [sp, #0]
{
    5620:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5622:	460b      	mov	r3, r1
    5624:	490a      	ldr	r1, [pc, #40]	; (5650 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    5626:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5628:	4361      	muls	r1, r4
{
    562a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    562c:	4809      	ldr	r0, [pc, #36]	; (5654 <onoff_start+0x40>)
    562e:	f006 fb69 	bl	bd04 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5632:	1e01      	subs	r1, r0, #0
    5634:	da05      	bge.n	5642 <onoff_start+0x2e>
		notify(mgr, err);
    5636:	4630      	mov	r0, r6
    5638:	462b      	mov	r3, r5
	}
}
    563a:	b002      	add	sp, #8
    563c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5640:	4718      	bx	r3
}
    5642:	b002      	add	sp, #8
    5644:	bd70      	pop	{r4, r5, r6, pc}
    5646:	bf00      	nop
    5648:	20000a24 	.word	0x20000a24
    564c:	0000bd75 	.word	0x0000bd75
    5650:	b6db6db7 	.word	0xb6db6db7
    5654:	0000d37c 	.word	0x0000d37c

00005658 <hfclk_start>:
{
    5658:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    565a:	f007 f880 	bl	c75e <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    565e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5662:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    5666:	4c07      	ldr	r4, [pc, #28]	; (5684 <hfclk_start+0x2c>)
    5668:	fb02 3101 	mla	r1, r2, r1, r3
    566c:	0bc0      	lsrs	r0, r0, #15
    566e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    5672:	0bc9      	lsrs	r1, r1, #15
    5674:	e9c4 0100 	strd	r0, r1, [r4]
}
    5678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    567c:	2001      	movs	r0, #1
    567e:	f006 bd96 	b.w	c1ae <nrfx_clock_start>
    5682:	bf00      	nop
    5684:	20000450 	.word	0x20000450

00005688 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5688:	2200      	movs	r2, #0
{
    568a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    568c:	2101      	movs	r1, #1
{
    568e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5690:	4610      	mov	r0, r2
    5692:	f7ff fc0f 	bl	4eb4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    5696:	2000      	movs	r0, #0
    5698:	f7ff fbee 	bl	4e78 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    569c:	480f      	ldr	r0, [pc, #60]	; (56dc <clk_init+0x54>)
    569e:	f001 fa11 	bl	6ac4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    56a2:	4b0f      	ldr	r3, [pc, #60]	; (56e0 <clk_init+0x58>)
    56a4:	4298      	cmp	r0, r3
    56a6:	d115      	bne.n	56d4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    56a8:	f006 fd77 	bl	c19a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    56ac:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    56ae:	490d      	ldr	r1, [pc, #52]	; (56e4 <clk_init+0x5c>)
    56b0:	4630      	mov	r0, r6
    56b2:	f005 f9c1 	bl	aa38 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    56b6:	2800      	cmp	r0, #0
    56b8:	db0b      	blt.n	56d2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    56ba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    56bc:	4909      	ldr	r1, [pc, #36]	; (56e4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    56be:	2501      	movs	r5, #1
    56c0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    56c2:	f104 001c 	add.w	r0, r4, #28
    56c6:	f005 f9b7 	bl	aa38 <onoff_manager_init>
		if (err < 0) {
    56ca:	2800      	cmp	r0, #0
    56cc:	db01      	blt.n	56d2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    56ce:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    56d0:	2000      	movs	r0, #0
}
    56d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    56d4:	f06f 0004 	mvn.w	r0, #4
    56d8:	e7fb      	b.n	56d2 <clk_init+0x4a>
    56da:	bf00      	nop
    56dc:	0000571d 	.word	0x0000571d
    56e0:	0bad0000 	.word	0x0bad0000
    56e4:	0000db74 	.word	0x0000db74

000056e8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    56e8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    56ea:	230c      	movs	r3, #12
    56ec:	4809      	ldr	r0, [pc, #36]	; (5714 <clkstarted_handle.constprop.0+0x2c>)
    56ee:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    56f0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    56f2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    56f4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    56f8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    56fa:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    56fc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    56fe:	4418      	add	r0, r3
    5700:	f006 fac1 	bl	bc86 <set_on_state>
	if (callback) {
    5704:	b12d      	cbz	r5, 5712 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5706:	4632      	mov	r2, r6
    5708:	462b      	mov	r3, r5
    570a:	4803      	ldr	r0, [pc, #12]	; (5718 <clkstarted_handle.constprop.0+0x30>)
}
    570c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5710:	4718      	bx	r3
}
    5712:	bd70      	pop	{r4, r5, r6, pc}
    5714:	20000a24 	.word	0x20000a24
    5718:	0000d37c 	.word	0x0000d37c

0000571c <clock_event_handler>:
	switch (event) {
    571c:	b110      	cbz	r0, 5724 <clock_event_handler+0x8>
    571e:	2801      	cmp	r0, #1
    5720:	d004      	beq.n	572c <clock_event_handler+0x10>
    5722:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5724:	4b03      	ldr	r3, [pc, #12]	; (5734 <clock_event_handler+0x18>)
    5726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5728:	075b      	lsls	r3, r3, #29
    572a:	d101      	bne.n	5730 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    572c:	f7ff bfdc 	b.w	56e8 <clkstarted_handle.constprop.0>
}
    5730:	4770      	bx	lr
    5732:	bf00      	nop
    5734:	20000a24 	.word	0x20000a24

00005738 <generic_hfclk_start>:
{
    5738:	b508      	push	{r3, lr}
	__asm__ volatile(
    573a:	f04f 0320 	mov.w	r3, #32
    573e:	f3ef 8111 	mrs	r1, BASEPRI
    5742:	f383 8812 	msr	BASEPRI_MAX, r3
    5746:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    574a:	4a11      	ldr	r2, [pc, #68]	; (5790 <generic_hfclk_start+0x58>)
    574c:	6813      	ldr	r3, [r2, #0]
    574e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5752:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5756:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5758:	d00c      	beq.n	5774 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    575a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    575e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5762:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5766:	f013 0301 	ands.w	r3, r3, #1
    576a:	d003      	beq.n	5774 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    576c:	4809      	ldr	r0, [pc, #36]	; (5794 <generic_hfclk_start+0x5c>)
    576e:	f006 fa8a 	bl	bc86 <set_on_state>
			already_started = true;
    5772:	2301      	movs	r3, #1
	__asm__ volatile(
    5774:	f381 8811 	msr	BASEPRI, r1
    5778:	f3bf 8f6f 	isb	sy
	if (already_started) {
    577c:	b123      	cbz	r3, 5788 <generic_hfclk_start+0x50>
}
    577e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5782:	2000      	movs	r0, #0
    5784:	f7ff bfb0 	b.w	56e8 <clkstarted_handle.constprop.0>
}
    5788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    578c:	f7ff bf64 	b.w	5658 <hfclk_start>
    5790:	20000a74 	.word	0x20000a74
    5794:	20000a64 	.word	0x20000a64

00005798 <api_blocking_start>:
{
    5798:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    579a:	2200      	movs	r2, #0
    579c:	2301      	movs	r3, #1
    579e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    57a2:	ab04      	add	r3, sp, #16
    57a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    57a8:	4a09      	ldr	r2, [pc, #36]	; (57d0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    57aa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    57ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    57b0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    57b4:	f006 fad7 	bl	bd66 <api_start>
	if (err < 0) {
    57b8:	2800      	cmp	r0, #0
    57ba:	db05      	blt.n	57c8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    57bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    57c0:	2300      	movs	r3, #0
    57c2:	4668      	mov	r0, sp
    57c4:	f002 fc08 	bl	7fd8 <z_impl_k_sem_take>
}
    57c8:	b007      	add	sp, #28
    57ca:	f85d fb04 	ldr.w	pc, [sp], #4
    57ce:	bf00      	nop
    57d0:	0000bd93 	.word	0x0000bd93

000057d4 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    57d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    57d8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    57dc:	4605      	mov	r5, r0
    57de:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    57e2:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    57e6:	f04f 0320 	mov.w	r3, #32
    57ea:	f3ef 8711 	mrs	r7, BASEPRI
    57ee:	f383 8812 	msr	BASEPRI_MAX, r3
    57f2:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    57f6:	f006 ffb2 	bl	c75e <z_impl_k_uptime_ticks>
    57fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    57fe:	fba0 4003 	umull	r4, r0, r0, r3
    5802:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5806:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    580a:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    580e:	4b25      	ldr	r3, [pc, #148]	; (58a4 <cmd_status+0xd0>)
    5810:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    5814:	4b24      	ldr	r3, [pc, #144]	; (58a8 <cmd_status+0xd4>)
    5816:	0be4      	lsrs	r4, r4, #15
    5818:	f8d3 a000 	ldr.w	sl, [r3]
    581c:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
    5820:	f387 8811 	msr	BASEPRI, r7
    5824:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    5828:	4a20      	ldr	r2, [pc, #128]	; (58ac <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    582a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 58b0 <cmd_status+0xdc>
    582e:	4f21      	ldr	r7, [pc, #132]	; (58b4 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    5830:	4628      	mov	r0, r5
    5832:	2108      	movs	r1, #8
    5834:	f005 fd3d 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    5838:	f019 0f01 	tst.w	r9, #1
    583c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 58b8 <cmd_status+0xe4>
    5840:	4a1e      	ldr	r2, [pc, #120]	; (58bc <cmd_status+0xe8>)
    5842:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    5846:	9300      	str	r3, [sp, #0]
    5848:	4628      	mov	r0, r5
    584a:	bf14      	ite	ne
    584c:	4643      	movne	r3, r8
    584e:	463b      	moveq	r3, r7
    5850:	2108      	movs	r1, #8
    5852:	f005 fd2e 	bl	b2b2 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    5856:	eba4 030b 	sub.w	r3, r4, fp
    585a:	9300      	str	r3, [sp, #0]
    585c:	4628      	mov	r0, r5
    585e:	465b      	mov	r3, fp
    5860:	4a17      	ldr	r2, [pc, #92]	; (58c0 <cmd_status+0xec>)
    5862:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    5864:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    5868:	f005 fd23 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    586c:	4653      	mov	r3, sl
    586e:	4628      	mov	r0, r5
    5870:	4a14      	ldr	r2, [pc, #80]	; (58c4 <cmd_status+0xf0>)
    5872:	9400      	str	r4, [sp, #0]
    5874:	2108      	movs	r1, #8
    5876:	f005 fd1c 	bl	b2b2 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    587a:	4628      	mov	r0, r5
    587c:	4a12      	ldr	r2, [pc, #72]	; (58c8 <cmd_status+0xf4>)
    587e:	2108      	movs	r1, #8
    5880:	f005 fd17 	bl	b2b2 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    5884:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    5888:	9300      	str	r3, [sp, #0]
    588a:	4628      	mov	r0, r5
    588c:	4a0b      	ldr	r2, [pc, #44]	; (58bc <cmd_status+0xe8>)
    588e:	2e00      	cmp	r6, #0
    5890:	bf14      	ite	ne
    5892:	4643      	movne	r3, r8
    5894:	463b      	moveq	r3, r7
    5896:	2108      	movs	r1, #8
    5898:	f005 fd0b 	bl	b2b2 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    589c:	2000      	movs	r0, #0
    589e:	b003      	add	sp, #12
    58a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58a4:	20000450 	.word	0x20000450
    58a8:	20000458 	.word	0x20000458
    58ac:	0000eab7 	.word	0x0000eab7
    58b0:	0000df89 	.word	0x0000df89
    58b4:	0000eab2 	.word	0x0000eab2
    58b8:	20000a24 	.word	0x20000a24
    58bc:	0000eac2 	.word	0x0000eac2
    58c0:	0000eadc 	.word	0x0000eadc
    58c4:	0000eafe 	.word	0x0000eafe
    58c8:	0000eb1f 	.word	0x0000eb1f

000058cc <hfclk_stop>:
{
    58cc:	b510      	push	{r4, lr}
    58ce:	f006 ff46 	bl	c75e <z_impl_k_uptime_ticks>
    58d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58d6:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    58da:	4c07      	ldr	r4, [pc, #28]	; (58f8 <hfclk_stop+0x2c>)
    58dc:	fb02 3101 	mla	r1, r2, r1, r3
    58e0:	0bc0      	lsrs	r0, r0, #15
    58e2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    58e6:	0bc9      	lsrs	r1, r1, #15
    58e8:	e9c4 0100 	strd	r0, r1, [r4]
}
    58ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    58f0:	2001      	movs	r0, #1
    58f2:	f001 b8f7 	b.w	6ae4 <nrfx_clock_stop>
    58f6:	bf00      	nop
    58f8:	20000458 	.word	0x20000458

000058fc <generic_hfclk_stop>:
    58fc:	4b08      	ldr	r3, [pc, #32]	; (5920 <generic_hfclk_stop+0x24>)
    58fe:	f3bf 8f5b 	dmb	ish
    5902:	e853 2f00 	ldrex	r2, [r3]
    5906:	f022 0102 	bic.w	r1, r2, #2
    590a:	e843 1000 	strex	r0, r1, [r3]
    590e:	2800      	cmp	r0, #0
    5910:	d1f7      	bne.n	5902 <generic_hfclk_stop+0x6>
    5912:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5916:	07d3      	lsls	r3, r2, #31
    5918:	d401      	bmi.n	591e <generic_hfclk_stop+0x22>
	hfclk_stop();
    591a:	f7ff bfd7 	b.w	58cc <hfclk_stop>
}
    591e:	4770      	bx	lr
    5920:	20000a74 	.word	0x20000a74

00005924 <z_nrf_clock_control_lf_on>:
{
    5924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5928:	4939      	ldr	r1, [pc, #228]	; (5a10 <z_nrf_clock_control_lf_on+0xec>)
    592a:	f3bf 8f5b 	dmb	ish
    592e:	4607      	mov	r7, r0
    5930:	2201      	movs	r2, #1
    5932:	e851 3f00 	ldrex	r3, [r1]
    5936:	e841 2000 	strex	r0, r2, [r1]
    593a:	2800      	cmp	r0, #0
    593c:	d1f9      	bne.n	5932 <z_nrf_clock_control_lf_on+0xe>
    593e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5942:	b933      	cbnz	r3, 5952 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5944:	4933      	ldr	r1, [pc, #204]	; (5a14 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    5946:	4834      	ldr	r0, [pc, #208]	; (5a18 <z_nrf_clock_control_lf_on+0xf4>)
    5948:	604b      	str	r3, [r1, #4]
    594a:	60cb      	str	r3, [r1, #12]
    594c:	608a      	str	r2, [r1, #8]
    594e:	f005 f886 	bl	aa5e <onoff_request>
	switch (start_mode) {
    5952:	1e7b      	subs	r3, r7, #1
    5954:	2b01      	cmp	r3, #1
    5956:	d82f      	bhi.n	59b8 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5958:	2f01      	cmp	r7, #1
    595a:	d107      	bne.n	596c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    595c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5960:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5964:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5968:	2b01      	cmp	r3, #1
    596a:	d025      	beq.n	59b8 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    596c:	f006 fda8 	bl	c4c0 <k_is_in_isr>
    5970:	4604      	mov	r4, r0
    5972:	b918      	cbnz	r0, 597c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5974:	4b29      	ldr	r3, [pc, #164]	; (5a1c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    5976:	781b      	ldrb	r3, [r3, #0]
    5978:	2b00      	cmp	r3, #0
    597a:	d141      	bne.n	5a00 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    597c:	f04f 0320 	mov.w	r3, #32
    5980:	f3ef 8611 	mrs	r6, BASEPRI
    5984:	f383 8812 	msr	BASEPRI_MAX, r3
    5988:	f3bf 8f6f 	isb	sy
    598c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    598e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5a20 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5992:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    5996:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    599a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    599e:	03d2      	lsls	r2, r2, #15
    59a0:	d50c      	bpl.n	59bc <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    59a2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    59a6:	2b01      	cmp	r3, #1
    59a8:	d001      	beq.n	59ae <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    59aa:	2f01      	cmp	r7, #1
    59ac:	d106      	bne.n	59bc <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    59ae:	b30c      	cbz	r4, 59f4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    59b0:	f386 8811 	msr	BASEPRI, r6
    59b4:	f3bf 8f6f 	isb	sy
}
    59b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    59bc:	b1ac      	cbz	r4, 59ea <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    59be:	4630      	mov	r0, r6
    59c0:	f7ff fa50 	bl	4e64 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    59c4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    59c8:	2b00      	cmp	r3, #0
    59ca:	d1e4      	bne.n	5996 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59cc:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    59d0:	2a00      	cmp	r2, #0
    59d2:	d0e0      	beq.n	5996 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59d4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    59d8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    59dc:	2301      	movs	r3, #1
    59de:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    59e2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59e6:	60ab      	str	r3, [r5, #8]
}
    59e8:	e7d5      	b.n	5996 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    59ea:	2100      	movs	r1, #0
    59ec:	2021      	movs	r0, #33	; 0x21
    59ee:	f002 fdf1 	bl	85d4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    59f2:	e7e7      	b.n	59c4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    59f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59f8:	2202      	movs	r2, #2
    59fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    59fe:	e7db      	b.n	59b8 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    5a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a04:	2202      	movs	r2, #2
    5a06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5a0a:	4606      	mov	r6, r0
}
    5a0c:	e7bf      	b.n	598e <z_nrf_clock_control_lf_on+0x6a>
    5a0e:	bf00      	nop
    5a10:	20000a78 	.word	0x20000a78
    5a14:	20000a14 	.word	0x20000a14
    5a18:	20000a40 	.word	0x20000a40
    5a1c:	20001038 	.word	0x20001038
    5a20:	e000e100 	.word	0xe000e100

00005a24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5a24:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5a26:	4b08      	ldr	r3, [pc, #32]	; (5a48 <uart_console_init+0x24>)
    5a28:	4808      	ldr	r0, [pc, #32]	; (5a4c <uart_console_init+0x28>)
    5a2a:	6018      	str	r0, [r3, #0]
    5a2c:	f006 fcff 	bl	c42e <z_device_ready>
    5a30:	b138      	cbz	r0, 5a42 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    5a32:	4807      	ldr	r0, [pc, #28]	; (5a50 <uart_console_init+0x2c>)
    5a34:	f7ff fd52 	bl	54dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    5a38:	4805      	ldr	r0, [pc, #20]	; (5a50 <uart_console_init+0x2c>)
    5a3a:	f7fc f8b3 	bl	1ba4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    5a3e:	2000      	movs	r0, #0
}
    5a40:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5a42:	f06f 0012 	mvn.w	r0, #18
    5a46:	e7fb      	b.n	5a40 <uart_console_init+0x1c>
    5a48:	20000a7c 	.word	0x20000a7c
    5a4c:	0000d3c4 	.word	0x0000d3c4
    5a50:	00005a55 	.word	0x00005a55

00005a54 <console_out>:
	if ('\n' == c) {
    5a54:	280a      	cmp	r0, #10
{
    5a56:	b538      	push	{r3, r4, r5, lr}
    5a58:	4d07      	ldr	r5, [pc, #28]	; (5a78 <console_out+0x24>)
    5a5a:	4604      	mov	r4, r0
	if ('\n' == c) {
    5a5c:	d104      	bne.n	5a68 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    5a5e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    5a60:	6883      	ldr	r3, [r0, #8]
    5a62:	210d      	movs	r1, #13
    5a64:	685b      	ldr	r3, [r3, #4]
    5a66:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5a68:	6828      	ldr	r0, [r5, #0]
    5a6a:	6883      	ldr	r3, [r0, #8]
    5a6c:	b2e1      	uxtb	r1, r4
    5a6e:	685b      	ldr	r3, [r3, #4]
    5a70:	4798      	blx	r3
}
    5a72:	4620      	mov	r0, r4
    5a74:	bd38      	pop	{r3, r4, r5, pc}
    5a76:	bf00      	nop
    5a78:	20000a7c 	.word	0x20000a7c

00005a7c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5a7c:	b530      	push	{r4, r5, lr}
	return port->config;
    5a7e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5a80:	7b04      	ldrb	r4, [r0, #12]
    5a82:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5a86:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5a8a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    5a8e:	b085      	sub	sp, #20
    5a90:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    5a94:	d104      	bne.n	5aa0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    5a96:	4628      	mov	r0, r5
    5a98:	f001 fad2 	bl	7040 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    5a9c:	2000      	movs	r0, #0
    5a9e:	e032      	b.n	5b06 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    5aa0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5aa4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5aa8:	d12f      	bne.n	5b0a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    5aae:	bf0c      	ite	eq
    5ab0:	2304      	moveq	r3, #4
    5ab2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ab4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5ab8:	6883      	ldr	r3, [r0, #8]
    5aba:	fa23 f101 	lsr.w	r1, r3, r1
    5abe:	07c9      	lsls	r1, r1, #31
    5ac0:	d42f      	bmi.n	5b22 <gpio_nrfx_pin_interrupt_configure+0xa6>
    5ac2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5ac6:	d12c      	bne.n	5b22 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    5ac8:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    5aca:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5acc:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    5ad0:	4a1c      	ldr	r2, [pc, #112]	; (5b44 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5ad2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5ad6:	bf18      	it	ne
    5ad8:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5ae0:	07db      	lsls	r3, r3, #31
    5ae2:	d41e      	bmi.n	5b22 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5ae4:	f10d 0407 	add.w	r4, sp, #7
    5ae8:	4621      	mov	r1, r4
    5aea:	4628      	mov	r0, r5
    5aec:	f001 fa0c 	bl	6f08 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5af0:	4b15      	ldr	r3, [pc, #84]	; (5b48 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    5af2:	4298      	cmp	r0, r3
    5af4:	d114      	bne.n	5b20 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    5af6:	4620      	mov	r0, r4
    5af8:	f001 fa54 	bl	6fa4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5afc:	4b13      	ldr	r3, [pc, #76]	; (5b4c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    5afe:	4298      	cmp	r0, r3
    5b00:	d00e      	beq.n	5b20 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    5b02:	f06f 000b 	mvn.w	r0, #11
}
    5b06:	b005      	add	sp, #20
    5b08:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5b0a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5b0e:	d005      	beq.n	5b1c <gpio_nrfx_pin_interrupt_configure+0xa0>
    5b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    5b14:	bf0c      	ite	eq
    5b16:	2302      	moveq	r3, #2
    5b18:	2301      	movne	r3, #1
    5b1a:	e7cb      	b.n	5ab4 <gpio_nrfx_pin_interrupt_configure+0x38>
    5b1c:	2303      	movs	r3, #3
    5b1e:	e7c9      	b.n	5ab4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    5b20:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5b22:	2300      	movs	r3, #0
    5b24:	4619      	mov	r1, r3
    5b26:	aa02      	add	r2, sp, #8
    5b28:	4628      	mov	r0, r5
    5b2a:	f001 f8c7 	bl	6cbc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5b2e:	4b07      	ldr	r3, [pc, #28]	; (5b4c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    5b30:	4298      	cmp	r0, r3
    5b32:	d104      	bne.n	5b3e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5b34:	2101      	movs	r1, #1
    5b36:	4628      	mov	r0, r5
    5b38:	f001 fa3a 	bl	6fb0 <nrfx_gpiote_trigger_enable>
    5b3c:	e7ae      	b.n	5a9c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    5b3e:	f06f 0004 	mvn.w	r0, #4
    5b42:	e7e0      	b.n	5b06 <gpio_nrfx_pin_interrupt_configure+0x8a>
    5b44:	50000300 	.word	0x50000300
    5b48:	0bad0004 	.word	0x0bad0004
    5b4c:	0bad0000 	.word	0x0bad0000

00005b50 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5b50:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5b52:	f001 fa17 	bl	6f84 <nrfx_gpiote_is_init>
    5b56:	4604      	mov	r4, r0
    5b58:	b968      	cbnz	r0, 5b76 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5b5a:	f001 f9eb 	bl	6f34 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5b5e:	4b08      	ldr	r3, [pc, #32]	; (5b80 <gpio_nrfx_init+0x30>)
    5b60:	4298      	cmp	r0, r3
    5b62:	d10a      	bne.n	5b7a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5b64:	4807      	ldr	r0, [pc, #28]	; (5b84 <gpio_nrfx_init+0x34>)
    5b66:	4621      	mov	r1, r4
    5b68:	f001 f9c8 	bl	6efc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5b6c:	4622      	mov	r2, r4
    5b6e:	2105      	movs	r1, #5
    5b70:	2006      	movs	r0, #6
    5b72:	f7ff f99f 	bl	4eb4 <z_arm_irq_priority_set>
		return 0;
    5b76:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5b78:	bd10      	pop	{r4, pc}
		return -EIO;
    5b7a:	f06f 0004 	mvn.w	r0, #4
    5b7e:	e7fb      	b.n	5b78 <gpio_nrfx_init+0x28>
    5b80:	0bad0000 	.word	0x0bad0000
    5b84:	00005b89 	.word	0x00005b89

00005b88 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5b88:	0942      	lsrs	r2, r0, #5
{
    5b8a:	b570      	push	{r4, r5, r6, lr}
    5b8c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5b8e:	d002      	beq.n	5b96 <nrfx_gpio_handler+0xe>
    5b90:	2a01      	cmp	r2, #1
    5b92:	d015      	beq.n	5bc0 <nrfx_gpio_handler+0x38>
}
    5b94:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5b96:	4e0b      	ldr	r6, [pc, #44]	; (5bc4 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5b98:	6932      	ldr	r2, [r6, #16]
    5b9a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5b9c:	2900      	cmp	r1, #0
    5b9e:	d0f9      	beq.n	5b94 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    5ba0:	f003 031f 	and.w	r3, r3, #31
    5ba4:	2501      	movs	r5, #1
    5ba6:	680c      	ldr	r4, [r1, #0]
    5ba8:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    5baa:	688a      	ldr	r2, [r1, #8]
    5bac:	402a      	ands	r2, r5
    5bae:	d002      	beq.n	5bb6 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5bb0:	684b      	ldr	r3, [r1, #4]
    5bb2:	4630      	mov	r0, r6
    5bb4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5bb6:	2c00      	cmp	r4, #0
    5bb8:	d0ec      	beq.n	5b94 <nrfx_gpio_handler+0xc>
    5bba:	4621      	mov	r1, r4
    5bbc:	6824      	ldr	r4, [r4, #0]
    5bbe:	e7f4      	b.n	5baa <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5bc0:	4e01      	ldr	r6, [pc, #4]	; (5bc8 <nrfx_gpio_handler+0x40>)
    5bc2:	e7e9      	b.n	5b98 <nrfx_gpio_handler+0x10>
    5bc4:	0000d394 	.word	0x0000d394
    5bc8:	0000d3ac 	.word	0x0000d3ac

00005bcc <gpio_nrfx_pin_configure>:
{
    5bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    5bce:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5bd0:	7b3b      	ldrb	r3, [r7, #12]
    5bd2:	f001 051f 	and.w	r5, r1, #31
{
    5bd6:	b085      	sub	sp, #20
    5bd8:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5bda:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5bde:	4614      	mov	r4, r2
    5be0:	b9c2      	cbnz	r2, 5c14 <gpio_nrfx_pin_configure+0x48>
	err = nrfx_gpiote_channel_get(pin, &ch);
    5be2:	a902      	add	r1, sp, #8
    5be4:	4628      	mov	r0, r5
    5be6:	f001 f98f 	bl	6f08 <nrfx_gpiote_channel_get>
    5bea:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5bec:	4628      	mov	r0, r5
    5bee:	f001 fa4f 	bl	7090 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5bf2:	4b41      	ldr	r3, [pc, #260]	; (5cf8 <gpio_nrfx_pin_configure+0x12c>)
    5bf4:	4298      	cmp	r0, r3
    5bf6:	d003      	beq.n	5c00 <gpio_nrfx_pin_configure+0x34>
		return -EIO;
    5bf8:	f06f 0004 	mvn.w	r0, #4
}
    5bfc:	b005      	add	sp, #20
    5bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (free_ch) {
    5c00:	4284      	cmp	r4, r0
    5c02:	d105      	bne.n	5c10 <gpio_nrfx_pin_configure+0x44>
		err = nrfx_gpiote_channel_free(ch);
    5c04:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5c08:	f001 f9c6 	bl	6f98 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5c0c:	42a0      	cmp	r0, r4
    5c0e:	d1f3      	bne.n	5bf8 <gpio_nrfx_pin_configure+0x2c>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5c10:	2000      	movs	r0, #0
    5c12:	e7f3      	b.n	5bfc <gpio_nrfx_pin_configure+0x30>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5c14:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5c16:	4619      	mov	r1, r3
    5c18:	aa02      	add	r2, sp, #8
    5c1a:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5c1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5c20:	f001 f84c 	bl	6cbc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5c24:	4b34      	ldr	r3, [pc, #208]	; (5cf8 <gpio_nrfx_pin_configure+0x12c>)
    5c26:	4298      	cmp	r0, r3
    5c28:	d002      	beq.n	5c30 <gpio_nrfx_pin_configure+0x64>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5c2a:	f06f 0015 	mvn.w	r0, #21
    5c2e:	e7e5      	b.n	5bfc <gpio_nrfx_pin_configure+0x30>
	if (flags & GPIO_OUTPUT) {
    5c30:	05a3      	lsls	r3, r4, #22
    5c32:	d54e      	bpl.n	5cd2 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5c34:	4b31      	ldr	r3, [pc, #196]	; (5cfc <gpio_nrfx_pin_configure+0x130>)
    5c36:	4a32      	ldr	r2, [pc, #200]	; (5d00 <gpio_nrfx_pin_configure+0x134>)
    5c38:	4023      	ands	r3, r4
    5c3a:	4293      	cmp	r3, r2
    5c3c:	d03a      	beq.n	5cb4 <gpio_nrfx_pin_configure+0xe8>
    5c3e:	d80c      	bhi.n	5c5a <gpio_nrfx_pin_configure+0x8e>
    5c40:	2b06      	cmp	r3, #6
    5c42:	d014      	beq.n	5c6e <gpio_nrfx_pin_configure+0xa2>
    5c44:	d804      	bhi.n	5c50 <gpio_nrfx_pin_configure+0x84>
    5c46:	b193      	cbz	r3, 5c6e <gpio_nrfx_pin_configure+0xa2>
    5c48:	2b02      	cmp	r3, #2
    5c4a:	d1ee      	bne.n	5c2a <gpio_nrfx_pin_configure+0x5e>
    5c4c:	2304      	movs	r3, #4
    5c4e:	e00e      	b.n	5c6e <gpio_nrfx_pin_configure+0xa2>
    5c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5c54:	d1e9      	bne.n	5c2a <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_H0S1;
    5c56:	2301      	movs	r3, #1
    5c58:	e009      	b.n	5c6e <gpio_nrfx_pin_configure+0xa2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5c5a:	4a2a      	ldr	r2, [pc, #168]	; (5d04 <gpio_nrfx_pin_configure+0x138>)
    5c5c:	4293      	cmp	r3, r2
    5c5e:	d02b      	beq.n	5cb8 <gpio_nrfx_pin_configure+0xec>
    5c60:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    5c64:	d02a      	beq.n	5cbc <gpio_nrfx_pin_configure+0xf0>
    5c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    5c6a:	d1de      	bne.n	5c2a <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_S0H1;
    5c6c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    5c6e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5c72:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    5c76:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    5c7a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5c7c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    5c80:	bf54      	ite	pl
    5c82:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5c86:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5c88:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    5c8a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5c8e:	d517      	bpl.n	5cc0 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	2101      	movs	r1, #1
    5c94:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    5c98:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5c9c:	2200      	movs	r2, #0
    5c9e:	a901      	add	r1, sp, #4
    5ca0:	4628      	mov	r0, r5
    5ca2:	f001 f8b9 	bl	6e18 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5ca6:	4b14      	ldr	r3, [pc, #80]	; (5cf8 <gpio_nrfx_pin_configure+0x12c>)
    5ca8:	4298      	cmp	r0, r3
    5caa:	bf14      	ite	ne
    5cac:	f06f 0015 	mvnne.w	r0, #21
    5cb0:	2000      	moveq	r0, #0
    5cb2:	e7a3      	b.n	5bfc <gpio_nrfx_pin_configure+0x30>
		*drive = NRF_GPIO_PIN_H0D1;
    5cb4:	2307      	movs	r3, #7
    5cb6:	e7da      	b.n	5c6e <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_D0H1;
    5cb8:	2305      	movs	r3, #5
    5cba:	e7d8      	b.n	5c6e <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_H0H1;
    5cbc:	2303      	movs	r3, #3
    5cbe:	e7d6      	b.n	5c6e <gpio_nrfx_pin_configure+0xa2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5cc0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5cc2:	bf41      	itttt	mi
    5cc4:	687b      	ldrmi	r3, [r7, #4]
    5cc6:	2101      	movmi	r1, #1
    5cc8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    5ccc:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    5cd0:	e7e4      	b.n	5c9c <gpio_nrfx_pin_configure+0xd0>
	if (flags & GPIO_PULL_UP) {
    5cd2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5cd4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5cd8:	bf54      	ite	pl
    5cda:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    5cde:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5ce0:	461a      	mov	r2, r3
    5ce2:	a901      	add	r1, sp, #4
    5ce4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5ce6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5cea:	f000 ffe7 	bl	6cbc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5cee:	4b02      	ldr	r3, [pc, #8]	; (5cf8 <gpio_nrfx_pin_configure+0x12c>)
    5cf0:	4298      	cmp	r0, r3
    5cf2:	d08d      	beq.n	5c10 <gpio_nrfx_pin_configure+0x44>
    5cf4:	e799      	b.n	5c2a <gpio_nrfx_pin_configure+0x5e>
    5cf6:	bf00      	nop
    5cf8:	0bad0000 	.word	0x0bad0000
    5cfc:	00f00006 	.word	0x00f00006
    5d00:	00100006 	.word	0x00100006
    5d04:	00400002 	.word	0x00400002

00005d08 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    5d08:	b510      	push	{r4, lr}
    5d0a:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
    5d0c:	4905      	ldr	r1, [pc, #20]	; (5d24 <device_name_get+0x1c>)
    5d0e:	f005 fbd6 	bl	b4be <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    5d12:	b100      	cbz	r0, 5d16 <device_name_get+0xe>
    5d14:	6800      	ldr	r0, [r0, #0]
    5d16:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
    5d18:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
    5d1a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
    5d1e:	60e3      	str	r3, [r4, #12]
}
    5d20:	bd10      	pop	{r4, pc}
    5d22:	bf00      	nop
    5d24:	0000eb6f 	.word	0x0000eb6f

00005d28 <cmd_i2c_write_byte>:
{
    5d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5d2c:	4605      	mov	r5, r0
    5d2e:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    5d30:	6850      	ldr	r0, [r2, #4]
    5d32:	f001 fde9 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    5d36:	4606      	mov	r6, r0
    5d38:	b950      	cbnz	r0, 5d50 <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
    5d3a:	4628      	mov	r0, r5
    5d3c:	6863      	ldr	r3, [r4, #4]
    5d3e:	4a1b      	ldr	r2, [pc, #108]	; (5dac <cmd_i2c_write_byte+0x84>)
    5d40:	2101      	movs	r1, #1
    5d42:	f005 fab6 	bl	b2b2 <shell_fprintf>
		return -ENODEV;
    5d46:	f06f 0012 	mvn.w	r0, #18
}
    5d4a:	b004      	add	sp, #16
    5d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5d50:	2210      	movs	r2, #16
    5d52:	2100      	movs	r1, #0
    5d54:	68a0      	ldr	r0, [r4, #8]
    5d56:	f003 fcad 	bl	96b4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5d5a:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5d5c:	4607      	mov	r7, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5d5e:	2100      	movs	r1, #0
    5d60:	68e0      	ldr	r0, [r4, #12]
    5d62:	f003 fca7 	bl	96b4 <strtol>
	out_byte = strtol(argv[4], NULL, 16);
    5d66:	2210      	movs	r2, #16
	reg_addr = strtol(argv[3], NULL, 16);
    5d68:	4680      	mov	r8, r0
	out_byte = strtol(argv[4], NULL, 16);
    5d6a:	2100      	movs	r1, #0
    5d6c:	6920      	ldr	r0, [r4, #16]
    5d6e:	f003 fca1 	bl	96b4 <strtol>
	msg.len = num_bytes;
    5d72:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
    5d74:	f88d 0001 	strb.w	r0, [sp, #1]
    5d78:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5d7a:	f88d 300c 	strb.w	r3, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    5d7e:	2201      	movs	r2, #1
    5d80:	b2bb      	uxth	r3, r7
    5d82:	a901      	add	r1, sp, #4
    5d84:	4630      	mov	r0, r6
    5d86:	f88d 8000 	strb.w	r8, [sp]
	msg.buf = (uint8_t *)buf;
    5d8a:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
    5d8e:	f006 f854 	bl	be3a <i2c_transfer>
    5d92:	2800      	cmp	r0, #0
    5d94:	da08      	bge.n	5da8 <cmd_i2c_write_byte+0x80>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    5d96:	4628      	mov	r0, r5
    5d98:	6863      	ldr	r3, [r4, #4]
    5d9a:	4a05      	ldr	r2, [pc, #20]	; (5db0 <cmd_i2c_write_byte+0x88>)
    5d9c:	2101      	movs	r1, #1
    5d9e:	f005 fa88 	bl	b2b2 <shell_fprintf>
		return -EIO;
    5da2:	f06f 0004 	mvn.w	r0, #4
    5da6:	e7d0      	b.n	5d4a <cmd_i2c_write_byte+0x22>
	return 0;
    5da8:	2000      	movs	r0, #0
    5daa:	e7ce      	b.n	5d4a <cmd_i2c_write_byte+0x22>
    5dac:	0000eb74 	.word	0x0000eb74
    5db0:	0000eb96 	.word	0x0000eb96

00005db4 <cmd_i2c_read>:
{
    5db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5db8:	4606      	mov	r6, r0
    5dba:	b08d      	sub	sp, #52	; 0x34
	dev = device_get_binding(argv[1]);
    5dbc:	6850      	ldr	r0, [r2, #4]
{
    5dbe:	460f      	mov	r7, r1
    5dc0:	4614      	mov	r4, r2
    5dc2:	f001 fda1 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    5dc6:	4680      	mov	r8, r0
    5dc8:	b950      	cbnz	r0, 5de0 <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5dca:	4630      	mov	r0, r6
    5dcc:	6863      	ldr	r3, [r4, #4]
    5dce:	4a27      	ldr	r2, [pc, #156]	; (5e6c <cmd_i2c_read+0xb8>)
    5dd0:	2101      	movs	r1, #1
    5dd2:	f005 fa6e 	bl	b2b2 <shell_fprintf>
		return -ENODEV;
    5dd6:	f06f 0012 	mvn.w	r0, #18
}
    5dda:	b00d      	add	sp, #52	; 0x34
    5ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5de0:	2210      	movs	r2, #16
    5de2:	2100      	movs	r1, #0
    5de4:	68a0      	ldr	r0, [r4, #8]
    5de6:	f003 fc65 	bl	96b4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5dea:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5dec:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5dee:	2100      	movs	r1, #0
    5df0:	68e0      	ldr	r0, [r4, #12]
    5df2:	f003 fc5f 	bl	96b4 <strtol>
	if (argc > 4) {
    5df6:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
    5df8:	4605      	mov	r5, r0
	if (argc > 4) {
    5dfa:	d92d      	bls.n	5e58 <cmd_i2c_read+0xa4>
		num_bytes = strtol(argv[4], NULL, 16);
    5dfc:	6920      	ldr	r0, [r4, #16]
    5dfe:	2210      	movs	r2, #16
    5e00:	2100      	movs	r1, #0
    5e02:	f003 fc57 	bl	96b4 <strtol>
		if (num_bytes > MAX_I2C_BYTES)
    5e06:	2810      	cmp	r0, #16
    5e08:	bfa8      	it	ge
    5e0a:	2010      	movge	r0, #16
    5e0c:	4607      	mov	r7, r0
	msg[0].buf = (uint8_t *)write_buf;
    5e0e:	f10d 0307 	add.w	r3, sp, #7
    5e12:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5e14:	2307      	movs	r3, #7
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    5e16:	f88d 5007 	strb.w	r5, [sp, #7]
    5e1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	msg[0].flags = I2C_MSG_WRITE;
    5e1e:	2500      	movs	r5, #0
	msg[0].len = num_write;
    5e20:	f04f 0b01 	mov.w	fp, #1
	msg[1].buf = (uint8_t *)read_buf;
    5e24:	f10d 0a08 	add.w	sl, sp, #8
	return i2c_transfer(dev, msg, 2, addr);
    5e28:	fa1f f389 	uxth.w	r3, r9
    5e2c:	2202      	movs	r2, #2
    5e2e:	a906      	add	r1, sp, #24
    5e30:	4640      	mov	r0, r8
	msg[1].len = num_read;
    5e32:	e9cd a709 	strd	sl, r7, [sp, #36]	; 0x24
	msg[0].len = num_write;
    5e36:	f8cd b01c 	str.w	fp, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    5e3a:	f88d 5020 	strb.w	r5, [sp, #32]
	return i2c_transfer(dev, msg, 2, addr);
    5e3e:	f005 fffc 	bl	be3a <i2c_transfer>
    5e42:	42a8      	cmp	r0, r5
    5e44:	da0a      	bge.n	5e5c <cmd_i2c_read+0xa8>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    5e46:	4630      	mov	r0, r6
    5e48:	6863      	ldr	r3, [r4, #4]
    5e4a:	4a09      	ldr	r2, [pc, #36]	; (5e70 <cmd_i2c_read+0xbc>)
    5e4c:	4659      	mov	r1, fp
    5e4e:	f005 fa30 	bl	b2b2 <shell_fprintf>
		return -EIO;
    5e52:	f06f 0004 	mvn.w	r0, #4
    5e56:	e7c0      	b.n	5dda <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
    5e58:	2710      	movs	r7, #16
    5e5a:	e7d8      	b.n	5e0e <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
    5e5c:	4630      	mov	r0, r6
    5e5e:	463a      	mov	r2, r7
    5e60:	4651      	mov	r1, sl
    5e62:	f005 fa33 	bl	b2cc <shell_hexdump>
	return 0;
    5e66:	4628      	mov	r0, r5
    5e68:	e7b7      	b.n	5dda <cmd_i2c_read+0x26>
    5e6a:	bf00      	nop
    5e6c:	0000eb74 	.word	0x0000eb74
    5e70:	0000ebb5 	.word	0x0000ebb5

00005e74 <cmd_i2c_scan>:
{
    5e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e78:	4604      	mov	r4, r0
    5e7a:	b087      	sub	sp, #28
	dev = device_get_binding(argv[1]);
    5e7c:	6850      	ldr	r0, [r2, #4]
{
    5e7e:	4617      	mov	r7, r2
    5e80:	f001 fd42 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    5e84:	4681      	mov	r9, r0
    5e86:	b950      	cbnz	r0, 5e9e <cmd_i2c_scan+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    5e88:	4620      	mov	r0, r4
    5e8a:	687b      	ldr	r3, [r7, #4]
    5e8c:	4a2a      	ldr	r2, [pc, #168]	; (5f38 <cmd_i2c_scan+0xc4>)
    5e8e:	2101      	movs	r1, #1
    5e90:	f005 fa0f 	bl	b2b2 <shell_fprintf>
		return -ENODEV;
    5e94:	f06f 0012 	mvn.w	r0, #18
}
    5e98:	b007      	add	sp, #28
    5e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
    5e9e:	4a27      	ldr	r2, [pc, #156]	; (5f3c <cmd_i2c_scan+0xc8>)
    5ea0:	2108      	movs	r1, #8
    5ea2:	4620      	mov	r0, r4
    5ea4:	f005 fa05 	bl	b2b2 <shell_fprintf>
    5ea8:	f04f 0800 	mov.w	r8, #0
	uint8_t cnt = 0, first = 0x04, last = 0x77;
    5eac:	4646      	mov	r6, r8
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    5eae:	4a24      	ldr	r2, [pc, #144]	; (5f40 <cmd_i2c_scan+0xcc>)
				shell_fprintf(shell, SHELL_NORMAL,
    5eb0:	f8df a090 	ldr.w	sl, [pc, #144]	; 5f44 <cmd_i2c_scan+0xd0>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    5eb4:	f8df b090 	ldr.w	fp, [pc, #144]	; 5f48 <cmd_i2c_scan+0xd4>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    5eb8:	4643      	mov	r3, r8
    5eba:	2108      	movs	r1, #8
    5ebc:	4620      	mov	r0, r4
    5ebe:	f005 f9f8 	bl	b2b2 <shell_fprintf>
    5ec2:	4645      	mov	r5, r8
			if (i + j < first || i + j > last) {
    5ec4:	1f2b      	subs	r3, r5, #4
    5ec6:	2b73      	cmp	r3, #115	; 0x73
    5ec8:	d907      	bls.n	5eda <cmd_i2c_scan+0x66>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    5eca:	465a      	mov	r2, fp
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    5ecc:	2108      	movs	r1, #8
    5ece:	4620      	mov	r0, r4
    5ed0:	f005 f9ef 	bl	b2b2 <shell_fprintf>
    5ed4:	e018      	b.n	5f08 <cmd_i2c_scan+0x94>
    5ed6:	46a8      	mov	r8, r5
    5ed8:	e7e9      	b.n	5eae <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
    5eda:	f10d 030b 	add.w	r3, sp, #11
    5ede:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
    5ee0:	2300      	movs	r3, #0
    5ee2:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5ee4:	2302      	movs	r3, #2
    5ee6:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
    5eea:	2201      	movs	r2, #1
    5eec:	b2ab      	uxth	r3, r5
    5eee:	a903      	add	r1, sp, #12
    5ef0:	4648      	mov	r0, r9
    5ef2:	f005 ffa2 	bl	be3a <i2c_transfer>
    5ef6:	b9e8      	cbnz	r0, 5f34 <cmd_i2c_scan+0xc0>
				shell_fprintf(shell, SHELL_NORMAL,
    5ef8:	462b      	mov	r3, r5
    5efa:	4652      	mov	r2, sl
    5efc:	2108      	movs	r1, #8
    5efe:	4620      	mov	r0, r4
    5f00:	f005 f9d7 	bl	b2b2 <shell_fprintf>
				++cnt;
    5f04:	3601      	adds	r6, #1
    5f06:	b2f6      	uxtb	r6, r6
		for (uint8_t j = 0; j < 16; j++) {
    5f08:	3501      	adds	r5, #1
    5f0a:	f108 0310 	add.w	r3, r8, #16
    5f0e:	429d      	cmp	r5, r3
    5f10:	d1d8      	bne.n	5ec4 <cmd_i2c_scan+0x50>
		shell_print(shell, "");
    5f12:	4a0e      	ldr	r2, [pc, #56]	; (5f4c <cmd_i2c_scan+0xd8>)
    5f14:	2108      	movs	r1, #8
    5f16:	4620      	mov	r0, r4
    5f18:	f005 f9cb 	bl	b2b2 <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
    5f1c:	2d80      	cmp	r5, #128	; 0x80
    5f1e:	d1da      	bne.n	5ed6 <cmd_i2c_scan+0x62>
	shell_print(shell, "%u devices found on %s",
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	9300      	str	r3, [sp, #0]
    5f24:	4620      	mov	r0, r4
    5f26:	4a0a      	ldr	r2, [pc, #40]	; (5f50 <cmd_i2c_scan+0xdc>)
    5f28:	4633      	mov	r3, r6
    5f2a:	2108      	movs	r1, #8
    5f2c:	f005 f9c1 	bl	b2b2 <shell_fprintf>
	return 0;
    5f30:	2000      	movs	r0, #0
    5f32:	e7b1      	b.n	5e98 <cmd_i2c_scan+0x24>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    5f34:	4a07      	ldr	r2, [pc, #28]	; (5f54 <cmd_i2c_scan+0xe0>)
    5f36:	e7c9      	b.n	5ecc <cmd_i2c_scan+0x58>
    5f38:	0000eb74 	.word	0x0000eb74
    5f3c:	0000ebd5 	.word	0x0000ebd5
    5f40:	0000ec0a 	.word	0x0000ec0a
    5f44:	0000e59e 	.word	0x0000e59e
    5f48:	0000e5a4 	.word	0x0000e5a4
    5f4c:	0000df88 	.word	0x0000df88
    5f50:	0000ec15 	.word	0x0000ec15
    5f54:	0000ec11 	.word	0x0000ec11

00005f58 <cmd_i2c_recover>:
{
    5f58:	b538      	push	{r3, r4, r5, lr}
    5f5a:	4605      	mov	r5, r0
    5f5c:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    5f5e:	6850      	ldr	r0, [r2, #4]
    5f60:	f001 fcd2 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    5f64:	b948      	cbnz	r0, 5f7a <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5f66:	6863      	ldr	r3, [r4, #4]
    5f68:	4a0c      	ldr	r2, [pc, #48]	; (5f9c <cmd_i2c_recover+0x44>)
    5f6a:	2101      	movs	r1, #1
    5f6c:	4628      	mov	r0, r5
    5f6e:	f005 f9a0 	bl	b2b2 <shell_fprintf>
    5f72:	f06f 0412 	mvn.w	r4, #18
}
    5f76:	4620      	mov	r0, r4
    5f78:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
    5f7a:	6883      	ldr	r3, [r0, #8]
    5f7c:	695b      	ldr	r3, [r3, #20]
    5f7e:	b153      	cbz	r3, 5f96 <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
    5f80:	4798      	blx	r3
	if (err) {
    5f82:	4604      	mov	r4, r0
    5f84:	2800      	cmp	r0, #0
    5f86:	d0f6      	beq.n	5f76 <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
    5f88:	4a05      	ldr	r2, [pc, #20]	; (5fa0 <cmd_i2c_recover+0x48>)
    5f8a:	4623      	mov	r3, r4
    5f8c:	2101      	movs	r1, #1
    5f8e:	4628      	mov	r0, r5
    5f90:	f005 f98f 	bl	b2b2 <shell_fprintf>
		return err;
    5f94:	e7ef      	b.n	5f76 <cmd_i2c_recover+0x1e>
		return -ENOSYS;
    5f96:	f06f 0457 	mvn.w	r4, #87	; 0x57
    5f9a:	e7f5      	b.n	5f88 <cmd_i2c_recover+0x30>
    5f9c:	0000eb74 	.word	0x0000eb74
    5fa0:	0000ec2d 	.word	0x0000ec2d

00005fa4 <cmd_i2c_read_byte>:
{
    5fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5fa8:	4606      	mov	r6, r0
    5faa:	b089      	sub	sp, #36	; 0x24
	dev = device_get_binding(argv[1]);
    5fac:	6850      	ldr	r0, [r2, #4]
{
    5fae:	4614      	mov	r4, r2
    5fb0:	f001 fcaa 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    5fb4:	4607      	mov	r7, r0
    5fb6:	b950      	cbnz	r0, 5fce <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    5fb8:	4630      	mov	r0, r6
    5fba:	6863      	ldr	r3, [r4, #4]
    5fbc:	4a20      	ldr	r2, [pc, #128]	; (6040 <cmd_i2c_read_byte+0x9c>)
    5fbe:	2101      	movs	r1, #1
    5fc0:	f005 f977 	bl	b2b2 <shell_fprintf>
		return -ENODEV;
    5fc4:	f06f 0012 	mvn.w	r0, #18
}
    5fc8:	b009      	add	sp, #36	; 0x24
    5fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5fce:	2210      	movs	r2, #16
    5fd0:	2100      	movs	r1, #0
    5fd2:	68a0      	ldr	r0, [r4, #8]
    5fd4:	f003 fb6e 	bl	96b4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5fd8:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5fda:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5fdc:	2100      	movs	r1, #0
    5fde:	68e0      	ldr	r0, [r4, #12]
    5fe0:	f003 fb68 	bl	96b4 <strtol>
	msg[0].buf = (uint8_t *)write_buf;
    5fe4:	f10d 0307 	add.w	r3, sp, #7
    5fe8:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    5fea:	f04f 0801 	mov.w	r8, #1
	msg[1].buf = (uint8_t *)read_buf;
    5fee:	f10d 0306 	add.w	r3, sp, #6
	msg[1].len = num_read;
    5ff2:	e9cd 3805 	strd	r3, r8, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5ff6:	2307      	movs	r3, #7
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
    5ff8:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    5ffc:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5ffe:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    6002:	2202      	movs	r2, #2
    6004:	fa1f f389 	uxth.w	r3, r9
    6008:	a902      	add	r1, sp, #8
    600a:	4638      	mov	r0, r7
	msg[0].len = num_write;
    600c:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    6010:	f88d 5010 	strb.w	r5, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
    6014:	f005 ff11 	bl	be3a <i2c_transfer>
    6018:	42a8      	cmp	r0, r5
    601a:	da08      	bge.n	602e <cmd_i2c_read_byte+0x8a>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    601c:	4630      	mov	r0, r6
    601e:	6863      	ldr	r3, [r4, #4]
    6020:	4a08      	ldr	r2, [pc, #32]	; (6044 <cmd_i2c_read_byte+0xa0>)
    6022:	4641      	mov	r1, r8
    6024:	f005 f945 	bl	b2b2 <shell_fprintf>
		return -EIO;
    6028:	f06f 0004 	mvn.w	r0, #4
    602c:	e7cc      	b.n	5fc8 <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
    602e:	4630      	mov	r0, r6
    6030:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6034:	4a04      	ldr	r2, [pc, #16]	; (6048 <cmd_i2c_read_byte+0xa4>)
    6036:	2108      	movs	r1, #8
    6038:	f005 f93b 	bl	b2b2 <shell_fprintf>
	return 0;
    603c:	4628      	mov	r0, r5
    603e:	e7c3      	b.n	5fc8 <cmd_i2c_read_byte+0x24>
    6040:	0000eb74 	.word	0x0000eb74
    6044:	0000ebb5 	.word	0x0000ebb5
    6048:	0000ec50 	.word	0x0000ec50

0000604c <cmd_i2c_write>:
{
    604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6050:	4606      	mov	r6, r0
    6052:	b08f      	sub	sp, #60	; 0x3c
	dev = device_get_binding(argv[1]);
    6054:	6850      	ldr	r0, [r2, #4]
{
    6056:	460c      	mov	r4, r1
    6058:	4615      	mov	r5, r2
    605a:	f001 fc55 	bl	7908 <z_impl_device_get_binding>
	if (!dev) {
    605e:	4607      	mov	r7, r0
    6060:	b950      	cbnz	r0, 6078 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    6062:	4630      	mov	r0, r6
    6064:	686b      	ldr	r3, [r5, #4]
    6066:	4a29      	ldr	r2, [pc, #164]	; (610c <cmd_i2c_write+0xc0>)
    6068:	2101      	movs	r1, #1
    606a:	f005 f922 	bl	b2b2 <shell_fprintf>
		return -ENODEV;
    606e:	f06f 0012 	mvn.w	r0, #18
}
    6072:	b00f      	add	sp, #60	; 0x3c
    6074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    6078:	2210      	movs	r2, #16
    607a:	2100      	movs	r1, #0
    607c:	68a8      	ldr	r0, [r5, #8]
    607e:	f003 fb19 	bl	96b4 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    6082:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    6084:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
    6086:	2100      	movs	r1, #0
    6088:	68e8      	ldr	r0, [r5, #12]
    608a:	f003 fb13 	bl	96b4 <strtol>
	if (num_bytes < 0) {
    608e:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
    6090:	4681      	mov	r9, r0
	if (num_bytes < 0) {
    6092:	d501      	bpl.n	6098 <cmd_i2c_write+0x4c>
		return 0;
    6094:	2000      	movs	r0, #0
    6096:	e7ec      	b.n	6072 <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
    6098:	2c10      	cmp	r4, #16
    609a:	f105 080c 	add.w	r8, r5, #12
    609e:	bfa8      	it	ge
    60a0:	2410      	movge	r4, #16
    60a2:	f10d 0a10 	add.w	sl, sp, #16
    60a6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    60aa:	4598      	cmp	r8, r3
    60ac:	d122      	bne.n	60f4 <cmd_i2c_write+0xa8>
	msg[0].buf = &start_addr;
    60ae:	f10d 030f 	add.w	r3, sp, #15
    60b2:	9308      	str	r3, [sp, #32]
	msg[0].flags = I2C_MSG_WRITE;
    60b4:	2300      	movs	r3, #0
    60b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	msg[1].buf = (uint8_t *)buf;
    60ba:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
    60bc:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    60c0:	2202      	movs	r2, #2
	msg[0].len = 1U;
    60c2:	f04f 0801 	mov.w	r8, #1
	return i2c_transfer(dev, msg, 2, dev_addr);
    60c6:	fa1f f38b 	uxth.w	r3, fp
    60ca:	a908      	add	r1, sp, #32
    60cc:	4638      	mov	r0, r7
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    60ce:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[0].len = 1U;
    60d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    60d6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	return i2c_transfer(dev, msg, 2, dev_addr);
    60da:	f005 feae 	bl	be3a <i2c_transfer>
    60de:	2800      	cmp	r0, #0
    60e0:	dad8      	bge.n	6094 <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    60e2:	4630      	mov	r0, r6
    60e4:	686b      	ldr	r3, [r5, #4]
    60e6:	4a0a      	ldr	r2, [pc, #40]	; (6110 <cmd_i2c_write+0xc4>)
    60e8:	4641      	mov	r1, r8
    60ea:	f005 f8e2 	bl	b2b2 <shell_fprintf>
		return -EIO;
    60ee:	f06f 0004 	mvn.w	r0, #4
    60f2:	e7be      	b.n	6072 <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
    60f4:	f858 0f04 	ldr.w	r0, [r8, #4]!
    60f8:	9301      	str	r3, [sp, #4]
    60fa:	2210      	movs	r2, #16
    60fc:	2100      	movs	r1, #0
    60fe:	f003 fad9 	bl	96b4 <strtol>
    6102:	9b01      	ldr	r3, [sp, #4]
    6104:	f80a 0b01 	strb.w	r0, [sl], #1
    6108:	e7cf      	b.n	60aa <cmd_i2c_write+0x5e>
    610a:	bf00      	nop
    610c:	0000eb74 	.word	0x0000eb74
    6110:	0000eb96 	.word	0x0000eb96

00006114 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    6114:	b508      	push	{r3, lr}
	return dev->config;
    6116:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    6118:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    611c:	f001 fafe 	bl	771c <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
					      get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    6120:	4b03      	ldr	r3, [pc, #12]	; (6130 <i2c_nrfx_twi_recover_bus+0x1c>)
    6122:	4298      	cmp	r0, r3
}
    6124:	bf14      	ite	ne
    6126:	f06f 000f 	mvnne.w	r0, #15
    612a:	2000      	moveq	r0, #0
    612c:	bd08      	pop	{r3, pc}
    612e:	bf00      	nop
    6130:	0bad0000 	.word	0x0bad0000

00006134 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    6134:	b510      	push	{r4, lr}
    6136:	4604      	mov	r4, r0
    6138:	2200      	movs	r2, #0
    613a:	2101      	movs	r1, #1
    613c:	2003      	movs	r0, #3
    613e:	f7fe feb9 	bl	4eb4 <z_arm_irq_priority_set>
	return dev->config;
    6142:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    6144:	6923      	ldr	r3, [r4, #16]
    6146:	4a06      	ldr	r2, [pc, #24]	; (6160 <twi_0_init+0x2c>)
    6148:	f100 0108 	add.w	r1, r0, #8
    614c:	f001 f980 	bl	7450 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    6150:	4b04      	ldr	r3, [pc, #16]	; (6164 <twi_0_init+0x30>)
		return -EBUSY;
    6152:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    6154:	bf14      	ite	ne
    6156:	f06f 000f 	mvnne.w	r0, #15
    615a:	2000      	moveq	r0, #0
    615c:	bd10      	pop	{r4, pc}
    615e:	bf00      	nop
    6160:	00006169 	.word	0x00006169
    6164:	0bad0000 	.word	0x0bad0000

00006168 <event_handler>:
	switch (p_event->type) {
    6168:	7803      	ldrb	r3, [r0, #0]
    616a:	2b01      	cmp	r3, #1
    616c:	d008      	beq.n	6180 <event_handler+0x18>
    616e:	2b02      	cmp	r3, #2
    6170:	d008      	beq.n	6184 <event_handler+0x1c>
    6172:	b94b      	cbnz	r3, 6188 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    6174:	4b05      	ldr	r3, [pc, #20]	; (618c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    6176:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
    6178:	f101 0018 	add.w	r0, r1, #24
    617c:	f001 bf06 	b.w	7f8c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <event_handler+0x28>)
    6182:	e7f8      	b.n	6176 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6184:	4b03      	ldr	r3, [pc, #12]	; (6194 <event_handler+0x2c>)
    6186:	e7f6      	b.n	6176 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    6188:	4b03      	ldr	r3, [pc, #12]	; (6198 <event_handler+0x30>)
    618a:	e7f4      	b.n	6176 <event_handler+0xe>
    618c:	0bad0000 	.word	0x0bad0000
    6190:	0bae0001 	.word	0x0bae0001
    6194:	0bae0002 	.word	0x0bae0002
    6198:	0bad0001 	.word	0x0bad0001

0000619c <i2c_nrfx_twi_transfer>:
{
    619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61a0:	4604      	mov	r4, r0
    61a2:	b087      	sub	sp, #28
    61a4:	460d      	mov	r5, r1
    61a6:	4617      	mov	r7, r2
    61a8:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    61aa:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    61ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    61b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    61b4:	f001 ff10 	bl	7fd8 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    61b8:	6920      	ldr	r0, [r4, #16]
    61ba:	3018      	adds	r0, #24
    61bc:	2200      	movs	r2, #0
    61be:	2300      	movs	r3, #0
    61c0:	f001 ff0a 	bl	7fd8 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    61c4:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
    61c6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 628c <i2c_nrfx_twi_transfer+0xf0>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    61ca:	f001 f99f 	bl	750c <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    61ce:	f04f 0800 	mov.w	r8, #0
    61d2:	45b8      	cmp	r8, r7
    61d4:	d301      	bcc.n	61da <i2c_nrfx_twi_transfer+0x3e>
    61d6:	2500      	movs	r5, #0
    61d8:	e029      	b.n	622e <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    61da:	f895 b008 	ldrb.w	fp, [r5, #8]
    61de:	f01b 0608 	ands.w	r6, fp, #8
    61e2:	d14c      	bne.n	627e <i2c_nrfx_twi_transfer+0xe2>
		nrfx_twi_xfer_desc_t cur_xfer = {
    61e4:	2214      	movs	r2, #20
    61e6:	4631      	mov	r1, r6
    61e8:	a801      	add	r0, sp, #4
    61ea:	f006 fc81 	bl	caf0 <memset>
    61ee:	686a      	ldr	r2, [r5, #4]
    61f0:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    61f2:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    61f6:	682a      	ldr	r2, [r5, #0]
    61f8:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    61fc:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    6200:	f88d 9005 	strb.w	r9, [sp, #5]
    6204:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    6206:	d11c      	bne.n	6242 <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
    6208:	1e7a      	subs	r2, r7, #1
    620a:	4542      	cmp	r2, r8
    620c:	d902      	bls.n	6214 <i2c_nrfx_twi_transfer+0x78>
    620e:	7d2a      	ldrb	r2, [r5, #20]
    6210:	0752      	lsls	r2, r2, #29
    6212:	d518      	bpl.n	6246 <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    6214:	bb9b      	cbnz	r3, 627e <i2c_nrfx_twi_transfer+0xe2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    6216:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    6218:	6860      	ldr	r0, [r4, #4]
    621a:	a901      	add	r1, sp, #4
    621c:	f001 f9a4 	bl	7568 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    6220:	4550      	cmp	r0, sl
    6222:	d012      	beq.n	624a <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
    6224:	4b1a      	ldr	r3, [pc, #104]	; (6290 <i2c_nrfx_twi_transfer+0xf4>)
    6226:	4298      	cmp	r0, r3
    6228:	d02c      	beq.n	6284 <i2c_nrfx_twi_transfer+0xe8>
			ret = -EIO;
    622a:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    622e:	6860      	ldr	r0, [r4, #4]
    6230:	f001 f97c 	bl	752c <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    6234:	6920      	ldr	r0, [r4, #16]
	z_impl_k_sem_give(sem);
    6236:	f001 fea9 	bl	7f8c <z_impl_k_sem_give>
}
    623a:	4628      	mov	r0, r5
    623c:	b007      	add	sp, #28
    623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    6242:	4632      	mov	r2, r6
    6244:	e7e8      	b.n	6218 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    6246:	2240      	movs	r2, #64	; 0x40
    6248:	e7e6      	b.n	6218 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    624a:	6920      	ldr	r0, [r4, #16]
    624c:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
    624e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6252:	2300      	movs	r3, #0
    6254:	f001 fec0 	bl	7fd8 <z_impl_k_sem_take>
		if (ret != 0) {
    6258:	b140      	cbz	r0, 626c <i2c_nrfx_twi_transfer+0xd0>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
    625a:	6860      	ldr	r0, [r4, #4]
    625c:	f001 f966 	bl	752c <nrfx_twi_disable>
	return dev->config;
    6260:	6863      	ldr	r3, [r4, #4]
    6262:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    6266:	f001 fa59 	bl	771c <nrfx_twi_twim_bus_recover>
    626a:	e7de      	b.n	622a <i2c_nrfx_twi_transfer+0x8e>
	return dev->data;
    626c:	6923      	ldr	r3, [r4, #16]
		res = get_dev_data(dev)->res;
    626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    6270:	4553      	cmp	r3, sl
    6272:	f105 050c 	add.w	r5, r5, #12
    6276:	d1d8      	bne.n	622a <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
    6278:	f108 0801 	add.w	r8, r8, #1
    627c:	e7a9      	b.n	61d2 <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
    627e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6282:	e7d4      	b.n	622e <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
    6284:	f06f 050f 	mvn.w	r5, #15
    6288:	e7d1      	b.n	622e <i2c_nrfx_twi_transfer+0x92>
    628a:	bf00      	nop
    628c:	0bad0000 	.word	0x0bad0000
    6290:	0bad000b 	.word	0x0bad000b

00006294 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6294:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6296:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    629a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    629c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    629e:	6002      	str	r2, [r0, #0]
}
    62a0:	4802      	ldr	r0, [pc, #8]	; (62ac <nrf_gpio_pin_port_decode+0x18>)
    62a2:	bf18      	it	ne
    62a4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    62a8:	4770      	bx	lr
    62aa:	bf00      	nop
    62ac:	50000300 	.word	0x50000300

000062b0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    62b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    62b2:	794b      	ldrb	r3, [r1, #5]
    62b4:	2b01      	cmp	r3, #1
    62b6:	d026      	beq.n	6306 <uarte_nrfx_configure+0x56>
    62b8:	2b03      	cmp	r3, #3
    62ba:	d121      	bne.n	6300 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    62bc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    62be:	798b      	ldrb	r3, [r1, #6]
    62c0:	2b03      	cmp	r3, #3
    62c2:	d11d      	bne.n	6300 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    62c4:	79cc      	ldrb	r4, [r1, #7]
    62c6:	b10c      	cbz	r4, 62cc <uarte_nrfx_configure+0x1c>
    62c8:	2c01      	cmp	r4, #1
    62ca:	d119      	bne.n	6300 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    62cc:	790a      	ldrb	r2, [r1, #4]
    62ce:	b112      	cbz	r2, 62d6 <uarte_nrfx_configure+0x26>
    62d0:	2a02      	cmp	r2, #2
    62d2:	d115      	bne.n	6300 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    62d4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    62d6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    62d8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    62da:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    62de:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    62e0:	d065      	beq.n	63ae <uarte_nrfx_configure+0xfe>
    62e2:	d82d      	bhi.n	6340 <uarte_nrfx_configure+0x90>
    62e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    62e8:	d064      	beq.n	63b4 <uarte_nrfx_configure+0x104>
    62ea:	d816      	bhi.n	631a <uarte_nrfx_configure+0x6a>
    62ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    62f0:	d062      	beq.n	63b8 <uarte_nrfx_configure+0x108>
    62f2:	d80a      	bhi.n	630a <uarte_nrfx_configure+0x5a>
    62f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    62f8:	d061      	beq.n	63be <uarte_nrfx_configure+0x10e>
    62fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    62fe:	d061      	beq.n	63c4 <uarte_nrfx_configure+0x114>
    6300:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6304:	e052      	b.n	63ac <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    6306:	2600      	movs	r6, #0
    6308:	e7d9      	b.n	62be <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    630a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    630e:	d05c      	beq.n	63ca <uarte_nrfx_configure+0x11a>
    6310:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    6314:	d1f4      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    6316:	4b37      	ldr	r3, [pc, #220]	; (63f4 <uarte_nrfx_configure+0x144>)
    6318:	e03c      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    631a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    631e:	d057      	beq.n	63d0 <uarte_nrfx_configure+0x120>
    6320:	d807      	bhi.n	6332 <uarte_nrfx_configure+0x82>
    6322:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    6326:	d055      	beq.n	63d4 <uarte_nrfx_configure+0x124>
    6328:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    632c:	d1e8      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    632e:	4b32      	ldr	r3, [pc, #200]	; (63f8 <uarte_nrfx_configure+0x148>)
    6330:	e030      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6332:	f647 2712 	movw	r7, #31250	; 0x7a12
    6336:	42bb      	cmp	r3, r7
    6338:	d1e2      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    633a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    633e:	e029      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6340:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    6344:	d048      	beq.n	63d8 <uarte_nrfx_configure+0x128>
    6346:	d813      	bhi.n	6370 <uarte_nrfx_configure+0xc0>
    6348:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    634c:	d047      	beq.n	63de <uarte_nrfx_configure+0x12e>
    634e:	d809      	bhi.n	6364 <uarte_nrfx_configure+0xb4>
    6350:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    6354:	42bb      	cmp	r3, r7
    6356:	d044      	beq.n	63e2 <uarte_nrfx_configure+0x132>
    6358:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    635c:	d1d0      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    635e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6362:	e017      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6364:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    6368:	d1ca      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    636a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    636e:	e011      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    6370:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    6374:	d038      	beq.n	63e8 <uarte_nrfx_configure+0x138>
    6376:	d808      	bhi.n	638a <uarte_nrfx_configure+0xda>
    6378:	4f20      	ldr	r7, [pc, #128]	; (63fc <uarte_nrfx_configure+0x14c>)
    637a:	42bb      	cmp	r3, r7
    637c:	d037      	beq.n	63ee <uarte_nrfx_configure+0x13e>
    637e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    6382:	d1bd      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6384:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6388:	e004      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    638a:	4f1d      	ldr	r7, [pc, #116]	; (6400 <uarte_nrfx_configure+0x150>)
    638c:	42bb      	cmp	r3, r7
    638e:	d1b7      	bne.n	6300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6394:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    6398:	6903      	ldr	r3, [r0, #16]
    639a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    639c:	4334      	orrs	r4, r6
    639e:	4322      	orrs	r2, r4
    63a0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    63a2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    63a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    63aa:	2000      	movs	r0, #0
}
    63ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    63ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    63b2:	e7ef      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    63b4:	4b13      	ldr	r3, [pc, #76]	; (6404 <uarte_nrfx_configure+0x154>)
    63b6:	e7ed      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    63b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    63bc:	e7ea      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    63be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    63c2:	e7e7      	b.n	6394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    63c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    63c8:	e7e4      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    63ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    63ce:	e7e1      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    63d0:	4b0d      	ldr	r3, [pc, #52]	; (6408 <uarte_nrfx_configure+0x158>)
    63d2:	e7df      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    63d4:	4b0d      	ldr	r3, [pc, #52]	; (640c <uarte_nrfx_configure+0x15c>)
    63d6:	e7dd      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    63d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    63dc:	e7da      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    63de:	4b0c      	ldr	r3, [pc, #48]	; (6410 <uarte_nrfx_configure+0x160>)
    63e0:	e7d8      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    63e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    63e6:	e7d5      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    63e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    63ec:	e7d2      	b.n	6394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    63ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    63f2:	e7cf      	b.n	6394 <uarte_nrfx_configure+0xe4>
    63f4:	0013b000 	.word	0x0013b000
    63f8:	004ea000 	.word	0x004ea000
    63fc:	0003d090 	.word	0x0003d090
    6400:	000f4240 	.word	0x000f4240
    6404:	00275000 	.word	0x00275000
    6408:	0075c000 	.word	0x0075c000
    640c:	003af000 	.word	0x003af000
    6410:	013a9000 	.word	0x013a9000

00006414 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    6416:	6906      	ldr	r6, [r0, #16]
{
    6418:	4605      	mov	r5, r0
    641a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    641c:	f006 f850 	bl	c4c0 <k_is_in_isr>
    6420:	b910      	cbnz	r0, 6428 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    6422:	4b20      	ldr	r3, [pc, #128]	; (64a4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    6424:	781b      	ldrb	r3, [r3, #0]
    6426:	b983      	cbnz	r3, 644a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6428:	f04f 0320 	mov.w	r3, #32
    642c:	f3ef 8411 	mrs	r4, BASEPRI
    6430:	f383 8812 	msr	BASEPRI_MAX, r3
    6434:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    6438:	6868      	ldr	r0, [r5, #4]
    643a:	f005 fdf3 	bl	c024 <is_tx_ready.isra.0>
    643e:	bb28      	cbnz	r0, 648c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    6440:	f384 8811 	msr	BASEPRI, r4
    6444:	f3bf 8f6f 	isb	sy
}
    6448:	e7ee      	b.n	6428 <uarte_nrfx_poll_out+0x14>
{
    644a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    644c:	6868      	ldr	r0, [r5, #4]
    644e:	f005 fde9 	bl	c024 <is_tx_ready.isra.0>
    6452:	b970      	cbnz	r0, 6472 <uarte_nrfx_poll_out+0x5e>
    6454:	2001      	movs	r0, #1
    6456:	f005 fe9e 	bl	c196 <nrfx_busy_wait>
    645a:	3c01      	subs	r4, #1
    645c:	d1f6      	bne.n	644c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    645e:	2100      	movs	r1, #0
    6460:	2021      	movs	r0, #33	; 0x21
    6462:	f002 f8b7 	bl	85d4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6466:	e7f0      	b.n	644a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6468:	f384 8811 	msr	BASEPRI, r4
    646c:	f3bf 8f6f 	isb	sy
}
    6470:	e7f5      	b.n	645e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    6472:	f04f 0320 	mov.w	r3, #32
    6476:	f3ef 8411 	mrs	r4, BASEPRI
    647a:	f383 8812 	msr	BASEPRI_MAX, r3
    647e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    6482:	6868      	ldr	r0, [r5, #4]
    6484:	f005 fdce 	bl	c024 <is_tx_ready.isra.0>
    6488:	2800      	cmp	r0, #0
    648a:	d0ed      	beq.n	6468 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    648c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    648e:	2201      	movs	r2, #1
	data->char_out = c;
    6490:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6494:	6868      	ldr	r0, [r5, #4]
    6496:	f005 fdaa 	bl	bfee <tx_start.isra.0>
	__asm__ volatile(
    649a:	f384 8811 	msr	BASEPRI, r4
    649e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    64a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a4:	20001038 	.word	0x20001038

000064a8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    64a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    64ac:	2200      	movs	r2, #0
    64ae:	4606      	mov	r6, r0
    64b0:	2101      	movs	r1, #1
    64b2:	2002      	movs	r0, #2
    64b4:	f7fe fcfe 	bl	4eb4 <z_arm_irq_priority_set>
    64b8:	2002      	movs	r0, #2
    64ba:	f7fe fcdd 	bl	4e78 <arch_irq_enable>
	return dev->config;
    64be:	f8d6 8004 	ldr.w	r8, [r6, #4]
	return dev->data;
    64c2:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
    64c4:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    64c8:	2300      	movs	r3, #0
    64ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    64ce:	603e      	str	r6, [r7, #0]
	uarte_nrfx_pins_configure(dev, false);
    64d0:	6875      	ldr	r5, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    64d2:	68eb      	ldr	r3, [r5, #12]
    64d4:	1c5a      	adds	r2, r3, #1
    64d6:	d013      	beq.n	6500 <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    64d8:	a801      	add	r0, sp, #4
    64da:	9301      	str	r3, [sp, #4]
    64dc:	f7ff feda 	bl	6294 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    64e0:	9a01      	ldr	r2, [sp, #4]
    64e2:	2301      	movs	r3, #1
    64e4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    64e6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    64ea:	68eb      	ldr	r3, [r5, #12]
    64ec:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    64ee:	a801      	add	r0, sp, #4
    64f0:	f7ff fed0 	bl	6294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    64f4:	9b01      	ldr	r3, [sp, #4]
    64f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    64fa:	2203      	movs	r2, #3
    64fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6500:	6928      	ldr	r0, [r5, #16]
    6502:	1c43      	adds	r3, r0, #1
    6504:	d006      	beq.n	6514 <uarte_0_init+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    6506:	7f2b      	ldrb	r3, [r5, #28]
    6508:	2b00      	cmp	r3, #0
    650a:	bf14      	ite	ne
    650c:	2103      	movne	r1, #3
    650e:	2100      	moveq	r1, #0
    6510:	f005 fd5f 	bl	bfd2 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6514:	696b      	ldr	r3, [r5, #20]
    6516:	1c5a      	adds	r2, r3, #1
    6518:	d013      	beq.n	6542 <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    651a:	a801      	add	r0, sp, #4
    651c:	9301      	str	r3, [sp, #4]
    651e:	f7ff feb9 	bl	6294 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6522:	9a01      	ldr	r2, [sp, #4]
    6524:	2301      	movs	r3, #1
    6526:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6528:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    652c:	696b      	ldr	r3, [r5, #20]
    652e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6530:	a801      	add	r0, sp, #4
    6532:	f7ff feaf 	bl	6294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    653c:	2203      	movs	r2, #3
    653e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6542:	69a8      	ldr	r0, [r5, #24]
    6544:	1c43      	adds	r3, r0, #1
    6546:	d006      	beq.n	6556 <uarte_0_init+0xae>
			nrf_gpio_cfg_input(cfg->cts_pin,
    6548:	7f6b      	ldrb	r3, [r5, #29]
    654a:	2b00      	cmp	r3, #0
    654c:	bf14      	ite	ne
    654e:	2103      	movne	r1, #3
    6550:	2100      	moveq	r1, #0
    6552:	f005 fd3e 	bl	bfd2 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    6556:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    655a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    655c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    6560:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    6564:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    6568:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    656c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    656e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    6572:	3104      	adds	r1, #4
    6574:	4630      	mov	r0, r6
    6576:	f7ff fe9b 	bl	62b0 <uarte_nrfx_configure>
	if (err) {
    657a:	4605      	mov	r5, r0
    657c:	2800      	cmp	r0, #0
    657e:	d146      	bne.n	660e <uarte_0_init+0x166>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6580:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6584:	0799      	lsls	r1, r3, #30
    6586:	d519      	bpl.n	65bc <uarte_0_init+0x114>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6588:	f107 0016 	add.w	r0, r7, #22
    658c:	f000 fe7a 	bl	7284 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6590:	4b22      	ldr	r3, [pc, #136]	; (661c <uarte_0_init+0x174>)
    6592:	4298      	cmp	r0, r3
    6594:	d13f      	bne.n	6616 <uarte_0_init+0x16e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6596:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6598:	00c3      	lsls	r3, r0, #3
    659a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    659e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    65a2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    65a6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    65aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    65ae:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    65b2:	4a1b      	ldr	r2, [pc, #108]	; (6620 <uarte_0_init+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    65b4:	2301      	movs	r3, #1
    65b6:	4083      	lsls	r3, r0
    65b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    65bc:	2308      	movs	r3, #8
    65be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    65c2:	f898 3008 	ldrb.w	r3, [r8, #8]
    65c6:	b95b      	cbnz	r3, 65e0 <uarte_0_init+0x138>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65c8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    65cc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    65d0:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    65d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    65d8:	2301      	movs	r3, #1
    65da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65de:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    65e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    65e4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    65e6:	bf5c      	itt	pl
    65e8:	f44f 7280 	movpl.w	r2, #256	; 0x100
    65ec:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    65f0:	06db      	lsls	r3, r3, #27
    65f2:	bf44      	itt	mi
    65f4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    65f8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    65fc:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    65fe:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6600:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6604:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6608:	2301      	movs	r3, #1
    660a:	60a3      	str	r3, [r4, #8]
    660c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    660e:	4628      	mov	r0, r5
    6610:	b002      	add	sp, #8
    6612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    6616:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    661a:	e7f8      	b.n	660e <uarte_0_init+0x166>
    661c:	0bad0000 	.word	0x0bad0000
    6620:	4001f000 	.word	0x4001f000

00006624 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6624:	4a04      	ldr	r2, [pc, #16]	; (6638 <sys_clock_timeout_handler+0x14>)
    6626:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6628:	1ac8      	subs	r0, r1, r3
    662a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    662e:	4403      	add	r3, r0
    6630:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6632:	f002 b947 	b.w	88c4 <sys_clock_announce>
    6636:	bf00      	nop
    6638:	20000aa4 	.word	0x20000aa4

0000663c <sys_clock_driver_init>:
	k_spin_unlock(&lock, key);
	return ret;
}

static int sys_clock_driver_init(const struct device *dev)
{
    663c:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    663e:	4c0f      	ldr	r4, [pc, #60]	; (667c <sys_clock_driver_init+0x40>)
    6640:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    6642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    6646:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    664a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    664e:	4b0c      	ldr	r3, [pc, #48]	; (6680 <sys_clock_driver_init+0x44>)
    6650:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6654:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6658:	2101      	movs	r1, #1
    665a:	462a      	mov	r2, r5
    665c:	2011      	movs	r0, #17
    665e:	f7fe fc29 	bl	4eb4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6662:	2011      	movs	r0, #17
    6664:	f7fe fc08 	bl	4e78 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6668:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    666a:	4a06      	ldr	r2, [pc, #24]	; (6684 <sys_clock_driver_init+0x48>)
    666c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    666e:	2002      	movs	r0, #2
    6670:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    6672:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    6674:	f7ff f956 	bl	5924 <z_nrf_clock_control_lf_on>

	return 0;
}
    6678:	4628      	mov	r0, r5
    667a:	bd38      	pop	{r3, r4, r5, pc}
    667c:	40011000 	.word	0x40011000
    6680:	e000e100 	.word	0xe000e100
    6684:	20000aa0 	.word	0x20000aa0

00006688 <set_absolute_alarm>:
{
    6688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    668c:	0086      	lsls	r6, r0, #2
    668e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6692:	f100 0450 	add.w	r4, r0, #80	; 0x50
    6696:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    669a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    669c:	b2a4      	uxth	r4, r4
    669e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    66a2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    66a6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    66aa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6718 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    66ae:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66b2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    66b6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    66b8:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    66bc:	eba3 0309 	sub.w	r3, r3, r9
    66c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    66c4:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    66c8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    66ca:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    66ce:	d102      	bne.n	66d6 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    66d0:	2013      	movs	r0, #19
    66d2:	f006 f846 	bl	c762 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    66d6:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    66da:	1aab      	subs	r3, r5, r2
    66dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    66e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    66e4:	bf88      	it	hi
    66e6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66e8:	2300      	movs	r3, #0
    66ea:	6023      	str	r3, [r4, #0]
    66ec:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    66ee:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    66f2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    66f6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    66fa:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    66fe:	4599      	cmp	r9, r3
    6700:	d006      	beq.n	6710 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    6702:	1aeb      	subs	r3, r5, r3
    6704:	3b02      	subs	r3, #2
    6706:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    670a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    670e:	d801      	bhi.n	6714 <set_absolute_alarm+0x8c>
}
    6710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    6714:	462b      	mov	r3, r5
    6716:	e7cf      	b.n	66b8 <set_absolute_alarm+0x30>
    6718:	40011000 	.word	0x40011000

0000671c <rtc_nrf_isr>:
{
    671c:	b570      	push	{r4, r5, r6, lr}
    671e:	4d15      	ldr	r5, [pc, #84]	; (6774 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    6720:	4c15      	ldr	r4, [pc, #84]	; (6778 <rtc_nrf_isr+0x5c>)
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6722:	2600      	movs	r6, #0
    6724:	682b      	ldr	r3, [r5, #0]
    6726:	2000      	movs	r0, #0
    6728:	b106      	cbz	r6, 672c <rtc_nrf_isr+0x10>
}
    672a:	bd70      	pop	{r4, r5, r6, pc}
    672c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    6730:	03d2      	lsls	r2, r2, #15
    6732:	d5fa      	bpl.n	672a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6734:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    6738:	2a00      	cmp	r2, #0
    673a:	d0f6      	beq.n	672a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    673c:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    6740:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6748:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    674c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    6750:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6754:	1a72      	subs	r2, r6, r1
    6756:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    675a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    675e:	bf88      	it	hi
    6760:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6762:	2601      	movs	r6, #1
			if (handler) {
    6764:	b11b      	cbz	r3, 676e <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    6766:	686a      	ldr	r2, [r5, #4]
    6768:	6028      	str	r0, [r5, #0]
    676a:	4798      	blx	r3
    676c:	e7da      	b.n	6724 <rtc_nrf_isr+0x8>
    676e:	602b      	str	r3, [r5, #0]
}
    6770:	e7db      	b.n	672a <rtc_nrf_isr+0xe>
    6772:	bf00      	nop
    6774:	20000a98 	.word	0x20000a98
    6778:	40011000 	.word	0x40011000

0000677c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    677c:	4a13      	ldr	r2, [pc, #76]	; (67cc <sys_clock_set_timeout+0x50>)
    677e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6782:	bf14      	ite	ne
    6784:	4603      	movne	r3, r0
    6786:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6788:	3b01      	subs	r3, #1
    678a:	2b00      	cmp	r3, #0
    678c:	dd1c      	ble.n	67c8 <sys_clock_set_timeout+0x4c>
    678e:	4293      	cmp	r3, r2
    6790:	bfa8      	it	ge
    6792:	4613      	movge	r3, r2
    6794:	4a0e      	ldr	r2, [pc, #56]	; (67d0 <sys_clock_set_timeout+0x54>)
    6796:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	uint32_t unannounced = counter_sub(counter(), last_count);
    679a:	4a0e      	ldr	r2, [pc, #56]	; (67d4 <sys_clock_set_timeout+0x58>)
    679c:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    679e:	1a40      	subs	r0, r0, r1
		ticks = 0;
    67a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    67a4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    67a8:	bf18      	it	ne
    67aa:	2300      	movne	r3, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    67ac:	3201      	adds	r2, #1
    67ae:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    67b0:	4a09      	ldr	r2, [pc, #36]	; (67d8 <sys_clock_set_timeout+0x5c>)
    67b2:	480a      	ldr	r0, [pc, #40]	; (67dc <sys_clock_set_timeout+0x60>)
    67b4:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    67b6:	2000      	movs	r0, #0
    67b8:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    67ba:	4a04      	ldr	r2, [pc, #16]	; (67cc <sys_clock_set_timeout+0x50>)
    67bc:	4293      	cmp	r3, r2
    67be:	bf94      	ite	ls
    67c0:	18c9      	addls	r1, r1, r3
    67c2:	1889      	addhi	r1, r1, r2
    67c4:	f7ff bf60 	b.w	6688 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    67c8:	2300      	movs	r3, #0
    67ca:	e7e3      	b.n	6794 <sys_clock_set_timeout+0x18>
    67cc:	007fffff 	.word	0x007fffff
    67d0:	40011000 	.word	0x40011000
    67d4:	20000aa4 	.word	0x20000aa4
    67d8:	20000a98 	.word	0x20000a98
    67dc:	00006625 	.word	0x00006625

000067e0 <sys_clock_elapsed>:
    67e0:	4b04      	ldr	r3, [pc, #16]	; (67f4 <sys_clock_elapsed+0x14>)
    67e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    67e6:	4b04      	ldr	r3, [pc, #16]	; (67f8 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    67e8:	681b      	ldr	r3, [r3, #0]
    67ea:	1ac0      	subs	r0, r0, r3
}
    67ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    67f0:	4770      	bx	lr
    67f2:	bf00      	nop
    67f4:	40011000 	.word	0x40011000
    67f8:	20000aa4 	.word	0x20000aa4

000067fc <sys_clock_cycle_get_32>:
	__asm__ volatile(
    67fc:	f04f 0320 	mov.w	r3, #32
    6800:	f3ef 8211 	mrs	r2, BASEPRI
    6804:	f383 8812 	msr	BASEPRI_MAX, r3
    6808:	f3bf 8f6f 	isb	sy
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    680c:	4906      	ldr	r1, [pc, #24]	; (6828 <sys_clock_cycle_get_32+0x2c>)
    680e:	4b07      	ldr	r3, [pc, #28]	; (682c <sys_clock_cycle_get_32+0x30>)
    6810:	6808      	ldr	r0, [r1, #0]
    6812:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6816:	f382 8811 	msr	BASEPRI, r2
    681a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    681e:	1a1b      	subs	r3, r3, r0
    6820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    6824:	4418      	add	r0, r3
    6826:	4770      	bx	lr
    6828:	20000aa4 	.word	0x20000aa4
    682c:	40011000 	.word	0x40011000

00006830 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6834:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6838:	2a08      	cmp	r2, #8
    683a:	d106      	bne.n	684a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    683c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    6840:	2b05      	cmp	r3, #5
    6842:	d802      	bhi.n	684a <nrf52_errata_103+0x1a>
    6844:	4a02      	ldr	r2, [pc, #8]	; (6850 <nrf52_errata_103+0x20>)
    6846:	5cd0      	ldrb	r0, [r2, r3]
    6848:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    684a:	2000      	movs	r0, #0
    #endif
}
    684c:	4770      	bx	lr
    684e:	bf00      	nop
    6850:	0000ed48 	.word	0x0000ed48

00006854 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6854:	4a02      	ldr	r2, [pc, #8]	; (6860 <nvmc_wait+0xc>)
    6856:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    685a:	2b00      	cmp	r3, #0
    685c:	d0fb      	beq.n	6856 <nvmc_wait+0x2>
}
    685e:	4770      	bx	lr
    6860:	4001e000 	.word	0x4001e000

00006864 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    6864:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    6866:	f005 fc8c 	bl	c182 <nrf52_errata_136>
    686a:	b140      	cbz	r0, 687e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    686c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6870:	2200      	movs	r2, #0
    6872:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6876:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    687a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    687e:	f005 fc80 	bl	c182 <nrf52_errata_136>
    6882:	2800      	cmp	r0, #0
    6884:	d046      	beq.n	6914 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    688a:	4b60      	ldr	r3, [pc, #384]	; (6a0c <SystemInit+0x1a8>)
    688c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6890:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6894:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6898:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    689c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    68a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    68a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    68a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    68ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    68b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    68b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    68b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    68bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    68c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    68c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    68c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    68cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    68d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    68d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    68d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    68dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    68e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    68e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    68e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    68ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    68f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    68f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    68f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    68fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6900:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6904:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6908:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    690c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6910:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6914:	f7ff ff8c 	bl	6830 <nrf52_errata_103>
    6918:	b118      	cbz	r0, 6922 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    691a:	4b3d      	ldr	r3, [pc, #244]	; (6a10 <SystemInit+0x1ac>)
    691c:	4a3d      	ldr	r2, [pc, #244]	; (6a14 <SystemInit+0x1b0>)
    691e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6922:	f7ff ff85 	bl	6830 <nrf52_errata_103>
    6926:	b118      	cbz	r0, 6930 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6928:	4b3b      	ldr	r3, [pc, #236]	; (6a18 <SystemInit+0x1b4>)
    692a:	22fb      	movs	r2, #251	; 0xfb
    692c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6930:	f7ff ff7e 	bl	6830 <nrf52_errata_103>
    6934:	b170      	cbz	r0, 6954 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6936:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    693a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    693e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    6942:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    6946:	f022 020f 	bic.w	r2, r2, #15
    694a:	f003 030f 	and.w	r3, r3, #15
    694e:	4313      	orrs	r3, r2
    6950:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6954:	f7ff ff6c 	bl	6830 <nrf52_errata_103>
    6958:	b120      	cbz	r0, 6964 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    695a:	4b30      	ldr	r3, [pc, #192]	; (6a1c <SystemInit+0x1b8>)
    695c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6960:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6964:	f005 fc0d 	bl	c182 <nrf52_errata_136>
    6968:	b148      	cbz	r0, 697e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    696a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    696e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6972:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6974:	bf44      	itt	mi
    6976:	f06f 0201 	mvnmi.w	r2, #1
    697a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    697e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6982:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6986:	2a08      	cmp	r2, #8
    6988:	d10e      	bne.n	69a8 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    698a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    698e:	2b05      	cmp	r3, #5
    6990:	d802      	bhi.n	6998 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6992:	4a23      	ldr	r2, [pc, #140]	; (6a20 <SystemInit+0x1bc>)
    6994:	5cd3      	ldrb	r3, [r2, r3]
    6996:	b13b      	cbz	r3, 69a8 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6998:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    699c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    69a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    69a4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    69a8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    69ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    69b0:	2a00      	cmp	r2, #0
    69b2:	db03      	blt.n	69bc <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    69b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    69b8:	2b00      	cmp	r3, #0
    69ba:	da22      	bge.n	6a02 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69bc:	4919      	ldr	r1, [pc, #100]	; (6a24 <SystemInit+0x1c0>)
    69be:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69c0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69c4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69c8:	2412      	movs	r4, #18
    nvmc_wait();
    69ca:	f7ff ff43 	bl	6854 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69ce:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    69d2:	f7ff ff3f 	bl	6854 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    69d6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    69da:	f7ff ff3b 	bl	6854 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69de:	2300      	movs	r3, #0
    69e0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    69e4:	f7ff ff36 	bl	6854 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    69e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    69ec:	490e      	ldr	r1, [pc, #56]	; (6a28 <SystemInit+0x1c4>)
    69ee:	4b0f      	ldr	r3, [pc, #60]	; (6a2c <SystemInit+0x1c8>)
    69f0:	68ca      	ldr	r2, [r1, #12]
    69f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    69f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    69f8:	60cb      	str	r3, [r1, #12]
    69fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    69fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6a00:	e7fd      	b.n	69fe <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6a02:	4b0b      	ldr	r3, [pc, #44]	; (6a30 <SystemInit+0x1cc>)
    6a04:	4a0b      	ldr	r2, [pc, #44]	; (6a34 <SystemInit+0x1d0>)
    6a06:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    6a08:	bd10      	pop	{r4, pc}
    6a0a:	bf00      	nop
    6a0c:	4000c000 	.word	0x4000c000
    6a10:	40005000 	.word	0x40005000
    6a14:	00038148 	.word	0x00038148
    6a18:	4000f000 	.word	0x4000f000
    6a1c:	40029000 	.word	0x40029000
    6a20:	0000ed42 	.word	0x0000ed42
    6a24:	4001e000 	.word	0x4001e000
    6a28:	e000ed00 	.word	0xe000ed00
    6a2c:	05fa0004 	.word	0x05fa0004
    6a30:	200000e4 	.word	0x200000e4
    6a34:	03d09000 	.word	0x03d09000

00006a38 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6a38:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a3a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6a3c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6a3e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    6a42:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    6a44:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    6a48:	d014      	beq.n	6a74 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6a4a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a4e:	fa05 f204 	lsl.w	r2, r5, r4
    6a52:	ea23 0202 	bic.w	r2, r3, r2
    6a56:	e850 6f00 	ldrex	r6, [r0]
    6a5a:	429e      	cmp	r6, r3
    6a5c:	d104      	bne.n	6a68 <nrfx_flag32_alloc+0x30>
    6a5e:	e840 2c00 	strex	ip, r2, [r0]
    6a62:	f1bc 0f00 	cmp.w	ip, #0
    6a66:	d1f6      	bne.n	6a56 <nrfx_flag32_alloc+0x1e>
    6a68:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a6c:	d1e6      	bne.n	6a3c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    6a6e:	4802      	ldr	r0, [pc, #8]	; (6a78 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    6a70:	700c      	strb	r4, [r1, #0]
}
    6a72:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6a74:	4801      	ldr	r0, [pc, #4]	; (6a7c <nrfx_flag32_alloc+0x44>)
    6a76:	e7fc      	b.n	6a72 <nrfx_flag32_alloc+0x3a>
    6a78:	0bad0000 	.word	0x0bad0000
    6a7c:	0bad0002 	.word	0x0bad0002

00006a80 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6a80:	6803      	ldr	r3, [r0, #0]
    6a82:	40cb      	lsrs	r3, r1
    6a84:	07db      	lsls	r3, r3, #31
{
    6a86:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6a88:	d415      	bmi.n	6ab6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6a8a:	2301      	movs	r3, #1
    6a8c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    6a90:	6803      	ldr	r3, [r0, #0]
    6a92:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6a96:	ea41 0203 	orr.w	r2, r1, r3
    6a9a:	e850 4f00 	ldrex	r4, [r0]
    6a9e:	429c      	cmp	r4, r3
    6aa0:	d104      	bne.n	6aac <nrfx_flag32_free+0x2c>
    6aa2:	e840 2c00 	strex	ip, r2, [r0]
    6aa6:	f1bc 0f00 	cmp.w	ip, #0
    6aaa:	d1f6      	bne.n	6a9a <nrfx_flag32_free+0x1a>
    6aac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6ab0:	d1ee      	bne.n	6a90 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    6ab2:	4802      	ldr	r0, [pc, #8]	; (6abc <nrfx_flag32_free+0x3c>)
}
    6ab4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ab6:	4802      	ldr	r0, [pc, #8]	; (6ac0 <nrfx_flag32_free+0x40>)
    6ab8:	e7fc      	b.n	6ab4 <nrfx_flag32_free+0x34>
    6aba:	bf00      	nop
    6abc:	0bad0000 	.word	0x0bad0000
    6ac0:	0bad0004 	.word	0x0bad0004

00006ac4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6ac4:	4b04      	ldr	r3, [pc, #16]	; (6ad8 <nrfx_clock_init+0x14>)
    6ac6:	791a      	ldrb	r2, [r3, #4]
    6ac8:	b922      	cbnz	r2, 6ad4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6aca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6acc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6ace:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6ad0:	4802      	ldr	r0, [pc, #8]	; (6adc <nrfx_clock_init+0x18>)
    6ad2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6ad4:	4802      	ldr	r0, [pc, #8]	; (6ae0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6ad6:	4770      	bx	lr
    6ad8:	20000aa8 	.word	0x20000aa8
    6adc:	0bad0000 	.word	0x0bad0000
    6ae0:	0bad000c 	.word	0x0bad000c

00006ae4 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6ae4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6ae6:	b110      	cbz	r0, 6aee <nrfx_clock_stop+0xa>
    6ae8:	2801      	cmp	r0, #1
    6aea:	d017      	beq.n	6b1c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6aec:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    6aee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6af2:	2302      	movs	r3, #2
    6af4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6af8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    6afc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b00:	2301      	movs	r3, #1
    6b02:	60e3      	str	r3, [r4, #12]
    6b04:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b08:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    6b0c:	03db      	lsls	r3, r3, #15
    6b0e:	d5ed      	bpl.n	6aec <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6b10:	2001      	movs	r0, #1
    6b12:	f005 fb40 	bl	c196 <nrfx_busy_wait>
    6b16:	3d01      	subs	r5, #1
    6b18:	d1f6      	bne.n	6b08 <nrfx_clock_stop+0x24>
    6b1a:	e7e7      	b.n	6aec <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    6b1c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b20:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    6b22:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    6b2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b2e:	6060      	str	r0, [r4, #4]
    6b30:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6b34:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6b38:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    6b3c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6b3e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6b42:	d505      	bpl.n	6b50 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6b44:	b123      	cbz	r3, 6b50 <nrfx_clock_stop+0x6c>
    6b46:	2001      	movs	r0, #1
    6b48:	f005 fb25 	bl	c196 <nrfx_busy_wait>
    6b4c:	3d01      	subs	r5, #1
    6b4e:	d1f1      	bne.n	6b34 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    6b50:	4b01      	ldr	r3, [pc, #4]	; (6b58 <nrfx_clock_stop+0x74>)
    6b52:	2200      	movs	r2, #0
    6b54:	715a      	strb	r2, [r3, #5]
    6b56:	e7c9      	b.n	6aec <nrfx_clock_stop+0x8>
    6b58:	20000aa8 	.word	0x20000aa8

00006b5c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6b60:	b510      	push	{r4, lr}
    6b62:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6b66:	b16a      	cbz	r2, 6b84 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b68:	2200      	movs	r2, #0
    6b6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6b6e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6b72:	2201      	movs	r2, #1
    6b74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6b78:	4b11      	ldr	r3, [pc, #68]	; (6bc0 <nrfx_power_clock_irq_handler+0x64>)
    6b7a:	7958      	ldrb	r0, [r3, #5]
    6b7c:	b910      	cbnz	r0, 6b84 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    6b7e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6b80:	681b      	ldr	r3, [r3, #0]
    6b82:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6b8c:	b172      	cbz	r2, 6bac <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b8e:	2200      	movs	r2, #0
    6b90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b98:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b9c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6ba0:	0792      	lsls	r2, r2, #30
    6ba2:	d104      	bne.n	6bae <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6ba4:	2201      	movs	r2, #1
    6ba6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6baa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6bac:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6bae:	2202      	movs	r2, #2
    6bb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6bb4:	4b02      	ldr	r3, [pc, #8]	; (6bc0 <nrfx_power_clock_irq_handler+0x64>)
}
    6bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	2001      	movs	r0, #1
    6bbe:	4718      	bx	r3
    6bc0:	20000aa8 	.word	0x20000aa8

00006bc4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6bc4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6bc6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6bca:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    6bcc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6bce:	6002      	str	r2, [r0, #0]
}
    6bd0:	4802      	ldr	r0, [pc, #8]	; (6bdc <nrf_gpio_pin_port_decode+0x18>)
    6bd2:	bf18      	it	ne
    6bd4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6bd8:	4770      	bx	lr
    6bda:	bf00      	nop
    6bdc:	50000300 	.word	0x50000300

00006be0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6be0:	4b03      	ldr	r3, [pc, #12]	; (6bf0 <pin_in_use_by_te+0x10>)
    6be2:	3008      	adds	r0, #8
    6be4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6be8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6bec:	4770      	bx	lr
    6bee:	bf00      	nop
    6bf0:	200000e8 	.word	0x200000e8

00006bf4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bf6:	f100 0308 	add.w	r3, r0, #8
    6bfa:	4c0c      	ldr	r4, [pc, #48]	; (6c2c <call_handler+0x38>)
    6bfc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6c00:	05da      	lsls	r2, r3, #23
{
    6c02:	4605      	mov	r5, r0
    6c04:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c06:	d507      	bpl.n	6c18 <call_handler+0x24>
    6c08:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6c0c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6c10:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6c14:	6852      	ldr	r2, [r2, #4]
    6c16:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6c18:	68a3      	ldr	r3, [r4, #8]
    6c1a:	b12b      	cbz	r3, 6c28 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c1c:	68e2      	ldr	r2, [r4, #12]
    6c1e:	4631      	mov	r1, r6
    6c20:	4628      	mov	r0, r5
    }
}
    6c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c26:	4718      	bx	r3
}
    6c28:	bd70      	pop	{r4, r5, r6, pc}
    6c2a:	bf00      	nop
    6c2c:	200000e8 	.word	0x200000e8

00006c30 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c30:	4a12      	ldr	r2, [pc, #72]	; (6c7c <release_handler+0x4c>)
    6c32:	3008      	adds	r0, #8
{
    6c34:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c36:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6c3a:	05d9      	lsls	r1, r3, #23
    6c3c:	d51b      	bpl.n	6c76 <release_handler+0x46>
    6c3e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6c42:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c46:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c4a:	f102 0410 	add.w	r4, r2, #16
    6c4e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6c50:	f834 3b02 	ldrh.w	r3, [r4], #2
    6c54:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c58:	d003      	beq.n	6c62 <release_handler+0x32>
    6c5a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6c5e:	4299      	cmp	r1, r3
    6c60:	d009      	beq.n	6c76 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c62:	3001      	adds	r0, #1
    6c64:	2830      	cmp	r0, #48	; 0x30
    6c66:	d1f3      	bne.n	6c50 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6c68:	2300      	movs	r3, #0
    6c6a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c6e:	4804      	ldr	r0, [pc, #16]	; (6c80 <release_handler+0x50>)
}
    6c70:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c72:	f7ff bf05 	b.w	6a80 <nrfx_flag32_free>
}
    6c76:	bc10      	pop	{r4}
    6c78:	4770      	bx	lr
    6c7a:	bf00      	nop
    6c7c:	200000e8 	.word	0x200000e8
    6c80:	2000015c 	.word	0x2000015c

00006c84 <pin_handler_trigger_uninit>:
{
    6c84:	b538      	push	{r3, r4, r5, lr}
    6c86:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6c88:	f7ff ffaa 	bl	6be0 <pin_in_use_by_te>
    6c8c:	4c09      	ldr	r4, [pc, #36]	; (6cb4 <pin_handler_trigger_uninit+0x30>)
    6c8e:	f102 0508 	add.w	r5, r2, #8
    6c92:	b140      	cbz	r0, 6ca6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c94:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6c98:	4907      	ldr	r1, [pc, #28]	; (6cb8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6c9a:	0b5b      	lsrs	r3, r3, #13
    6c9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6ca0:	2000      	movs	r0, #0
    6ca2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6ca6:	4610      	mov	r0, r2
    6ca8:	f7ff ffc2 	bl	6c30 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6cac:	2300      	movs	r3, #0
    6cae:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6cb2:	bd38      	pop	{r3, r4, r5, pc}
    6cb4:	200000e8 	.word	0x200000e8
    6cb8:	40006000 	.word	0x40006000

00006cbc <nrfx_gpiote_input_configure>:
{
    6cbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6cc0:	4604      	mov	r4, r0
    6cc2:	4617      	mov	r7, r2
    6cc4:	461d      	mov	r5, r3
    if (p_input_config)
    6cc6:	b321      	cbz	r1, 6d12 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6cc8:	4e4e      	ldr	r6, [pc, #312]	; (6e04 <nrfx_gpiote_input_configure+0x148>)
    6cca:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6cce:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    6cd2:	079b      	lsls	r3, r3, #30
    6cd4:	d506      	bpl.n	6ce4 <nrfx_gpiote_input_configure+0x28>
    6cd6:	f7ff ff83 	bl	6be0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    6cda:	b118      	cbz	r0, 6ce4 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    6cdc:	484a      	ldr	r0, [pc, #296]	; (6e08 <nrfx_gpiote_input_configure+0x14c>)
}
    6cde:	b004      	add	sp, #16
    6ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6ce4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6ce6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6cea:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6cee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6cf2:	f10d 020f 	add.w	r2, sp, #15
    6cf6:	460b      	mov	r3, r1
    6cf8:	4620      	mov	r0, r4
    6cfa:	f10d 010e 	add.w	r1, sp, #14
    6cfe:	f005 fa82 	bl	c206 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6d02:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    6d06:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6d0a:	f043 0301 	orr.w	r3, r3, #1
    6d0e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    6d12:	b197      	cbz	r7, 6d3a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6d14:	4b3b      	ldr	r3, [pc, #236]	; (6e04 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6d16:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6d18:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6d1a:	f104 0008 	add.w	r0, r4, #8
    6d1e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    6d22:	078f      	lsls	r7, r1, #30
    6d24:	d50c      	bpl.n	6d40 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    6d26:	2a00      	cmp	r2, #0
    6d28:	d1d8      	bne.n	6cdc <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6d2a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    6d2e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6d32:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    6d36:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    6d3a:	bbcd      	cbnz	r5, 6db0 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    6d3c:	4833      	ldr	r0, [pc, #204]	; (6e0c <nrfx_gpiote_input_configure+0x150>)
    6d3e:	e7ce      	b.n	6cde <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6d40:	f021 0120 	bic.w	r1, r1, #32
    6d44:	04c9      	lsls	r1, r1, #19
    6d46:	0cc9      	lsrs	r1, r1, #19
    6d48:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    6d4c:	2a00      	cmp	r2, #0
    6d4e:	d0ec      	beq.n	6d2a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    6d50:	2e03      	cmp	r6, #3
    6d52:	d8c3      	bhi.n	6cdc <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6d54:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6d56:	b92e      	cbnz	r6, 6d64 <nrfx_gpiote_input_configure+0xa8>
    6d58:	4a2d      	ldr	r2, [pc, #180]	; (6e10 <nrfx_gpiote_input_configure+0x154>)
    6d5a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    6d5e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6d62:	e7e2      	b.n	6d2a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d64:	00ba      	lsls	r2, r7, #2
    6d66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6d6a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6d6e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    6d72:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6d76:	f02c 0c03 	bic.w	ip, ip, #3
    6d7a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6d7e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6d82:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    6d86:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    6d8a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d8e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6d92:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    6d96:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    6d9a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    6d9e:	ea4c 0c0e 	orr.w	ip, ip, lr
    6da2:	f041 0120 	orr.w	r1, r1, #32
    6da6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    6daa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    6dae:	e7bc      	b.n	6d2a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6db0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6db4:	4620      	mov	r0, r4
    6db6:	f7ff ff3b 	bl	6c30 <release_handler>
    if (!handler)
    6dba:	2e00      	cmp	r6, #0
    6dbc:	d0be      	beq.n	6d3c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6dbe:	4d11      	ldr	r5, [pc, #68]	; (6e04 <nrfx_gpiote_input_configure+0x148>)
    6dc0:	682b      	ldr	r3, [r5, #0]
    6dc2:	429e      	cmp	r6, r3
    6dc4:	d104      	bne.n	6dd0 <nrfx_gpiote_input_configure+0x114>
    6dc6:	686b      	ldr	r3, [r5, #4]
    6dc8:	429f      	cmp	r7, r3
    6dca:	d101      	bne.n	6dd0 <nrfx_gpiote_input_configure+0x114>
    6dcc:	2200      	movs	r2, #0
    6dce:	e00a      	b.n	6de6 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6dd0:	4810      	ldr	r0, [pc, #64]	; (6e14 <nrfx_gpiote_input_configure+0x158>)
    6dd2:	f10d 010f 	add.w	r1, sp, #15
    6dd6:	f7ff fe2f 	bl	6a38 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6dda:	4b0c      	ldr	r3, [pc, #48]	; (6e0c <nrfx_gpiote_input_configure+0x150>)
    6ddc:	4298      	cmp	r0, r3
    6dde:	f47f af7e 	bne.w	6cde <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    6de2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6de6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6dea:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6dee:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6df0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6df2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6df6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6dfe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    6e02:	e79b      	b.n	6d3c <nrfx_gpiote_input_configure+0x80>
    6e04:	200000e8 	.word	0x200000e8
    6e08:	0bad0004 	.word	0x0bad0004
    6e0c:	0bad0000 	.word	0x0bad0000
    6e10:	40006000 	.word	0x40006000
    6e14:	2000015c 	.word	0x2000015c

00006e18 <nrfx_gpiote_output_configure>:
{
    6e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e1a:	4604      	mov	r4, r0
    6e1c:	b085      	sub	sp, #20
    6e1e:	4615      	mov	r5, r2
    if (p_config)
    6e20:	b319      	cbz	r1, 6e6a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e22:	4e33      	ldr	r6, [pc, #204]	; (6ef0 <nrfx_gpiote_output_configure+0xd8>)
    6e24:	f100 0708 	add.w	r7, r0, #8
    6e28:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6e2c:	0793      	lsls	r3, r2, #30
    6e2e:	d403      	bmi.n	6e38 <nrfx_gpiote_output_configure+0x20>
    6e30:	f7ff fed6 	bl	6be0 <pin_in_use_by_te>
    6e34:	2800      	cmp	r0, #0
    6e36:	d158      	bne.n	6eea <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6e38:	f012 0f1c 	tst.w	r2, #28
    6e3c:	d002      	beq.n	6e44 <nrfx_gpiote_output_configure+0x2c>
    6e3e:	784b      	ldrb	r3, [r1, #1]
    6e40:	2b01      	cmp	r3, #1
    6e42:	d052      	beq.n	6eea <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6e44:	2301      	movs	r3, #1
    6e46:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6e4a:	2300      	movs	r3, #0
    6e4c:	e9cd 1300 	strd	r1, r3, [sp]
    6e50:	1c4a      	adds	r2, r1, #1
    6e52:	1c8b      	adds	r3, r1, #2
    6e54:	4620      	mov	r0, r4
    6e56:	f10d 010f 	add.w	r1, sp, #15
    6e5a:	f005 f9d4 	bl	c206 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6e5e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6e62:	f043 0303 	orr.w	r3, r3, #3
    6e66:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    6e6a:	b915      	cbnz	r5, 6e72 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    6e6c:	4821      	ldr	r0, [pc, #132]	; (6ef4 <nrfx_gpiote_output_configure+0xdc>)
}
    6e6e:	b005      	add	sp, #20
    6e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e72:	4e1f      	ldr	r6, [pc, #124]	; (6ef0 <nrfx_gpiote_output_configure+0xd8>)
    6e74:	f104 0708 	add.w	r7, r4, #8
    6e78:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6e7c:	0783      	lsls	r3, r0, #30
    6e7e:	d534      	bpl.n	6eea <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    6e80:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6e84:	4661      	mov	r1, ip
    6e86:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6e88:	f020 0020 	bic.w	r0, r0, #32
    6e8c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6e90:	04c0      	lsls	r0, r0, #19
    6e92:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6e96:	0cc0      	lsrs	r0, r0, #19
    6e98:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e9c:	2300      	movs	r3, #0
    6e9e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6ea2:	786a      	ldrb	r2, [r5, #1]
    6ea4:	2a00      	cmp	r2, #0
    6ea6:	d0e1      	beq.n	6e6c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6ea8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6eac:	78ad      	ldrb	r5, [r5, #2]
    6eae:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6eb2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6eb6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eba:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6ebe:	0223      	lsls	r3, r4, #8
    6ec0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6ec4:	0412      	lsls	r2, r2, #16
    6ec6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eca:	ea43 030e 	orr.w	r3, r3, lr
    6ece:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6ed0:	052a      	lsls	r2, r5, #20
    6ed2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6ed6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eda:	4313      	orrs	r3, r2
    6edc:	f040 0020 	orr.w	r0, r0, #32
    6ee0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6ee4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6ee8:	e7c0      	b.n	6e6c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    6eea:	4803      	ldr	r0, [pc, #12]	; (6ef8 <nrfx_gpiote_output_configure+0xe0>)
    6eec:	e7bf      	b.n	6e6e <nrfx_gpiote_output_configure+0x56>
    6eee:	bf00      	nop
    6ef0:	200000e8 	.word	0x200000e8
    6ef4:	0bad0000 	.word	0x0bad0000
    6ef8:	0bad0004 	.word	0x0bad0004

00006efc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6efc:	4b01      	ldr	r3, [pc, #4]	; (6f04 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6efe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6f02:	4770      	bx	lr
    6f04:	200000e8 	.word	0x200000e8

00006f08 <nrfx_gpiote_channel_get>:
{
    6f08:	b508      	push	{r3, lr}
    6f0a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6f0c:	f7ff fe68 	bl	6be0 <pin_in_use_by_te>
    6f10:	b138      	cbz	r0, 6f22 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f12:	4b05      	ldr	r3, [pc, #20]	; (6f28 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6f14:	4805      	ldr	r0, [pc, #20]	; (6f2c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f16:	3208      	adds	r2, #8
    6f18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6f1c:	0b5b      	lsrs	r3, r3, #13
    6f1e:	700b      	strb	r3, [r1, #0]
}
    6f20:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6f22:	4803      	ldr	r0, [pc, #12]	; (6f30 <nrfx_gpiote_channel_get+0x28>)
    6f24:	e7fc      	b.n	6f20 <nrfx_gpiote_channel_get+0x18>
    6f26:	bf00      	nop
    6f28:	200000e8 	.word	0x200000e8
    6f2c:	0bad0000 	.word	0x0bad0000
    6f30:	0bad0004 	.word	0x0bad0004

00006f34 <nrfx_gpiote_init>:
{
    6f34:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6f36:	4c0f      	ldr	r4, [pc, #60]	; (6f74 <nrfx_gpiote_init+0x40>)
    6f38:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6f3c:	b9bd      	cbnz	r5, 6f6e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6f3e:	2260      	movs	r2, #96	; 0x60
    6f40:	4629      	mov	r1, r5
    6f42:	f104 0010 	add.w	r0, r4, #16
    6f46:	f005 fdd3 	bl	caf0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6f4a:	2006      	movs	r0, #6
    6f4c:	f7fd ff94 	bl	4e78 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f50:	4b09      	ldr	r3, [pc, #36]	; (6f78 <nrfx_gpiote_init+0x44>)
    return err_code;
    6f52:	480a      	ldr	r0, [pc, #40]	; (6f7c <nrfx_gpiote_init+0x48>)
    6f54:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6f58:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6f5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6f64:	2301      	movs	r3, #1
    6f66:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6f6a:	6763      	str	r3, [r4, #116]	; 0x74
}
    6f6c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6f6e:	4804      	ldr	r0, [pc, #16]	; (6f80 <nrfx_gpiote_init+0x4c>)
    6f70:	e7fc      	b.n	6f6c <nrfx_gpiote_init+0x38>
    6f72:	bf00      	nop
    6f74:	200000e8 	.word	0x200000e8
    6f78:	40006000 	.word	0x40006000
    6f7c:	0bad0000 	.word	0x0bad0000
    6f80:	0bad0005 	.word	0x0bad0005

00006f84 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6f84:	4b03      	ldr	r3, [pc, #12]	; (6f94 <nrfx_gpiote_is_init+0x10>)
    6f86:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6f8a:	3800      	subs	r0, #0
    6f8c:	bf18      	it	ne
    6f8e:	2001      	movne	r0, #1
    6f90:	4770      	bx	lr
    6f92:	bf00      	nop
    6f94:	200000e8 	.word	0x200000e8

00006f98 <nrfx_gpiote_channel_free>:
{
    6f98:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6f9a:	4801      	ldr	r0, [pc, #4]	; (6fa0 <nrfx_gpiote_channel_free+0x8>)
    6f9c:	f7ff bd70 	b.w	6a80 <nrfx_flag32_free>
    6fa0:	20000158 	.word	0x20000158

00006fa4 <nrfx_gpiote_channel_alloc>:
{
    6fa4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6fa6:	4801      	ldr	r0, [pc, #4]	; (6fac <nrfx_gpiote_channel_alloc+0x8>)
    6fa8:	f7ff bd46 	b.w	6a38 <nrfx_flag32_alloc>
    6fac:	20000158 	.word	0x20000158

00006fb0 <nrfx_gpiote_trigger_enable>:
{
    6fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6fb2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fb4:	f7ff fe14 	bl	6be0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fb8:	f104 0208 	add.w	r2, r4, #8
    6fbc:	4b1e      	ldr	r3, [pc, #120]	; (7038 <nrfx_gpiote_trigger_enable+0x88>)
    6fbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fc2:	b1e8      	cbz	r0, 7000 <nrfx_gpiote_trigger_enable+0x50>
    6fc4:	f013 0502 	ands.w	r5, r3, #2
    6fc8:	d11a      	bne.n	7000 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6fca:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6fcc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6fce:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6fd2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6fd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6fda:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6fde:	6005      	str	r5, [r0, #0]
    6fe0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6fe2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6fe6:	f040 0001 	orr.w	r0, r0, #1
    6fea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6fee:	b129      	cbz	r1, 6ffc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6ff0:	2201      	movs	r2, #1
    6ff2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6ff6:	4a11      	ldr	r2, [pc, #68]	; (703c <nrfx_gpiote_trigger_enable+0x8c>)
    6ff8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6ffc:	b003      	add	sp, #12
    6ffe:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7000:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7004:	2b04      	cmp	r3, #4
    7006:	d012      	beq.n	702e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7008:	2b05      	cmp	r3, #5
    700a:	d012      	beq.n	7032 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    700c:	a801      	add	r0, sp, #4
    700e:	9401      	str	r4, [sp, #4]
    7010:	f7ff fdd8 	bl	6bc4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7014:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    7016:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    701a:	40d9      	lsrs	r1, r3
    701c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7020:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7022:	4620      	mov	r0, r4
}
    7024:	b003      	add	sp, #12
    7026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    702a:	f005 b933 	b.w	c294 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    702e:	2103      	movs	r1, #3
    7030:	e7f7      	b.n	7022 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7032:	2102      	movs	r1, #2
    7034:	e7f5      	b.n	7022 <nrfx_gpiote_trigger_enable+0x72>
    7036:	bf00      	nop
    7038:	200000e8 	.word	0x200000e8
    703c:	40006000 	.word	0x40006000

00007040 <nrfx_gpiote_trigger_disable>:
{
    7040:	b508      	push	{r3, lr}
    7042:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7044:	f7ff fdcc 	bl	6be0 <pin_in_use_by_te>
    7048:	b1c0      	cbz	r0, 707c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    704a:	f102 0108 	add.w	r1, r2, #8
    704e:	4b0e      	ldr	r3, [pc, #56]	; (7088 <nrfx_gpiote_trigger_disable+0x48>)
    7050:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7054:	0799      	lsls	r1, r3, #30
    7056:	d411      	bmi.n	707c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7058:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    705a:	2201      	movs	r2, #1
    705c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    705e:	009b      	lsls	r3, r3, #2
    7060:	490a      	ldr	r1, [pc, #40]	; (708c <nrfx_gpiote_trigger_disable+0x4c>)
    7062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7066:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    706a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    706e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7072:	f022 0203 	bic.w	r2, r2, #3
    7076:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    707a:	bd08      	pop	{r3, pc}
    707c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7080:	2100      	movs	r1, #0
    7082:	4610      	mov	r0, r2
    7084:	f005 b906 	b.w	c294 <nrf_gpio_cfg_sense_set>
    7088:	200000e8 	.word	0x200000e8
    708c:	40006000 	.word	0x40006000

00007090 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7090:	4b0e      	ldr	r3, [pc, #56]	; (70cc <nrfx_gpiote_pin_uninit+0x3c>)
    7092:	f100 0208 	add.w	r2, r0, #8
{
    7096:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7098:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    709c:	07db      	lsls	r3, r3, #31
{
    709e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    70a0:	d511      	bpl.n	70c6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    70a2:	f7ff ffcd 	bl	7040 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    70a6:	4620      	mov	r0, r4
    70a8:	f7ff fdec 	bl	6c84 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    70ac:	a801      	add	r0, sp, #4
    70ae:	9401      	str	r4, [sp, #4]
    70b0:	f7ff fd88 	bl	6bc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    70b4:	9b01      	ldr	r3, [sp, #4]
    70b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    70ba:	2202      	movs	r2, #2
    70bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    70c0:	4803      	ldr	r0, [pc, #12]	; (70d0 <nrfx_gpiote_pin_uninit+0x40>)
}
    70c2:	b002      	add	sp, #8
    70c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    70c6:	4803      	ldr	r0, [pc, #12]	; (70d4 <nrfx_gpiote_pin_uninit+0x44>)
    70c8:	e7fb      	b.n	70c2 <nrfx_gpiote_pin_uninit+0x32>
    70ca:	bf00      	nop
    70cc:	200000e8 	.word	0x200000e8
    70d0:	0bad0000 	.word	0x0bad0000
    70d4:	0bad0004 	.word	0x0bad0004

000070d8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    70d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70dc:	4b64      	ldr	r3, [pc, #400]	; (7270 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    70de:	4865      	ldr	r0, [pc, #404]	; (7274 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    70e0:	4965      	ldr	r1, [pc, #404]	; (7278 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    70e2:	2600      	movs	r6, #0
{
    70e4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    70e6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    70e8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70ea:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    70ec:	b135      	cbz	r5, 70fc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    70ee:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    70f2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    70f4:	bf1e      	ittt	ne
    70f6:	601c      	strne	r4, [r3, #0]
    70f8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    70fa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    70fc:	3304      	adds	r3, #4
    70fe:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7100:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7104:	d1f1      	bne.n	70ea <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7106:	f8df 816c 	ldr.w	r8, [pc, #364]	; 7274 <nrfx_gpiote_irq_handler+0x19c>
    710a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    710e:	2b00      	cmp	r3, #0
    7110:	f000 8091 	beq.w	7236 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    7114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7118:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    711c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    711e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    7122:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    7126:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7128:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    712c:	2700      	movs	r7, #0
            while (latch[i])
    712e:	f10d 0910 	add.w	r9, sp, #16
    7132:	017b      	lsls	r3, r7, #5
    7134:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    7136:	f04f 0a01 	mov.w	sl, #1
    713a:	e049      	b.n	71d0 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    713c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    713e:	4a4f      	ldr	r2, [pc, #316]	; (727c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    7140:	fa94 f4a4 	rbit	r4, r4
    7144:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7148:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    714a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    714e:	08e0      	lsrs	r0, r4, #3
    7150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7154:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    7156:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    715a:	fa0a fc02 	lsl.w	ip, sl, r2
    715e:	f819 2000 	ldrb.w	r2, [r9, r0]
    7162:	ea22 020c 	bic.w	r2, r2, ip
    7166:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    716a:	a803      	add	r0, sp, #12
    716c:	f3c3 0582 	ubfx	r5, r3, #2, #3
    7170:	0899      	lsrs	r1, r3, #2
    7172:	f7ff fd27 	bl	6bc4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7176:	9a03      	ldr	r2, [sp, #12]
    7178:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    717c:	074b      	lsls	r3, r1, #29
    717e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7182:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7184:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    7188:	d529      	bpl.n	71de <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    718a:	4620      	mov	r0, r4
    718c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    718e:	b2d5      	uxtb	r5, r2
    7190:	f7ff fd30 	bl	6bf4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7194:	a803      	add	r0, sp, #12
    7196:	9403      	str	r4, [sp, #12]
    7198:	f7ff fd14 	bl	6bc4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    719c:	9b03      	ldr	r3, [sp, #12]
    719e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    71a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    71a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    71aa:	429d      	cmp	r5, r3
    71ac:	d107      	bne.n	71be <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    71ae:	2100      	movs	r1, #0
    71b0:	4620      	mov	r0, r4
    71b2:	f005 f86f 	bl	c294 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    71b6:	4629      	mov	r1, r5
    71b8:	4620      	mov	r0, r4
    71ba:	f005 f86b 	bl	c294 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71be:	a803      	add	r0, sp, #12
    71c0:	9403      	str	r4, [sp, #12]
    71c2:	f7ff fcff 	bl	6bc4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    71c6:	9b03      	ldr	r3, [sp, #12]
    71c8:	fa0a f303 	lsl.w	r3, sl, r3
    71cc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    71d0:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    71d4:	2c00      	cmp	r4, #0
    71d6:	d1b1      	bne.n	713c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    71d8:	b9cf      	cbnz	r7, 720e <nrfx_gpiote_irq_handler+0x136>
    71da:	2701      	movs	r7, #1
    71dc:	e7a9      	b.n	7132 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    71de:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    71e0:	bf0c      	ite	eq
    71e2:	2103      	moveq	r1, #3
    71e4:	2102      	movne	r1, #2
    71e6:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    71e8:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    71ea:	f005 f853 	bl	c294 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    71ee:	2d03      	cmp	r5, #3
    71f0:	d004      	beq.n	71fc <nrfx_gpiote_irq_handler+0x124>
    71f2:	9a01      	ldr	r2, [sp, #4]
    71f4:	2a02      	cmp	r2, #2
    71f6:	d106      	bne.n	7206 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    71f8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    71fa:	d1e0      	bne.n	71be <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    71fc:	4659      	mov	r1, fp
    71fe:	4620      	mov	r0, r4
    7200:	f7ff fcf8 	bl	6bf4 <call_handler>
    7204:	e7db      	b.n	71be <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7206:	2a03      	cmp	r2, #3
    7208:	d1d9      	bne.n	71be <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    720a:	2d02      	cmp	r5, #2
    720c:	e7f5      	b.n	71fa <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    720e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    7212:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    7216:	491a      	ldr	r1, [pc, #104]	; (7280 <nrfx_gpiote_irq_handler+0x1a8>)
    7218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    721c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    7220:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7222:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    7226:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    722a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    722c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    7230:	4313      	orrs	r3, r2
    7232:	f47f af7b 	bne.w	712c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    7236:	2401      	movs	r4, #1
    while (mask)
    7238:	b916      	cbnz	r6, 7240 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    723a:	b007      	add	sp, #28
    723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7240:	fa96 f3a6 	rbit	r3, r6
    7244:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7248:	fa04 f203 	lsl.w	r2, r4, r3
    724c:	009b      	lsls	r3, r3, #2
    724e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7252:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7256:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    725a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    725e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7262:	f3c0 2005 	ubfx	r0, r0, #8, #6
    7266:	f3c1 4101 	ubfx	r1, r1, #16, #2
    726a:	f7ff fcc3 	bl	6bf4 <call_handler>
    726e:	e7e3      	b.n	7238 <nrfx_gpiote_irq_handler+0x160>
    7270:	40006100 	.word	0x40006100
    7274:	40006000 	.word	0x40006000
    7278:	40006120 	.word	0x40006120
    727c:	200000e8 	.word	0x200000e8
    7280:	50000300 	.word	0x50000300

00007284 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    7284:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    7286:	4801      	ldr	r0, [pc, #4]	; (728c <nrfx_ppi_channel_alloc+0x8>)
    7288:	f7ff bbd6 	b.w	6a38 <nrfx_flag32_alloc>
    728c:	20000164 	.word	0x20000164

00007290 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    7290:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    7292:	4b30      	ldr	r3, [pc, #192]	; (7354 <twi_tx_start_transfer+0xc4>)
    7294:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7296:	2300      	movs	r3, #0
    7298:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    729c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    72a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    72a4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    72a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    72ac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    72b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    72b4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    72b8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    72bc:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    72be:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72c2:	2301      	movs	r3, #1
    72c4:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    72c6:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    72ca:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    72cc:	429a      	cmp	r2, r3
    72ce:	bf18      	it	ne
    72d0:	6083      	strne	r3, [r0, #8]
{
    72d2:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    72d4:	f004 ffed 	bl	c2b2 <twi_send_byte>

    if (p_cb->handler)
    72d8:	682b      	ldr	r3, [r5, #0]
    72da:	b183      	cbz	r3, 72fe <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    72dc:	f240 2386 	movw	r3, #646	; 0x286
    72e0:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    72e2:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    72e4:	481c      	ldr	r0, [pc, #112]	; (7358 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    72e6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    72ea:	b003      	add	sp, #12
    72ec:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    72ee:	4629      	mov	r1, r5
    72f0:	4620      	mov	r0, r4
    72f2:	f004 fffb 	bl	c2ec <twi_transfer>
        while ((hw_timeout > 0) &&
    72f6:	b128      	cbz	r0, 7304 <twi_tx_start_transfer+0x74>
            hw_timeout--;
    72f8:	9b01      	ldr	r3, [sp, #4]
    72fa:	3b01      	subs	r3, #1
    72fc:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    72fe:	9b01      	ldr	r3, [sp, #4]
    7300:	2b00      	cmp	r3, #0
    7302:	dcf4      	bgt.n	72ee <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    7304:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    7308:	b95b      	cbnz	r3, 7322 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    730a:	4813      	ldr	r0, [pc, #76]	; (7358 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    730c:	9b01      	ldr	r3, [sp, #4]
    730e:	2b00      	cmp	r3, #0
    7310:	dceb      	bgt.n	72ea <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7312:	2300      	movs	r3, #0
    7314:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7318:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    731a:	4810      	ldr	r0, [pc, #64]	; (735c <twi_tx_start_transfer+0xcc>)
    731c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    7320:	e7e3      	b.n	72ea <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    7322:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7326:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    732a:	b18b      	cbz	r3, 7350 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    732c:	4a0c      	ldr	r2, [pc, #48]	; (7360 <twi_tx_start_transfer+0xd0>)
    732e:	480b      	ldr	r0, [pc, #44]	; (735c <twi_tx_start_transfer+0xcc>)
    7330:	f013 0f01 	tst.w	r3, #1
    7334:	bf18      	it	ne
    7336:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    7338:	f013 0f02 	tst.w	r3, #2
    733c:	f102 0201 	add.w	r2, r2, #1
    7340:	bf18      	it	ne
    7342:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    7344:	f013 0f04 	tst.w	r3, #4
    7348:	4b06      	ldr	r3, [pc, #24]	; (7364 <twi_tx_start_transfer+0xd4>)
    734a:	bf18      	it	ne
    734c:	4618      	movne	r0, r3
    734e:	e7dd      	b.n	730c <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    7350:	4802      	ldr	r0, [pc, #8]	; (735c <twi_tx_start_transfer+0xcc>)
    7352:	e7db      	b.n	730c <twi_tx_start_transfer+0x7c>
    7354:	000186a0 	.word	0x000186a0
    7358:	0bad0000 	.word	0x0bad0000
    735c:	0bad0001 	.word	0x0bad0001
    7360:	0bae0000 	.word	0x0bae0000
    7364:	0bae0002 	.word	0x0bae0002

00007368 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    7368:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    736a:	4b34      	ldr	r3, [pc, #208]	; (743c <twi_rx_start_transfer+0xd4>)
    736c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    736e:	2300      	movs	r3, #0
    7370:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7374:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7378:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    737c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    7380:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    7384:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    7388:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    738c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    7390:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    7392:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7396:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7398:	2b01      	cmp	r3, #1
{
    739a:	4604      	mov	r4, r0
    739c:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    739e:	d117      	bne.n	73d0 <twi_rx_start_transfer+0x68>
    73a0:	6a0b      	ldr	r3, [r1, #32]
    73a2:	065b      	lsls	r3, r3, #25
    73a4:	d414      	bmi.n	73d0 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    73a6:	2302      	movs	r3, #2
    73a8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73ac:	2301      	movs	r3, #1
    73ae:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    73b0:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    73b4:	2a02      	cmp	r2, #2
    73b6:	bf18      	it	ne
    73b8:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    73ba:	682b      	ldr	r3, [r5, #0]
    73bc:	b193      	cbz	r3, 73e4 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    73be:	f240 2386 	movw	r3, #646	; 0x286
    73c2:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    73c4:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    73c6:	481e      	ldr	r0, [pc, #120]	; (7440 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    73c8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    73cc:	b003      	add	sp, #12
    73ce:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    73d0:	2301      	movs	r3, #1
    73d2:	e7e9      	b.n	73a8 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    73d4:	4629      	mov	r1, r5
    73d6:	4620      	mov	r0, r4
    73d8:	f004 ff88 	bl	c2ec <twi_transfer>
        while ((hw_timeout > 0) &&
    73dc:	b128      	cbz	r0, 73ea <twi_rx_start_transfer+0x82>
               hw_timeout--;
    73de:	9b01      	ldr	r3, [sp, #4]
    73e0:	3b01      	subs	r3, #1
    73e2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    73e4:	9b01      	ldr	r3, [sp, #4]
    73e6:	2b00      	cmp	r3, #0
    73e8:	dcf4      	bgt.n	73d4 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    73ea:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    73ee:	b95b      	cbnz	r3, 7408 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    73f0:	4813      	ldr	r0, [pc, #76]	; (7440 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    73f2:	9b01      	ldr	r3, [sp, #4]
    73f4:	2b00      	cmp	r3, #0
    73f6:	dce9      	bgt.n	73cc <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    73f8:	2300      	movs	r3, #0
    73fa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    73fe:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    7400:	4810      	ldr	r0, [pc, #64]	; (7444 <twi_rx_start_transfer+0xdc>)
    7402:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    7406:	e7e1      	b.n	73cc <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    7408:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    740c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    7410:	b18b      	cbz	r3, 7436 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    7412:	4a0d      	ldr	r2, [pc, #52]	; (7448 <twi_rx_start_transfer+0xe0>)
    7414:	480b      	ldr	r0, [pc, #44]	; (7444 <twi_rx_start_transfer+0xdc>)
    7416:	f013 0f01 	tst.w	r3, #1
    741a:	bf18      	it	ne
    741c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    741e:	f013 0f02 	tst.w	r3, #2
    7422:	f102 0201 	add.w	r2, r2, #1
    7426:	bf18      	it	ne
    7428:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    742a:	f013 0f04 	tst.w	r3, #4
    742e:	4b07      	ldr	r3, [pc, #28]	; (744c <twi_rx_start_transfer+0xe4>)
    7430:	bf18      	it	ne
    7432:	4618      	movne	r0, r3
    7434:	e7dd      	b.n	73f2 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    7436:	4803      	ldr	r0, [pc, #12]	; (7444 <twi_rx_start_transfer+0xdc>)
    7438:	e7db      	b.n	73f2 <twi_rx_start_transfer+0x8a>
    743a:	bf00      	nop
    743c:	000186a0 	.word	0x000186a0
    7440:	0bad0000 	.word	0x0bad0000
    7444:	0bad0001 	.word	0x0bad0001
    7448:	0bae0000 	.word	0x0bae0000
    744c:	0bae0002 	.word	0x0bae0002

00007450 <nrfx_twi_init>:
{
    7450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7452:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7454:	4d29      	ldr	r5, [pc, #164]	; (74fc <nrfx_twi_init+0xac>)
    7456:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    745a:	fb0c fc07 	mul.w	ip, ip, r7
    745e:	eb05 040c 	add.w	r4, r5, ip
    7462:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    7466:	2e00      	cmp	r6, #0
    7468:	d146      	bne.n	74f8 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    746a:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    746c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    746e:	7b4b      	ldrb	r3, [r1, #13]
    7470:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    7474:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    7476:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    7478:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    747c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    7480:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    7484:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    7488:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    748c:	b9e3      	cbnz	r3, 74c8 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    748e:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    7490:	4b1b      	ldr	r3, [pc, #108]	; (7500 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    7492:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    7496:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    7498:	2c01      	cmp	r4, #1
    749a:	bf18      	it	ne
    749c:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    74a0:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
    74a4:	bf08      	it	eq
    74a6:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    74a8:	f240 6c0c 	movw	ip, #1548	; 0x60c
    74ac:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    74b0:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    74b2:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    74b6:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    74b8:	2c01      	cmp	r4, #1
    74ba:	bf18      	it	ne
    74bc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    74c0:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    74c4:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    74c8:	7bcb      	ldrb	r3, [r1, #15]
    74ca:	b92b      	cbnz	r3, 74d8 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    74cc:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    74d0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    74d4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    74d8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    74da:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    74de:	b11a      	cbz	r2, 74e8 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    74e0:	f340 3007 	sbfx	r0, r0, #12, #8
    74e4:	f7fd fcc8 	bl	4e78 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    74e8:	233c      	movs	r3, #60	; 0x3c
    74ea:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    74ee:	4805      	ldr	r0, [pc, #20]	; (7504 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    74f0:	2301      	movs	r3, #1
    74f2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    74f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    74f8:	4803      	ldr	r0, [pc, #12]	; (7508 <nrfx_twi_init+0xb8>)
    74fa:	e7fc      	b.n	74f6 <nrfx_twi_init+0xa6>
    74fc:	20000ab0 	.word	0x20000ab0
    7500:	50000300 	.word	0x50000300
    7504:	0bad0000 	.word	0x0bad0000
    7508:	0bad0005 	.word	0x0bad0005

0000750c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    750c:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    750e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7510:	2105      	movs	r1, #5
    7512:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    7516:	4b04      	ldr	r3, [pc, #16]	; (7528 <nrfx_twi_enable+0x1c>)
    7518:	213c      	movs	r1, #60	; 0x3c
    751a:	fb01 3302 	mla	r3, r1, r2, r3
    751e:	2202      	movs	r2, #2
    7520:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    7524:	4770      	bx	lr
    7526:	bf00      	nop
    7528:	20000ab0 	.word	0x20000ab0

0000752c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    752c:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    752e:	4b0c      	ldr	r3, [pc, #48]	; (7560 <nrfx_twi_disable+0x34>)
{
    7530:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7532:	7904      	ldrb	r4, [r0, #4]
    7534:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    7538:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    753c:	4b09      	ldr	r3, [pc, #36]	; (7564 <nrfx_twi_disable+0x38>)
    753e:	f021 0103 	bic.w	r1, r1, #3
    7542:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7546:	2100      	movs	r1, #0
    7548:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    754c:	223c      	movs	r2, #60	; 0x3c
    754e:	fb02 3304 	mla	r3, r2, r4, r3
    7552:	2201      	movs	r2, #1
    7554:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    7558:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    755c:	bd10      	pop	{r4, pc}
    755e:	bf00      	nop
    7560:	00044286 	.word	0x00044286
    7564:	20000ab0 	.word	0x20000ab0

00007568 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    7568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    756c:	4f31      	ldr	r7, [pc, #196]	; (7634 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    756e:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    7570:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7574:	233c      	movs	r3, #60	; 0x3c
    7576:	fb03 7304 	mla	r3, r3, r4, r7
{
    757a:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    757c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    7580:	2b01      	cmp	r3, #1
{
    7582:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7584:	d104      	bne.n	7590 <nrfx_twi_xfer+0x28>
    7586:	780b      	ldrb	r3, [r1, #0]
    7588:	2b01      	cmp	r3, #1
    758a:	d106      	bne.n	759a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    758c:	482a      	ldr	r0, [pc, #168]	; (7638 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    758e:	e011      	b.n	75b4 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    7590:	2b02      	cmp	r3, #2
    7592:	d102      	bne.n	759a <nrfx_twi_xfer+0x32>
    7594:	780b      	ldrb	r3, [r1, #0]
    7596:	2b01      	cmp	r3, #1
    7598:	d1f8      	bne.n	758c <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    759a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    759c:	4b27      	ldr	r3, [pc, #156]	; (763c <nrfx_twi_xfer+0xd4>)
    759e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    75a2:	fb06 7604 	mla	r6, r6, r4, r7
    75a6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    75aa:	b12b      	cbz	r3, 75b8 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    75ac:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    75ae:	4824      	ldr	r0, [pc, #144]	; (7640 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    75b0:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    75b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    75b8:	f08c 0304 	eor.w	r3, ip, #4
    75bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    75c0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    75c4:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    75c8:	46a8      	mov	r8, r5
    75ca:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    75ce:	f106 0e0c 	add.w	lr, r6, #12
    75d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    75d6:	f8d8 3000 	ldr.w	r3, [r8]
    75da:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    75de:	686b      	ldr	r3, [r5, #4]
    75e0:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    75e2:	68eb      	ldr	r3, [r5, #12]
    75e4:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    75e6:	786b      	ldrb	r3, [r5, #1]
    75e8:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    75ec:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    75ee:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    75f2:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    75f4:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    75f8:	d017      	beq.n	762a <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    75fa:	b99b      	cbnz	r3, 7624 <nrfx_twi_xfer+0xbc>
    75fc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    7600:	233c      	movs	r3, #60	; 0x3c
    7602:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    7606:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    7608:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    760c:	4648      	mov	r0, r9
    760e:	f7ff fe3f 	bl	7290 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    7612:	233c      	movs	r3, #60	; 0x3c
    7614:	435c      	muls	r4, r3
    7616:	193a      	adds	r2, r7, r4
    7618:	593b      	ldr	r3, [r7, r4]
    761a:	2b00      	cmp	r3, #0
    761c:	d1ca      	bne.n	75b4 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    761e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    7622:	e7c7      	b.n	75b4 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    7624:	f04f 0c01 	mov.w	ip, #1
    7628:	e7ea      	b.n	7600 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    762a:	4651      	mov	r1, sl
    762c:	4648      	mov	r0, r9
    762e:	f7ff fe9b 	bl	7368 <twi_rx_start_transfer>
    7632:	e7ee      	b.n	7612 <nrfx_twi_xfer+0xaa>
    7634:	20000ab0 	.word	0x20000ab0
    7638:	0bad0005 	.word	0x0bad0005
    763c:	00044286 	.word	0x00044286
    7640:	0bad000b 	.word	0x0bad000b

00007644 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    7644:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    7646:	4c2b      	ldr	r4, [pc, #172]	; (76f4 <nrfx_twi_0_irq_handler+0xb0>)
    7648:	482b      	ldr	r0, [pc, #172]	; (76f8 <nrfx_twi_0_irq_handler+0xb4>)
{
    764a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    764c:	4621      	mov	r1, r4
    764e:	f004 fe4d 	bl	c2ec <twi_transfer>
    7652:	2800      	cmp	r0, #0
    7654:	d140      	bne.n	76d8 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
    7656:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    765a:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
    765e:	b9ff      	cbnz	r7, 76a0 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    7660:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    7662:	1e9a      	subs	r2, r3, #2
    7664:	2a01      	cmp	r2, #1
    7666:	d81b      	bhi.n	76a0 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    7668:	6a61      	ldr	r1, [r4, #36]	; 0x24
    766a:	69a2      	ldr	r2, [r4, #24]
    766c:	4291      	cmp	r1, r2
    766e:	d117      	bne.n	76a0 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    7670:	69e2      	ldr	r2, [r4, #28]
    7672:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7674:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    7678:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    767a:	481f      	ldr	r0, [pc, #124]	; (76f8 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    767c:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    767e:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7680:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7684:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7688:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    768a:	d104      	bne.n	7696 <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    768c:	b007      	add	sp, #28
    768e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7692:	f7ff bdfd 	b.w	7290 <twi_tx_start_transfer>
}
    7696:	b007      	add	sp, #28
    7698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    769c:	f7ff be64 	b.w	7368 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    76a0:	4e16      	ldr	r6, [pc, #88]	; (76fc <nrfx_twi_0_irq_handler+0xb8>)
    76a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    76a4:	ad01      	add	r5, sp, #4
    76a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    76a8:	6833      	ldr	r3, [r6, #0]
    76aa:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    76ac:	b1ff      	cbz	r7, 76ee <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
    76ae:	4a12      	ldr	r2, [pc, #72]	; (76f8 <nrfx_twi_0_irq_handler+0xb4>)
    76b0:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    76b4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    76b8:	0799      	lsls	r1, r3, #30
    76ba:	d50f      	bpl.n	76dc <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    76bc:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    76be:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    76c2:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    76c4:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    76c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    76cc:	d000      	beq.n	76d0 <nrfx_twi_0_irq_handler+0x8c>
    76ce:	b11f      	cbz	r7, 76d8 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
    76d0:	e9d4 3100 	ldrd	r3, r1, [r4]
    76d4:	4668      	mov	r0, sp
    76d6:	4798      	blx	r3
}
    76d8:	b007      	add	sp, #28
    76da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    76dc:	075a      	lsls	r2, r3, #29
    76de:	d501      	bpl.n	76e4 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    76e0:	2302      	movs	r3, #2
    76e2:	e7ec      	b.n	76be <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    76e4:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    76e6:	bf4c      	ite	mi
    76e8:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    76ea:	2304      	movpl	r3, #4
    76ec:	e7e7      	b.n	76be <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
    76ee:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    76f2:	e7e6      	b.n	76c2 <nrfx_twi_0_irq_handler+0x7e>
    76f4:	20000ab0 	.word	0x20000ab0
    76f8:	40003000 	.word	0x40003000
    76fc:	20000abc 	.word	0x20000abc

00007700 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7700:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7702:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7706:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    7708:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    770a:	6002      	str	r2, [r0, #0]
}
    770c:	4802      	ldr	r0, [pc, #8]	; (7718 <nrf_gpio_pin_port_decode+0x18>)
    770e:	bf18      	it	ne
    7710:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7714:	4770      	bx	lr
    7716:	bf00      	nop
    7718:	50000300 	.word	0x50000300

0000771c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    771c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    771e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    7720:	f004 fe70 	bl	c404 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    7724:	4608      	mov	r0, r1
    7726:	f004 fe6d 	bl	c404 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    772a:	a801      	add	r0, sp, #4
    772c:	9601      	str	r6, [sp, #4]
    772e:	f7ff ffe7 	bl	7700 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7732:	9b01      	ldr	r3, [sp, #4]
    7734:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    7738:	460c      	mov	r4, r1
    773a:	f240 610d 	movw	r1, #1549	; 0x60d
    773e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7742:	a801      	add	r0, sp, #4
    7744:	9401      	str	r4, [sp, #4]
    7746:	f7ff ffdb 	bl	7700 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    774a:	9b01      	ldr	r3, [sp, #4]
    774c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7750:	2509      	movs	r5, #9
    7752:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    7756:	2004      	movs	r0, #4
    7758:	f004 fd1d 	bl	c196 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    775c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    775e:	a801      	add	r0, sp, #4
    7760:	9401      	str	r4, [sp, #4]
    7762:	f7ff ffcd 	bl	7700 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7766:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7768:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    776c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    776e:	07db      	lsls	r3, r3, #31
    7770:	d415      	bmi.n	779e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7772:	a801      	add	r0, sp, #4
    7774:	9601      	str	r6, [sp, #4]
    7776:	f7ff ffc3 	bl	7700 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    777a:	9b01      	ldr	r3, [sp, #4]
    777c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7780:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    7784:	2004      	movs	r0, #4
    7786:	f004 fd06 	bl	c196 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    778a:	4630      	mov	r0, r6
    778c:	f004 fe3a 	bl	c404 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    7790:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    7792:	2004      	movs	r0, #4
    7794:	f004 fcff 	bl	c196 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7798:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    779c:	d1df      	bne.n	775e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    779e:	a801      	add	r0, sp, #4
    77a0:	9401      	str	r4, [sp, #4]
    77a2:	f7ff ffad 	bl	7700 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    77a6:	9a01      	ldr	r2, [sp, #4]
    77a8:	2301      	movs	r3, #1
    77aa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    77ac:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    77b0:	2004      	movs	r0, #4
    77b2:	f004 fcf0 	bl	c196 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    77b6:	4620      	mov	r0, r4
    77b8:	f004 fe24 	bl	c404 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    77bc:	2004      	movs	r0, #4
    77be:	f004 fcea 	bl	c196 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    77c2:	a801      	add	r0, sp, #4
    77c4:	9401      	str	r4, [sp, #4]
    77c6:	f7ff ff9b 	bl	7700 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    77ca:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    77cc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    77d0:	4803      	ldr	r0, [pc, #12]	; (77e0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    77d2:	40d3      	lsrs	r3, r2
    77d4:	f003 0301 	and.w	r3, r3, #1
    77d8:	1ac0      	subs	r0, r0, r3
    77da:	b003      	add	sp, #12
    77dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77de:	bf00      	nop
    77e0:	0bad0001 	.word	0x0bad0001

000077e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    77e4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    77e6:	4c14      	ldr	r4, [pc, #80]	; (7838 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    77e8:	4a14      	ldr	r2, [pc, #80]	; (783c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    77ea:	4915      	ldr	r1, [pc, #84]	; (7840 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    77ec:	2303      	movs	r3, #3
    77ee:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    77f0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    77f2:	4b14      	ldr	r3, [pc, #80]	; (7844 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    77f4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    77f6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    77f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    77fc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    77fe:	2300      	movs	r3, #0
    7800:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7802:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7804:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    7806:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7808:	4a0f      	ldr	r2, [pc, #60]	; (7848 <_DoInit+0x64>)
    780a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    780c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    780e:	2210      	movs	r2, #16
    7810:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7812:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7814:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7816:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    7818:	f005 fa8a 	bl	cd30 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    781c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    7820:	490a      	ldr	r1, [pc, #40]	; (784c <_DoInit+0x68>)
    7822:	4620      	mov	r0, r4
    7824:	f005 fa84 	bl	cd30 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7828:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    782c:	2320      	movs	r3, #32
    782e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7830:	f3bf 8f5f 	dmb	sy
}
    7834:	bd10      	pop	{r4, pc}
    7836:	bf00      	nop
    7838:	20000aec 	.word	0x20000aec
    783c:	0000ed4e 	.word	0x0000ed4e
    7840:	0000ed57 	.word	0x0000ed57
    7844:	20000c38 	.word	0x20000c38
    7848:	20000c28 	.word	0x20000c28
    784c:	0000ed5b 	.word	0x0000ed5b

00007850 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    7850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    7854:	f8df a048 	ldr.w	sl, [pc, #72]	; 78a0 <device_visitor+0x50>
    7858:	4d12      	ldr	r5, [pc, #72]	; (78a4 <device_visitor+0x54>)
    785a:	469b      	mov	fp, r3
    785c:	eba5 050a 	sub.w	r5, r5, sl
    7860:	4b11      	ldr	r3, [pc, #68]	; (78a8 <device_visitor+0x58>)
    7862:	10ed      	asrs	r5, r5, #3
    7864:	4680      	mov	r8, r0
    7866:	460f      	mov	r7, r1
    7868:	4691      	mov	r9, r2
    786a:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    786c:	2600      	movs	r6, #0
    786e:	42be      	cmp	r6, r7
    7870:	d102      	bne.n	7878 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    7872:	4630      	mov	r0, r6
}
    7874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    7878:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    787c:	2c00      	cmp	r4, #0
    787e:	dd0d      	ble.n	789c <device_visitor+0x4c>
    7880:	42a5      	cmp	r5, r4
    7882:	d30b      	bcc.n	789c <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    7884:	3c01      	subs	r4, #1
    7886:	b224      	sxth	r4, r4
    7888:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    788c:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    7890:	4659      	mov	r1, fp
    7892:	47c8      	blx	r9
		if (rc < 0) {
    7894:	2800      	cmp	r0, #0
    7896:	dbed      	blt.n	7874 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    7898:	3601      	adds	r6, #1
    789a:	e7e8      	b.n	786e <device_visitor+0x1e>
	const struct device *dev = NULL;
    789c:	2000      	movs	r0, #0
    789e:	e7f7      	b.n	7890 <device_visitor+0x40>
    78a0:	0000d37c 	.word	0x0000d37c
    78a4:	0000d3f4 	.word	0x0000d3f4
    78a8:	aaaaaaab 	.word	0xaaaaaaab

000078ac <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    78ac:	4b0e      	ldr	r3, [pc, #56]	; (78e8 <z_sys_init_run_level+0x3c>)
{
    78ae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    78b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    78b4:	3001      	adds	r0, #1
    78b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    78ba:	42a6      	cmp	r6, r4
    78bc:	d800      	bhi.n	78c0 <z_sys_init_run_level+0x14>
}
    78be:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    78c0:	e9d4 3500 	ldrd	r3, r5, [r4]
    78c4:	4628      	mov	r0, r5
    78c6:	4798      	blx	r3
		if (dev != NULL) {
    78c8:	b165      	cbz	r5, 78e4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    78ca:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    78cc:	b130      	cbz	r0, 78dc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    78ce:	2800      	cmp	r0, #0
    78d0:	bfb8      	it	lt
    78d2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    78d4:	28ff      	cmp	r0, #255	; 0xff
    78d6:	bfa8      	it	ge
    78d8:	20ff      	movge	r0, #255	; 0xff
    78da:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    78dc:	785a      	ldrb	r2, [r3, #1]
    78de:	f042 0201 	orr.w	r2, r2, #1
    78e2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    78e4:	3408      	adds	r4, #8
    78e6:	e7e8      	b.n	78ba <z_sys_init_run_level+0xe>
    78e8:	0000dd10 	.word	0x0000dd10

000078ec <z_device_get_all_static>:
	*devices = __device_start;
    78ec:	4a03      	ldr	r2, [pc, #12]	; (78fc <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    78ee:	4b04      	ldr	r3, [pc, #16]	; (7900 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    78f0:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    78f2:	1a9b      	subs	r3, r3, r2
}
    78f4:	4803      	ldr	r0, [pc, #12]	; (7904 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    78f6:	10db      	asrs	r3, r3, #3
}
    78f8:	4358      	muls	r0, r3
    78fa:	4770      	bx	lr
    78fc:	0000d37c 	.word	0x0000d37c
    7900:	0000d3f4 	.word	0x0000d3f4
    7904:	aaaaaaab 	.word	0xaaaaaaab

00007908 <z_impl_device_get_binding>:
{
    7908:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    790a:	4605      	mov	r5, r0
    790c:	b910      	cbnz	r0, 7914 <z_impl_device_get_binding+0xc>
		return NULL;
    790e:	2400      	movs	r4, #0
}
    7910:	4620      	mov	r0, r4
    7912:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7914:	7803      	ldrb	r3, [r0, #0]
    7916:	2b00      	cmp	r3, #0
    7918:	d0f9      	beq.n	790e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    791a:	4c0e      	ldr	r4, [pc, #56]	; (7954 <z_impl_device_get_binding+0x4c>)
    791c:	4e0e      	ldr	r6, [pc, #56]	; (7958 <z_impl_device_get_binding+0x50>)
    791e:	42b4      	cmp	r4, r6
    7920:	d108      	bne.n	7934 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7922:	4c0c      	ldr	r4, [pc, #48]	; (7954 <z_impl_device_get_binding+0x4c>)
    7924:	42b4      	cmp	r4, r6
    7926:	d0f2      	beq.n	790e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7928:	4620      	mov	r0, r4
    792a:	f004 fd80 	bl	c42e <z_device_ready>
    792e:	b950      	cbnz	r0, 7946 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7930:	3418      	adds	r4, #24
    7932:	e7f7      	b.n	7924 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    7934:	4620      	mov	r0, r4
    7936:	f004 fd7a 	bl	c42e <z_device_ready>
    793a:	b110      	cbz	r0, 7942 <z_impl_device_get_binding+0x3a>
    793c:	6823      	ldr	r3, [r4, #0]
    793e:	42ab      	cmp	r3, r5
    7940:	d0e6      	beq.n	7910 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7942:	3418      	adds	r4, #24
    7944:	e7eb      	b.n	791e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7946:	6821      	ldr	r1, [r4, #0]
    7948:	4628      	mov	r0, r5
    794a:	f7f9 fa2a 	bl	da2 <strcmp>
    794e:	2800      	cmp	r0, #0
    7950:	d1ee      	bne.n	7930 <z_impl_device_get_binding+0x28>
    7952:	e7dd      	b.n	7910 <z_impl_device_get_binding+0x8>
    7954:	0000d37c 	.word	0x0000d37c
    7958:	0000d3f4 	.word	0x0000d3f4

0000795c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    795c:	4b01      	ldr	r3, [pc, #4]	; (7964 <z_impl_z_errno+0x8>)
    795e:	6898      	ldr	r0, [r3, #8]
}
    7960:	3098      	adds	r0, #152	; 0x98
    7962:	4770      	bx	lr
    7964:	20000b94 	.word	0x20000b94

00007968 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7968:	b570      	push	{r4, r5, r6, lr}
    796a:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    796c:	ae06      	add	r6, sp, #24
{
    796e:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    7970:	4603      	mov	r3, r0
    7972:	4a13      	ldr	r2, [pc, #76]	; (79c0 <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
    7974:	4d13      	ldr	r5, [pc, #76]	; (79c4 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
    7976:	2108      	movs	r1, #8
    7978:	4630      	mov	r0, r6
    797a:	f003 f801 	bl	a980 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    797e:	23b8      	movs	r3, #184	; 0xb8
    7980:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    7984:	2201      	movs	r2, #1
    7986:	230f      	movs	r3, #15
    7988:	e9cd 3203 	strd	r3, r2, [sp, #12]
    798c:	2300      	movs	r3, #0
    798e:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7992:	4b0d      	ldr	r3, [pc, #52]	; (79c8 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
    7994:	490d      	ldr	r1, [pc, #52]	; (79cc <init_idle_thread+0x64>)
    7996:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7998:	2218      	movs	r2, #24
    799a:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
    799e:	f44f 70b0 	mov.w	r0, #352	; 0x160
    79a2:	9300      	str	r3, [sp, #0]
    79a4:	fb00 1104 	mla	r1, r0, r4, r1
    79a8:	4b09      	ldr	r3, [pc, #36]	; (79d0 <init_idle_thread+0x68>)
    79aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
    79ae:	4628      	mov	r0, r5
    79b0:	f000 f928 	bl	7c04 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    79b4:	7b6b      	ldrb	r3, [r5, #13]
    79b6:	f023 0304 	bic.w	r3, r3, #4
    79ba:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    79bc:	b008      	add	sp, #32
    79be:	bd70      	pop	{r4, r5, r6, pc}
    79c0:	0000ed62 	.word	0x0000ed62
    79c4:	20000460 	.word	0x20000460
    79c8:	20000b94 	.word	0x20000b94
    79cc:	20001c80 	.word	0x20001c80
    79d0:	00007de9 	.word	0x00007de9

000079d4 <bg_thread_main>:
{
    79d4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    79d6:	4b0a      	ldr	r3, [pc, #40]	; (7a00 <bg_thread_main+0x2c>)
    79d8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    79da:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    79dc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    79de:	f7ff ff65 	bl	78ac <z_sys_init_run_level>
	boot_banner();
    79e2:	f001 f867 	bl	8ab4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    79e6:	2003      	movs	r0, #3
    79e8:	f7ff ff60 	bl	78ac <z_sys_init_run_level>
	z_init_static_threads();
    79ec:	f000 f99c 	bl	7d28 <z_init_static_threads>
	main();
    79f0:	f7f9 f9ea 	bl	dc8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    79f4:	4a03      	ldr	r2, [pc, #12]	; (7a04 <bg_thread_main+0x30>)
    79f6:	7b13      	ldrb	r3, [r2, #12]
    79f8:	f023 0301 	bic.w	r3, r3, #1
    79fc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    79fe:	bd08      	pop	{r3, pc}
    7a00:	20001038 	.word	0x20001038
    7a04:	20000518 	.word	0x20000518

00007a08 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7a08:	4802      	ldr	r0, [pc, #8]	; (7a14 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    7a0a:	4a03      	ldr	r2, [pc, #12]	; (7a18 <z_bss_zero+0x10>)
    7a0c:	2100      	movs	r1, #0
    7a0e:	1a12      	subs	r2, r2, r0
    7a10:	f005 b86e 	b.w	caf0 <memset>
    7a14:	20000398 	.word	0x20000398
    7a18:	2000103c 	.word	0x2000103c

00007a1c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7a1c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7a1e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 7ae0 <z_cstart+0xc4>
    7a22:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7a24:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7a28:	4d2e      	ldr	r5, [pc, #184]	; (7ae4 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7a2a:	4e2f      	ldr	r6, [pc, #188]	; (7ae8 <z_cstart+0xcc>)
    7a2c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7a2e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7aec <z_cstart+0xd0>
    7a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7a36:	2400      	movs	r4, #0
    7a38:	616b      	str	r3, [r5, #20]
    7a3a:	23e0      	movs	r3, #224	; 0xe0
    7a3c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7a40:	77ec      	strb	r4, [r5, #31]
    7a42:	762c      	strb	r4, [r5, #24]
    7a44:	766c      	strb	r4, [r5, #25]
    7a46:	76ac      	strb	r4, [r5, #26]
    7a48:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7a4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7a4e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7a52:	626b      	str	r3, [r5, #36]	; 0x24
    7a54:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7a58:	f7fd fc2a 	bl	52b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7a5c:	f7fd f9ee 	bl	4e3c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a64:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7a66:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7a68:	f7fd fd08 	bl	547c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7a6c:	f7fd fc6e 	bl	534c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7a70:	f240 1301 	movw	r3, #257	; 0x101
    7a74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7a78:	ab06      	add	r3, sp, #24
    7a7a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7a7c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7a80:	f004 fcd4 	bl	c42c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7a84:	4620      	mov	r0, r4
    7a86:	f7ff ff11 	bl	78ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7a8a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    7a8c:	4d18      	ldr	r5, [pc, #96]	; (7af0 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7a8e:	f7ff ff0d 	bl	78ac <z_sys_init_run_level>
	z_sched_init();
    7a92:	f000 fd0b 	bl	84ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7a96:	4b17      	ldr	r3, [pc, #92]	; (7af4 <z_cstart+0xd8>)
    7a98:	9305      	str	r3, [sp, #20]
    7a9a:	2301      	movs	r3, #1
    7a9c:	4916      	ldr	r1, [pc, #88]	; (7af8 <z_cstart+0xdc>)
    7a9e:	9400      	str	r4, [sp, #0]
    7aa0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7aa8:	464b      	mov	r3, r9
    7aaa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7aae:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    7ab0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7ab2:	f000 f8a7 	bl	7c04 <z_setup_new_thread>
    7ab6:	7b6a      	ldrb	r2, [r5, #13]
    7ab8:	4607      	mov	r7, r0
    7aba:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7abe:	4628      	mov	r0, r5
    7ac0:	736a      	strb	r2, [r5, #13]
    7ac2:	f004 fd76 	bl	c5b2 <z_ready_thread>
		init_idle_thread(i);
    7ac6:	4620      	mov	r0, r4
    7ac8:	f7ff ff4e 	bl	7968 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7acc:	4b0b      	ldr	r3, [pc, #44]	; (7afc <z_cstart+0xe0>)
    7ace:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7ad0:	464a      	mov	r2, r9
    7ad2:	4639      	mov	r1, r7
    7ad4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    7ad6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    7ad8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7adc:	f7fd fab6 	bl	504c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7ae0:	20002600 	.word	0x20002600
    7ae4:	e000ed00 	.word	0xe000ed00
    7ae8:	20000b94 	.word	0x20000b94
    7aec:	000079d5 	.word	0x000079d5
    7af0:	20000518 	.word	0x20000518
    7af4:	0000ed6c 	.word	0x0000ed6c
    7af8:	20001860 	.word	0x20001860
    7afc:	20000460 	.word	0x20000460

00007b00 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    7b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b02:	4605      	mov	r5, r0
    7b04:	460e      	mov	r6, r1
	__asm__ volatile(
    7b06:	f04f 0320 	mov.w	r3, #32
    7b0a:	f3ef 8711 	mrs	r7, BASEPRI
    7b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b12:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    7b16:	4b06      	ldr	r3, [pc, #24]	; (7b30 <k_thread_foreach+0x30>)
    7b18:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    7b1a:	b924      	cbnz	r4, 7b26 <k_thread_foreach+0x26>
	__asm__ volatile(
    7b1c:	f387 8811 	msr	BASEPRI, r7
    7b20:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    7b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    7b26:	4620      	mov	r0, r4
    7b28:	4631      	mov	r1, r6
    7b2a:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    7b2c:	6f64      	ldr	r4, [r4, #116]	; 0x74
    7b2e:	e7f4      	b.n	7b1a <k_thread_foreach+0x1a>
    7b30:	20000b94 	.word	0x20000b94

00007b34 <z_thread_monitor_exit>:
	__asm__ volatile(
    7b34:	f04f 0320 	mov.w	r3, #32
    7b38:	f3ef 8111 	mrs	r1, BASEPRI
    7b3c:	f383 8812 	msr	BASEPRI_MAX, r3
    7b40:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    7b44:	4a09      	ldr	r2, [pc, #36]	; (7b6c <z_thread_monitor_exit+0x38>)
    7b46:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7b48:	4283      	cmp	r3, r0
    7b4a:	d107      	bne.n	7b5c <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    7b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    7b4e:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    7b50:	f381 8811 	msr	BASEPRI, r1
    7b54:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7b58:	4770      	bx	lr
    7b5a:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d0f7      	beq.n	7b50 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    7b60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    7b62:	4282      	cmp	r2, r0
    7b64:	d1f9      	bne.n	7b5a <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    7b66:	6f42      	ldr	r2, [r0, #116]	; 0x74
    7b68:	675a      	str	r2, [r3, #116]	; 0x74
    7b6a:	e7f1      	b.n	7b50 <z_thread_monitor_exit+0x1c>
    7b6c:	20000b94 	.word	0x20000b94

00007b70 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    7b70:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    7b72:	4604      	mov	r4, r0
    7b74:	b908      	cbnz	r0, 7b7a <z_impl_k_thread_name_set+0xa>
		thread = _current;
    7b76:	4b05      	ldr	r3, [pc, #20]	; (7b8c <z_impl_k_thread_name_set+0x1c>)
    7b78:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7b7a:	221f      	movs	r2, #31
    7b7c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7b80:	f005 f8f2 	bl	cd68 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7b84:	2000      	movs	r0, #0
    7b86:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    7b8a:	bd10      	pop	{r4, pc}
    7b8c:	20000b94 	.word	0x20000b94

00007b90 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    7b90:	7b43      	ldrb	r3, [r0, #13]
    7b92:	2b10      	cmp	r3, #16
    7b94:	d80e      	bhi.n	7bb4 <k_thread_state_str+0x24>
    7b96:	2b10      	cmp	r3, #16
    7b98:	d81c      	bhi.n	7bd4 <k_thread_state_str+0x44>
    7b9a:	e8df f003 	tbb	[pc, r3]
    7b9e:	091d      	.short	0x091d
    7ba0:	1b151b13 	.word	0x1b151b13
    7ba4:	1b171b1b 	.word	0x1b171b1b
    7ba8:	1b1b1b1b 	.word	0x1b1b1b1b
    7bac:	1b1b      	.short	0x1b1b
    7bae:	19          	.byte	0x19
    7baf:	00          	.byte	0x00
    7bb0:	480b      	ldr	r0, [pc, #44]	; (7be0 <k_thread_state_str+0x50>)
    7bb2:	4770      	bx	lr
    7bb4:	2b20      	cmp	r3, #32
    7bb6:	d011      	beq.n	7bdc <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    7bb8:	4a0a      	ldr	r2, [pc, #40]	; (7be4 <k_thread_state_str+0x54>)
    7bba:	480b      	ldr	r0, [pc, #44]	; (7be8 <k_thread_state_str+0x58>)
    7bbc:	2b80      	cmp	r3, #128	; 0x80
    7bbe:	bf08      	it	eq
    7bc0:	4610      	moveq	r0, r2
    7bc2:	4770      	bx	lr
		return "pending";
    7bc4:	4809      	ldr	r0, [pc, #36]	; (7bec <k_thread_state_str+0x5c>)
    7bc6:	4770      	bx	lr
		return "prestart";
    7bc8:	4809      	ldr	r0, [pc, #36]	; (7bf0 <k_thread_state_str+0x60>)
    7bca:	4770      	bx	lr
		return "dead";
    7bcc:	4809      	ldr	r0, [pc, #36]	; (7bf4 <k_thread_state_str+0x64>)
    7bce:	4770      	bx	lr
		return "suspended";
    7bd0:	4809      	ldr	r0, [pc, #36]	; (7bf8 <k_thread_state_str+0x68>)
    7bd2:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    7bd4:	4804      	ldr	r0, [pc, #16]	; (7be8 <k_thread_state_str+0x58>)
    7bd6:	4770      	bx	lr
		return "";
    7bd8:	4808      	ldr	r0, [pc, #32]	; (7bfc <k_thread_state_str+0x6c>)
    7bda:	4770      	bx	lr
		return "aborting";
    7bdc:	4808      	ldr	r0, [pc, #32]	; (7c00 <k_thread_state_str+0x70>)
}
    7bde:	4770      	bx	lr
    7be0:	0000ed99 	.word	0x0000ed99
    7be4:	0000eda8 	.word	0x0000eda8
    7be8:	0000ed71 	.word	0x0000ed71
    7bec:	0000ed79 	.word	0x0000ed79
    7bf0:	0000ed81 	.word	0x0000ed81
    7bf4:	0000ed8a 	.word	0x0000ed8a
    7bf8:	0000ed8f 	.word	0x0000ed8f
    7bfc:	0000df89 	.word	0x0000df89
    7c00:	0000ed9f 	.word	0x0000ed9f

00007c04 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c08:	b085      	sub	sp, #20
    7c0a:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7c0c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7c10:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7c16:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7c18:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    7c1a:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7c1c:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    7c20:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
    7c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c24:	7383      	strb	r3, [r0, #14]
	thread_base->pended_on = NULL;
    7c26:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7c28:	f101 0320 	add.w	r3, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7c2c:	f10a 0720 	add.w	r7, sl, #32
{
    7c30:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7c32:	e9c0 5506 	strd	r5, r5, [r0, #24]
    7c36:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
    7c38:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7c3a:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    7c3c:	440f      	add	r7, r1
__ssp_bos_icheck3(memset, void *, int)
    7c3e:	4652      	mov	r2, sl
    7c40:	21aa      	movs	r1, #170	; 0xaa
    7c42:	4618      	mov	r0, r3
{
    7c44:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    7c48:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    7c4c:	f004 ff50 	bl	caf0 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7c52:	9302      	str	r3, [sp, #8]
    7c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
    7c56:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
    7c5a:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7c5e:	e9cd b300 	strd	fp, r3, [sp]
    7c62:	463a      	mov	r2, r7
    7c64:	4643      	mov	r3, r8
    7c66:	4631      	mov	r1, r6
    7c68:	4620      	mov	r0, r4
    7c6a:	f7fd f9bb 	bl	4fe4 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    7c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7c70:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    7c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    7c74:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    7c76:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    7c7a:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    7c7c:	f04f 0220 	mov.w	r2, #32
    7c80:	f3ef 8311 	mrs	r3, BASEPRI
    7c84:	f382 8812 	msr	BASEPRI_MAX, r2
    7c88:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    7c8c:	4e0f      	ldr	r6, [pc, #60]	; (7ccc <z_setup_new_thread+0xc8>)
    7c8e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    7c90:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    7c92:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    7c94:	f383 8811 	msr	BASEPRI, r3
    7c98:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    7c9c:	f1b9 0f00 	cmp.w	r9, #0
    7ca0:	d011      	beq.n	7cc6 <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7ca2:	221f      	movs	r2, #31
    7ca4:	4649      	mov	r1, r9
    7ca6:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7caa:	f005 f85d 	bl	cd68 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7cae:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    7cb2:	68b3      	ldr	r3, [r6, #8]
    7cb4:	b10b      	cbz	r3, 7cba <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
    7cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    7cba:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    7cbe:	4638      	mov	r0, r7
    7cc0:	b005      	add	sp, #20
    7cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    7cc6:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    7cca:	e7f2      	b.n	7cb2 <z_setup_new_thread+0xae>
    7ccc:	20000b94 	.word	0x20000b94

00007cd0 <z_impl_k_thread_create>:
{
    7cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cd2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7cd4:	2700      	movs	r7, #0
    7cd6:	9705      	str	r7, [sp, #20]
    7cd8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7cda:	9704      	str	r7, [sp, #16]
    7cdc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7cde:	9703      	str	r7, [sp, #12]
    7ce0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7ce2:	9702      	str	r7, [sp, #8]
{
    7ce4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7ce8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7cea:	9701      	str	r7, [sp, #4]
    7cec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7cee:	9700      	str	r7, [sp, #0]
{
    7cf0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7cf2:	f7ff ff87 	bl	7c04 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7cf6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7cfa:	bf08      	it	eq
    7cfc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7d00:	d005      	beq.n	7d0e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7d02:	ea55 0306 	orrs.w	r3, r5, r6
    7d06:	d105      	bne.n	7d14 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    7d08:	4620      	mov	r0, r4
    7d0a:	f000 fac9 	bl	82a0 <z_sched_start>
}
    7d0e:	4620      	mov	r0, r4
    7d10:	b007      	add	sp, #28
    7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7d14:	4903      	ldr	r1, [pc, #12]	; (7d24 <z_impl_k_thread_create+0x54>)
    7d16:	4632      	mov	r2, r6
    7d18:	462b      	mov	r3, r5
    7d1a:	f104 0018 	add.w	r0, r4, #24
    7d1e:	f000 fd57 	bl	87d0 <z_add_timeout>
    7d22:	e7f4      	b.n	7d0e <z_impl_k_thread_create+0x3e>
    7d24:	0000c5d3 	.word	0x0000c5d3

00007d28 <z_init_static_threads>:
{
    7d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7d2c:	4c29      	ldr	r4, [pc, #164]	; (7dd4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7d2e:	4d2a      	ldr	r5, [pc, #168]	; (7dd8 <z_init_static_threads+0xb0>)
{
    7d30:	b087      	sub	sp, #28
    7d32:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7d34:	42ae      	cmp	r6, r5
    7d36:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7d3a:	d30f      	bcc.n	7d5c <z_init_static_threads+0x34>
	k_sched_lock();
    7d3c:	f000 f9cc 	bl	80d8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7d40:	4c24      	ldr	r4, [pc, #144]	; (7dd4 <z_init_static_threads+0xac>)
    7d42:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7ddc <z_init_static_threads+0xb4>
    7d46:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7d4a:	f240 37e7 	movw	r7, #999	; 0x3e7
    7d4e:	42ac      	cmp	r4, r5
    7d50:	d320      	bcc.n	7d94 <z_init_static_threads+0x6c>
}
    7d52:	b007      	add	sp, #28
    7d54:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7d58:	f000 bb8c 	b.w	8474 <k_sched_unlock>
		z_setup_new_thread(
    7d5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7d60:	9305      	str	r3, [sp, #20]
    7d62:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7d66:	9304      	str	r3, [sp, #16]
    7d68:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7d6c:	9303      	str	r3, [sp, #12]
    7d6e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7d72:	9302      	str	r3, [sp, #8]
    7d74:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7d78:	9301      	str	r3, [sp, #4]
    7d7a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7d7e:	9300      	str	r3, [sp, #0]
    7d80:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7d84:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7d88:	f7ff ff3c 	bl	7c04 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7d8c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7d90:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7d92:	e7ce      	b.n	7d32 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7d96:	1c5a      	adds	r2, r3, #1
    7d98:	d00d      	beq.n	7db6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7d9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7d9e:	2100      	movs	r1, #0
    7da0:	4638      	mov	r0, r7
    7da2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7da6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7daa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7dae:	d104      	bne.n	7dba <z_init_static_threads+0x92>
	z_sched_start(thread);
    7db0:	4640      	mov	r0, r8
    7db2:	f000 fa75 	bl	82a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7db6:	3430      	adds	r4, #48	; 0x30
    7db8:	e7c9      	b.n	7d4e <z_init_static_threads+0x26>
    7dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7dbe:	2300      	movs	r3, #0
    7dc0:	f7f8 fdbc 	bl	93c <__aeabi_uldivmod>
    7dc4:	4602      	mov	r2, r0
    7dc6:	460b      	mov	r3, r1
    7dc8:	f108 0018 	add.w	r0, r8, #24
    7dcc:	4649      	mov	r1, r9
    7dce:	f000 fcff 	bl	87d0 <z_add_timeout>
    7dd2:	e7f0      	b.n	7db6 <z_init_static_threads+0x8e>
    7dd4:	2000035c 	.word	0x2000035c
    7dd8:	2000035c 	.word	0x2000035c
    7ddc:	0000c5d3 	.word	0x0000c5d3

00007de0 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    7de0:	4800      	ldr	r0, [pc, #0]	; (7de4 <sys_kernel_version_get+0x4>)
    7de2:	4770      	bx	lr
    7de4:	02076300 	.word	0x02076300

00007de8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7de8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7dea:	4c09      	ldr	r4, [pc, #36]	; (7e10 <idle+0x28>)
	__asm__ volatile(
    7dec:	f04f 0220 	mov.w	r2, #32
    7df0:	f3ef 8311 	mrs	r3, BASEPRI
    7df4:	f382 8812 	msr	BASEPRI_MAX, r2
    7df8:	f3bf 8f6f 	isb	sy
    7dfc:	f004 fc81 	bl	c702 <z_get_next_timeout_expiry>
    7e00:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    7e02:	f7fc ff9b 	bl	4d3c <pm_system_suspend>
    7e06:	2800      	cmp	r0, #0
    7e08:	d1f0      	bne.n	7dec <idle+0x4>
	arch_cpu_idle();
    7e0a:	f7fd f81d 	bl	4e48 <arch_cpu_idle>
}
    7e0e:	e7ed      	b.n	7dec <idle+0x4>
    7e10:	20000b94 	.word	0x20000b94

00007e14 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7e18:	4604      	mov	r4, r0
    7e1a:	4617      	mov	r7, r2
    7e1c:	461e      	mov	r6, r3
    7e1e:	f04f 0320 	mov.w	r3, #32
    7e22:	f3ef 8811 	mrs	r8, BASEPRI
    7e26:	f383 8812 	msr	BASEPRI_MAX, r3
    7e2a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7e2e:	68c3      	ldr	r3, [r0, #12]
    7e30:	4a32      	ldr	r2, [pc, #200]	; (7efc <z_impl_k_mutex_lock+0xe8>)
    7e32:	b16b      	cbz	r3, 7e50 <z_impl_k_mutex_lock+0x3c>
    7e34:	6880      	ldr	r0, [r0, #8]
    7e36:	6891      	ldr	r1, [r2, #8]
    7e38:	4288      	cmp	r0, r1
    7e3a:	d019      	beq.n	7e70 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7e3c:	ea57 0306 	orrs.w	r3, r7, r6
    7e40:	d118      	bne.n	7e74 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7e42:	f388 8811 	msr	BASEPRI, r8
    7e46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7e4a:	f06f 000f 	mvn.w	r0, #15
    7e4e:	e00c      	b.n	7e6a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    7e50:	6891      	ldr	r1, [r2, #8]
    7e52:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7e56:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7e58:	3301      	adds	r3, #1
    7e5a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7e5c:	6893      	ldr	r3, [r2, #8]
    7e5e:	60a3      	str	r3, [r4, #8]
    7e60:	f388 8811 	msr	BASEPRI, r8
    7e64:	f3bf 8f6f 	isb	sy
		return 0;
    7e68:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7e6a:	b002      	add	sp, #8
    7e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7e70:	6921      	ldr	r1, [r4, #16]
    7e72:	e7f0      	b.n	7e56 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7e74:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7e78:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    7e7c:	4299      	cmp	r1, r3
    7e7e:	bfa8      	it	ge
    7e80:	4619      	movge	r1, r3
    7e82:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7e86:	4291      	cmp	r1, r2
    7e88:	bfb8      	it	lt
    7e8a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7e8c:	428b      	cmp	r3, r1
    7e8e:	dd2e      	ble.n	7eee <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7e90:	f004 fb35 	bl	c4fe <adjust_owner_prio.isra.0>
    7e94:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7e96:	e9cd 7600 	strd	r7, r6, [sp]
    7e9a:	4819      	ldr	r0, [pc, #100]	; (7f00 <z_impl_k_mutex_lock+0xec>)
    7e9c:	4622      	mov	r2, r4
    7e9e:	4641      	mov	r1, r8
    7ea0:	f000 fa5a 	bl	8358 <z_pend_curr>
	if (got_mutex == 0) {
    7ea4:	2800      	cmp	r0, #0
    7ea6:	d0e0      	beq.n	7e6a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    7ea8:	f04f 0320 	mov.w	r3, #32
    7eac:	f3ef 8611 	mrs	r6, BASEPRI
    7eb0:	f383 8812 	msr	BASEPRI_MAX, r3
    7eb4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7eb8:	6823      	ldr	r3, [r4, #0]
    7eba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ebc:	429c      	cmp	r4, r3
    7ebe:	d00a      	beq.n	7ed6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7ec0:	b14b      	cbz	r3, 7ed6 <z_impl_k_mutex_lock+0xc2>
    7ec2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7ec6:	4299      	cmp	r1, r3
    7ec8:	bfa8      	it	ge
    7eca:	4619      	movge	r1, r3
    7ecc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7ed0:	4299      	cmp	r1, r3
    7ed2:	bfb8      	it	lt
    7ed4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7ed6:	68a0      	ldr	r0, [r4, #8]
    7ed8:	f004 fb11 	bl	c4fe <adjust_owner_prio.isra.0>
    7edc:	b900      	cbnz	r0, 7ee0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    7ede:	b145      	cbz	r5, 7ef2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7ee0:	4807      	ldr	r0, [pc, #28]	; (7f00 <z_impl_k_mutex_lock+0xec>)
    7ee2:	4631      	mov	r1, r6
    7ee4:	f000 f8e6 	bl	80b4 <z_reschedule>
	return -EAGAIN;
    7ee8:	f06f 000a 	mvn.w	r0, #10
    7eec:	e7bd      	b.n	7e6a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    7eee:	2500      	movs	r5, #0
    7ef0:	e7d1      	b.n	7e96 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    7ef2:	f386 8811 	msr	BASEPRI, r6
    7ef6:	f3bf 8f6f 	isb	sy
    7efa:	e7f5      	b.n	7ee8 <z_impl_k_mutex_lock+0xd4>
    7efc:	20000b94 	.word	0x20000b94
    7f00:	20001039 	.word	0x20001039

00007f04 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7f04:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7f06:	6883      	ldr	r3, [r0, #8]
{
    7f08:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d033      	beq.n	7f76 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7f0e:	4a1d      	ldr	r2, [pc, #116]	; (7f84 <z_impl_k_mutex_unlock+0x80>)
    7f10:	6892      	ldr	r2, [r2, #8]
    7f12:	4293      	cmp	r3, r2
    7f14:	d132      	bne.n	7f7c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7f16:	7bda      	ldrb	r2, [r3, #15]
    7f18:	3a01      	subs	r2, #1
    7f1a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7f1c:	68c3      	ldr	r3, [r0, #12]
    7f1e:	2b01      	cmp	r3, #1
    7f20:	d905      	bls.n	7f2e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    7f22:	3b01      	subs	r3, #1
    7f24:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7f26:	f000 faa5 	bl	8474 <k_sched_unlock>

	return 0;
    7f2a:	2000      	movs	r0, #0
}
    7f2c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7f2e:	f04f 0320 	mov.w	r3, #32
    7f32:	f3ef 8511 	mrs	r5, BASEPRI
    7f36:	f383 8812 	msr	BASEPRI_MAX, r3
    7f3a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7f3e:	6901      	ldr	r1, [r0, #16]
    7f40:	6880      	ldr	r0, [r0, #8]
    7f42:	f004 fadc 	bl	c4fe <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7f46:	4620      	mov	r0, r4
    7f48:	f004 fb8f 	bl	c66a <z_unpend_first_thread>
	mutex->owner = new_owner;
    7f4c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7f4e:	b160      	cbz	r0, 7f6a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    7f50:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7f54:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7f56:	2200      	movs	r2, #0
    7f58:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    7f5c:	f004 fb29 	bl	c5b2 <z_ready_thread>
		z_reschedule(&lock, key);
    7f60:	4809      	ldr	r0, [pc, #36]	; (7f88 <z_impl_k_mutex_unlock+0x84>)
    7f62:	4629      	mov	r1, r5
    7f64:	f000 f8a6 	bl	80b4 <z_reschedule>
    7f68:	e7dd      	b.n	7f26 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    7f6a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7f6c:	f385 8811 	msr	BASEPRI, r5
    7f70:	f3bf 8f6f 	isb	sy
    7f74:	e7d7      	b.n	7f26 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    7f76:	f06f 0015 	mvn.w	r0, #21
    7f7a:	e7d7      	b.n	7f2c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    7f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f80:	e7d4      	b.n	7f2c <z_impl_k_mutex_unlock+0x28>
    7f82:	bf00      	nop
    7f84:	20000b94 	.word	0x20000b94
    7f88:	20001039 	.word	0x20001039

00007f8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7f8c:	b538      	push	{r3, r4, r5, lr}
    7f8e:	4604      	mov	r4, r0
	__asm__ volatile(
    7f90:	f04f 0320 	mov.w	r3, #32
    7f94:	f3ef 8511 	mrs	r5, BASEPRI
    7f98:	f383 8812 	msr	BASEPRI_MAX, r3
    7f9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7fa0:	f004 fb63 	bl	c66a <z_unpend_first_thread>

	if (thread != NULL) {
    7fa4:	b150      	cbz	r0, 7fbc <z_impl_k_sem_give+0x30>
    7fa6:	2200      	movs	r2, #0
    7fa8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7fac:	f004 fb01 	bl	c5b2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7fb0:	4629      	mov	r1, r5
    7fb2:	4808      	ldr	r0, [pc, #32]	; (7fd4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7fb8:	f000 b87c 	b.w	80b4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7fbc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7fc0:	429a      	cmp	r2, r3
    7fc2:	bf18      	it	ne
    7fc4:	3301      	addne	r3, #1
    7fc6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7fc8:	2102      	movs	r1, #2
    7fca:	f104 0010 	add.w	r0, r4, #16
    7fce:	f004 fd0d 	bl	c9ec <z_handle_obj_poll_events>
}
    7fd2:	e7ed      	b.n	7fb0 <z_impl_k_sem_give+0x24>
    7fd4:	20001039 	.word	0x20001039

00007fd8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7fd8:	b513      	push	{r0, r1, r4, lr}
    7fda:	f04f 0420 	mov.w	r4, #32
    7fde:	f3ef 8111 	mrs	r1, BASEPRI
    7fe2:	f384 8812 	msr	BASEPRI_MAX, r4
    7fe6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7fea:	6884      	ldr	r4, [r0, #8]
    7fec:	b144      	cbz	r4, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		sem->count--;
    7fee:	3c01      	subs	r4, #1
    7ff0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7ff2:	f381 8811 	msr	BASEPRI, r1
    7ff6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7ffa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7ffc:	b002      	add	sp, #8
    7ffe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8000:	ea52 0403 	orrs.w	r4, r2, r3
    8004:	d106      	bne.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    8006:	f381 8811 	msr	BASEPRI, r1
    800a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    800e:	f06f 000f 	mvn.w	r0, #15
    8012:	e7f3      	b.n	7ffc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8014:	e9cd 2300 	strd	r2, r3, [sp]
    8018:	4602      	mov	r2, r0
    801a:	4802      	ldr	r0, [pc, #8]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    801c:	f000 f99c 	bl	8358 <z_pend_curr>
	return ret;
    8020:	e7ec      	b.n	7ffc <z_impl_k_sem_take+0x24>
    8022:	bf00      	nop
    8024:	20001039 	.word	0x20001039

00008028 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    8028:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    802a:	4c08      	ldr	r4, [pc, #32]	; (804c <z_reset_time_slice+0x24>)
    802c:	6823      	ldr	r3, [r4, #0]
    802e:	b15b      	cbz	r3, 8048 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8030:	f7fe fbd6 	bl	67e0 <sys_clock_elapsed>
    8034:	4603      	mov	r3, r0
    8036:	6820      	ldr	r0, [r4, #0]
    8038:	4a05      	ldr	r2, [pc, #20]	; (8050 <z_reset_time_slice+0x28>)
    803a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    803c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8040:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    8042:	2100      	movs	r1, #0
    8044:	f004 bb6d 	b.w	c722 <z_set_timeout_expiry>
}
    8048:	bd10      	pop	{r4, pc}
    804a:	bf00      	nop
    804c:	20000bc8 	.word	0x20000bc8
    8050:	20000b94 	.word	0x20000b94

00008054 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    8054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8056:	4604      	mov	r4, r0
    8058:	460d      	mov	r5, r1
	__asm__ volatile(
    805a:	f04f 0320 	mov.w	r3, #32
    805e:	f3ef 8611 	mrs	r6, BASEPRI
    8062:	f383 8812 	msr	BASEPRI_MAX, r3
    8066:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    806a:	4b0f      	ldr	r3, [pc, #60]	; (80a8 <k_sched_time_slice_set+0x54>)
    806c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    806e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    8072:	f240 30e7 	movw	r0, #999	; 0x3e7
    8076:	6119      	str	r1, [r3, #16]
    8078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    807c:	2300      	movs	r3, #0
    807e:	fbe4 0107 	umlal	r0, r1, r4, r7
    8082:	f7f8 fc5b 	bl	93c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8086:	2c00      	cmp	r4, #0
    8088:	4b08      	ldr	r3, [pc, #32]	; (80ac <k_sched_time_slice_set+0x58>)
    808a:	dc09      	bgt.n	80a0 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    808c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    808e:	4b08      	ldr	r3, [pc, #32]	; (80b0 <k_sched_time_slice_set+0x5c>)
    8090:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    8092:	f7ff ffc9 	bl	8028 <z_reset_time_slice>
	__asm__ volatile(
    8096:	f386 8811 	msr	BASEPRI, r6
    809a:	f3bf 8f6f 	isb	sy
	}
}
    809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    80a0:	2802      	cmp	r0, #2
    80a2:	bfb8      	it	lt
    80a4:	2002      	movlt	r0, #2
    80a6:	e7f1      	b.n	808c <k_sched_time_slice_set+0x38>
    80a8:	20000b94 	.word	0x20000b94
    80ac:	20000bc8 	.word	0x20000bc8
    80b0:	20000bc4 	.word	0x20000bc4

000080b4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    80b4:	b949      	cbnz	r1, 80ca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    80b6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    80ba:	b930      	cbnz	r0, 80ca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    80bc:	4b05      	ldr	r3, [pc, #20]	; (80d4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    80be:	69da      	ldr	r2, [r3, #28]
    80c0:	689b      	ldr	r3, [r3, #8]
    80c2:	429a      	cmp	r2, r3
    80c4:	d001      	beq.n	80ca <z_reschedule+0x16>
	ret = arch_swap(key);
    80c6:	f7fc bf35 	b.w	4f34 <arch_swap>
    80ca:	f381 8811 	msr	BASEPRI, r1
    80ce:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    80d2:	4770      	bx	lr
    80d4:	20000b94 	.word	0x20000b94

000080d8 <k_sched_lock>:
	__asm__ volatile(
    80d8:	f04f 0320 	mov.w	r3, #32
    80dc:	f3ef 8111 	mrs	r1, BASEPRI
    80e0:	f383 8812 	msr	BASEPRI_MAX, r3
    80e4:	f3bf 8f6f 	isb	sy
    80e8:	4b04      	ldr	r3, [pc, #16]	; (80fc <k_sched_lock+0x24>)
    80ea:	689a      	ldr	r2, [r3, #8]
    80ec:	7bd3      	ldrb	r3, [r2, #15]
    80ee:	3b01      	subs	r3, #1
    80f0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    80f2:	f381 8811 	msr	BASEPRI, r1
    80f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    80fa:	4770      	bx	lr
    80fc:	20000b94 	.word	0x20000b94

00008100 <update_cache>:
{
    8100:	b538      	push	{r3, r4, r5, lr}
    8102:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    8104:	480c      	ldr	r0, [pc, #48]	; (8138 <update_cache+0x38>)
    8106:	4d0d      	ldr	r5, [pc, #52]	; (813c <update_cache+0x3c>)
    8108:	f004 fa4d 	bl	c5a6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    810c:	4604      	mov	r4, r0
    810e:	b900      	cbnz	r0, 8112 <update_cache+0x12>
    8110:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8112:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8114:	b94a      	cbnz	r2, 812a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    8116:	7b5a      	ldrb	r2, [r3, #13]
    8118:	06d2      	lsls	r2, r2, #27
    811a:	d106      	bne.n	812a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    811c:	69a2      	ldr	r2, [r4, #24]
    811e:	b922      	cbnz	r2, 812a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    8120:	89da      	ldrh	r2, [r3, #14]
    8122:	2a7f      	cmp	r2, #127	; 0x7f
    8124:	d901      	bls.n	812a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    8126:	61eb      	str	r3, [r5, #28]
}
    8128:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    812a:	429c      	cmp	r4, r3
    812c:	d001      	beq.n	8132 <update_cache+0x32>
			z_reset_time_slice();
    812e:	f7ff ff7b 	bl	8028 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8132:	61ec      	str	r4, [r5, #28]
}
    8134:	e7f8      	b.n	8128 <update_cache+0x28>
    8136:	bf00      	nop
    8138:	20000bb4 	.word	0x20000bb4
    813c:	20000b94 	.word	0x20000b94

00008140 <move_thread_to_end_of_prio_q>:
{
    8140:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    8142:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8146:	7b43      	ldrb	r3, [r0, #13]
    8148:	2a00      	cmp	r2, #0
{
    814a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    814c:	da04      	bge.n	8158 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8152:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8154:	f004 f9e2 	bl	c51c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8158:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    815a:	4a15      	ldr	r2, [pc, #84]	; (81b0 <move_thread_to_end_of_prio_q+0x70>)
    815c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8160:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8162:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8166:	f102 0520 	add.w	r5, r2, #32
    816a:	42ab      	cmp	r3, r5
    816c:	d01b      	beq.n	81a6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    816e:	b1d3      	cbz	r3, 81a6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    8170:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    8174:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    8178:	4286      	cmp	r6, r0
    817a:	d00f      	beq.n	819c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    817c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    817e:	2800      	cmp	r0, #0
    8180:	dd0c      	ble.n	819c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8182:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    8184:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8188:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    818a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    818c:	6890      	ldr	r0, [r2, #8]
    818e:	1a43      	subs	r3, r0, r1
    8190:	4258      	negs	r0, r3
}
    8192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8196:	4158      	adcs	r0, r3
    8198:	f7ff bfb2 	b.w	8100 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    819c:	42a3      	cmp	r3, r4
    819e:	d002      	beq.n	81a6 <move_thread_to_end_of_prio_q+0x66>
    81a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    81a2:	2b00      	cmp	r3, #0
    81a4:	d1e6      	bne.n	8174 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    81a6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    81aa:	6021      	str	r1, [r4, #0]
	list->tail = node;
    81ac:	6251      	str	r1, [r2, #36]	; 0x24
}
    81ae:	e7ed      	b.n	818c <move_thread_to_end_of_prio_q+0x4c>
    81b0:	20000b94 	.word	0x20000b94

000081b4 <z_time_slice>:
{
    81b4:	b538      	push	{r3, r4, r5, lr}
    81b6:	4601      	mov	r1, r0
	__asm__ volatile(
    81b8:	f04f 0320 	mov.w	r3, #32
    81bc:	f3ef 8411 	mrs	r4, BASEPRI
    81c0:	f383 8812 	msr	BASEPRI_MAX, r3
    81c4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    81c8:	4b15      	ldr	r3, [pc, #84]	; (8220 <z_time_slice+0x6c>)
    81ca:	4a16      	ldr	r2, [pc, #88]	; (8224 <z_time_slice+0x70>)
    81cc:	6898      	ldr	r0, [r3, #8]
    81ce:	6815      	ldr	r5, [r2, #0]
    81d0:	42a8      	cmp	r0, r5
    81d2:	d106      	bne.n	81e2 <z_time_slice+0x2e>
			z_reset_time_slice();
    81d4:	f7ff ff28 	bl	8028 <z_reset_time_slice>
	__asm__ volatile(
    81d8:	f384 8811 	msr	BASEPRI, r4
    81dc:	f3bf 8f6f 	isb	sy
}
    81e0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    81e2:	2500      	movs	r5, #0
    81e4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    81e6:	4a10      	ldr	r2, [pc, #64]	; (8228 <z_time_slice+0x74>)
    81e8:	6812      	ldr	r2, [r2, #0]
    81ea:	b1ba      	cbz	r2, 821c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    81ec:	89c2      	ldrh	r2, [r0, #14]
    81ee:	2a7f      	cmp	r2, #127	; 0x7f
    81f0:	d814      	bhi.n	821c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    81f2:	7b42      	ldrb	r2, [r0, #13]
    81f4:	06d2      	lsls	r2, r2, #27
    81f6:	d111      	bne.n	821c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    81f8:	4a0c      	ldr	r2, [pc, #48]	; (822c <z_time_slice+0x78>)
    81fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
    81fe:	6812      	ldr	r2, [r2, #0]
    8200:	4295      	cmp	r5, r2
    8202:	db0b      	blt.n	821c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    8204:	4a0a      	ldr	r2, [pc, #40]	; (8230 <z_time_slice+0x7c>)
    8206:	4290      	cmp	r0, r2
    8208:	d008      	beq.n	821c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    820a:	691a      	ldr	r2, [r3, #16]
    820c:	428a      	cmp	r2, r1
    820e:	dc02      	bgt.n	8216 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    8210:	f7ff ff96 	bl	8140 <move_thread_to_end_of_prio_q>
    8214:	e7de      	b.n	81d4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    8216:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    8218:	611a      	str	r2, [r3, #16]
    821a:	e7dd      	b.n	81d8 <z_time_slice+0x24>
    821c:	2200      	movs	r2, #0
    821e:	e7fb      	b.n	8218 <z_time_slice+0x64>
    8220:	20000b94 	.word	0x20000b94
    8224:	20000bc0 	.word	0x20000bc0
    8228:	20000bc8 	.word	0x20000bc8
    822c:	20000bc4 	.word	0x20000bc4
    8230:	20000460 	.word	0x20000460

00008234 <ready_thread>:
{
    8234:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8236:	f990 200d 	ldrsb.w	r2, [r0, #13]
    823a:	7b43      	ldrb	r3, [r0, #13]
    823c:	2a00      	cmp	r2, #0
    823e:	db2a      	blt.n	8296 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8240:	06da      	lsls	r2, r3, #27
    8242:	d128      	bne.n	8296 <ready_thread+0x62>
    8244:	6982      	ldr	r2, [r0, #24]
    8246:	bb32      	cbnz	r2, 8296 <ready_thread+0x62>
	return list->head == list;
    8248:	4a14      	ldr	r2, [pc, #80]	; (829c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    824a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    824e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    8250:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8254:	f102 0520 	add.w	r5, r2, #32
    8258:	42ab      	cmp	r3, r5
    825a:	d017      	beq.n	828c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    825c:	b1b3      	cbz	r3, 828c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    825e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8262:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    8266:	428e      	cmp	r6, r1
    8268:	d00b      	beq.n	8282 <ready_thread+0x4e>
		return b2 - b1;
    826a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    826c:	2900      	cmp	r1, #0
    826e:	dd08      	ble.n	8282 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8270:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8272:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8276:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8278:	6058      	str	r0, [r3, #4]
}
    827a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    827c:	2000      	movs	r0, #0
    827e:	f7ff bf3f 	b.w	8100 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8282:	42a3      	cmp	r3, r4
    8284:	d002      	beq.n	828c <ready_thread+0x58>
    8286:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8288:	2b00      	cmp	r3, #0
    828a:	d1ea      	bne.n	8262 <ready_thread+0x2e>
	node->prev = tail;
    828c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    8290:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8292:	6250      	str	r0, [r2, #36]	; 0x24
}
    8294:	e7f1      	b.n	827a <ready_thread+0x46>
}
    8296:	bc70      	pop	{r4, r5, r6}
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	20000b94 	.word	0x20000b94

000082a0 <z_sched_start>:
{
    82a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    82a2:	f04f 0220 	mov.w	r2, #32
    82a6:	f3ef 8411 	mrs	r4, BASEPRI
    82aa:	f382 8812 	msr	BASEPRI_MAX, r2
    82ae:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    82b2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    82b4:	0751      	lsls	r1, r2, #29
    82b6:	d404      	bmi.n	82c2 <z_sched_start+0x22>
	__asm__ volatile(
    82b8:	f384 8811 	msr	BASEPRI, r4
    82bc:	f3bf 8f6f 	isb	sy
}
    82c0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    82c2:	f022 0204 	bic.w	r2, r2, #4
    82c6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    82c8:	f7ff ffb4 	bl	8234 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    82cc:	4621      	mov	r1, r4
    82ce:	4802      	ldr	r0, [pc, #8]	; (82d8 <z_sched_start+0x38>)
}
    82d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    82d4:	f7ff beee 	b.w	80b4 <z_reschedule>
    82d8:	20001039 	.word	0x20001039

000082dc <unready_thread>:
{
    82dc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    82de:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    82e2:	7b43      	ldrb	r3, [r0, #13]
    82e4:	2a00      	cmp	r2, #0
{
    82e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    82e8:	da04      	bge.n	82f4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    82ee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    82f0:	f004 f914 	bl	c51c <sys_dlist_remove>
	update_cache(thread == _current);
    82f4:	4b04      	ldr	r3, [pc, #16]	; (8308 <unready_thread+0x2c>)
    82f6:	6898      	ldr	r0, [r3, #8]
    82f8:	1a43      	subs	r3, r0, r1
    82fa:	4258      	negs	r0, r3
    82fc:	4158      	adcs	r0, r3
}
    82fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8302:	f7ff befd 	b.w	8100 <update_cache>
    8306:	bf00      	nop
    8308:	20000b94 	.word	0x20000b94

0000830c <pend>:
{
    830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8310:	4606      	mov	r6, r0
    8312:	4615      	mov	r5, r2
    8314:	461c      	mov	r4, r3
	__asm__ volatile(
    8316:	f04f 0320 	mov.w	r3, #32
    831a:	f3ef 8711 	mrs	r7, BASEPRI
    831e:	f383 8812 	msr	BASEPRI_MAX, r3
    8322:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    8326:	f004 f976 	bl	c616 <add_to_waitq_locked>
	__asm__ volatile(
    832a:	f387 8811 	msr	BASEPRI, r7
    832e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8332:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8336:	bf08      	it	eq
    8338:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    833c:	d008      	beq.n	8350 <pend+0x44>
    833e:	462a      	mov	r2, r5
    8340:	4623      	mov	r3, r4
    8342:	f106 0018 	add.w	r0, r6, #24
    8346:	4903      	ldr	r1, [pc, #12]	; (8354 <pend+0x48>)
}
    8348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    834c:	f000 ba40 	b.w	87d0 <z_add_timeout>
    8350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8354:	0000c5d3 	.word	0x0000c5d3

00008358 <z_pend_curr>:
{
    8358:	b510      	push	{r4, lr}
	pending_current = _current;
    835a:	4b07      	ldr	r3, [pc, #28]	; (8378 <z_pend_curr+0x20>)
    835c:	6898      	ldr	r0, [r3, #8]
    835e:	4b07      	ldr	r3, [pc, #28]	; (837c <z_pend_curr+0x24>)
{
    8360:	460c      	mov	r4, r1
	pending_current = _current;
    8362:	6018      	str	r0, [r3, #0]
{
    8364:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    836a:	f7ff ffcf 	bl	830c <pend>
    836e:	4620      	mov	r0, r4
}
    8370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8374:	f7fc bdde 	b.w	4f34 <arch_swap>
    8378:	20000b94 	.word	0x20000b94
    837c:	20000bc0 	.word	0x20000bc0

00008380 <z_set_prio>:
{
    8380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8382:	4604      	mov	r4, r0
	__asm__ volatile(
    8384:	f04f 0320 	mov.w	r3, #32
    8388:	f3ef 8611 	mrs	r6, BASEPRI
    838c:	f383 8812 	msr	BASEPRI_MAX, r3
    8390:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    8394:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8396:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8398:	b249      	sxtb	r1, r1
    839a:	d133      	bne.n	8404 <z_set_prio+0x84>
		if (need_sched) {
    839c:	6982      	ldr	r2, [r0, #24]
    839e:	bb8a      	cbnz	r2, 8404 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    83a6:	f004 f8b9 	bl	c51c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    83aa:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    83ac:	4a17      	ldr	r2, [pc, #92]	; (840c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    83ae:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    83b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    83b4:	7343      	strb	r3, [r0, #13]
    83b6:	4610      	mov	r0, r2
    83b8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83bc:	4283      	cmp	r3, r0
    83be:	d01b      	beq.n	83f8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    83c0:	b1d3      	cbz	r3, 83f8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    83c2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    83c4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    83c8:	42a9      	cmp	r1, r5
    83ca:	d010      	beq.n	83ee <z_set_prio+0x6e>
		return b2 - b1;
    83cc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    83ce:	2d00      	cmp	r5, #0
    83d0:	dd0d      	ble.n	83ee <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    83d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    83d4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    83d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    83da:	605c      	str	r4, [r3, #4]
			update_cache(1);
    83dc:	2001      	movs	r0, #1
    83de:	f7ff fe8f 	bl	8100 <update_cache>
    83e2:	2001      	movs	r0, #1
	__asm__ volatile(
    83e4:	f386 8811 	msr	BASEPRI, r6
    83e8:	f3bf 8f6f 	isb	sy
}
    83ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    83ee:	42bb      	cmp	r3, r7
    83f0:	d002      	beq.n	83f8 <z_set_prio+0x78>
    83f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    83f4:	2b00      	cmp	r3, #0
    83f6:	d1e5      	bne.n	83c4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    83f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    83fa:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    83fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8400:	6254      	str	r4, [r2, #36]	; 0x24
}
    8402:	e7eb      	b.n	83dc <z_set_prio+0x5c>
			thread->base.prio = prio;
    8404:	73a1      	strb	r1, [r4, #14]
    8406:	2000      	movs	r0, #0
    8408:	e7ec      	b.n	83e4 <z_set_prio+0x64>
    840a:	bf00      	nop
    840c:	20000b94 	.word	0x20000b94

00008410 <z_impl_k_thread_suspend>:
{
    8410:	b570      	push	{r4, r5, r6, lr}
    8412:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8414:	3018      	adds	r0, #24
    8416:	f004 f95e 	bl	c6d6 <z_abort_timeout>
	__asm__ volatile(
    841a:	f04f 0320 	mov.w	r3, #32
    841e:	f3ef 8611 	mrs	r6, BASEPRI
    8422:	f383 8812 	msr	BASEPRI_MAX, r3
    8426:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    842a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    842e:	7b63      	ldrb	r3, [r4, #13]
    8430:	2a00      	cmp	r2, #0
    8432:	da05      	bge.n	8440 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8438:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    843a:	4620      	mov	r0, r4
    843c:	f004 f86e 	bl	c51c <sys_dlist_remove>
		update_cache(thread == _current);
    8440:	4d0b      	ldr	r5, [pc, #44]	; (8470 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8442:	7b63      	ldrb	r3, [r4, #13]
    8444:	68a8      	ldr	r0, [r5, #8]
    8446:	f043 0310 	orr.w	r3, r3, #16
    844a:	7363      	strb	r3, [r4, #13]
    844c:	1b03      	subs	r3, r0, r4
    844e:	4258      	negs	r0, r3
    8450:	4158      	adcs	r0, r3
    8452:	f7ff fe55 	bl	8100 <update_cache>
	__asm__ volatile(
    8456:	f386 8811 	msr	BASEPRI, r6
    845a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    845e:	68ab      	ldr	r3, [r5, #8]
    8460:	42a3      	cmp	r3, r4
    8462:	d103      	bne.n	846c <z_impl_k_thread_suspend+0x5c>
}
    8464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8468:	f004 b893 	b.w	c592 <z_reschedule_unlocked>
}
    846c:	bd70      	pop	{r4, r5, r6, pc}
    846e:	bf00      	nop
    8470:	20000b94 	.word	0x20000b94

00008474 <k_sched_unlock>:
{
    8474:	b510      	push	{r4, lr}
	__asm__ volatile(
    8476:	f04f 0320 	mov.w	r3, #32
    847a:	f3ef 8411 	mrs	r4, BASEPRI
    847e:	f383 8812 	msr	BASEPRI_MAX, r3
    8482:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    8486:	4b08      	ldr	r3, [pc, #32]	; (84a8 <k_sched_unlock+0x34>)
    8488:	689a      	ldr	r2, [r3, #8]
    848a:	7bd3      	ldrb	r3, [r2, #15]
    848c:	3301      	adds	r3, #1
    848e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8490:	2000      	movs	r0, #0
    8492:	f7ff fe35 	bl	8100 <update_cache>
	__asm__ volatile(
    8496:	f384 8811 	msr	BASEPRI, r4
    849a:	f3bf 8f6f 	isb	sy
}
    849e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    84a2:	f004 b876 	b.w	c592 <z_reschedule_unlocked>
    84a6:	bf00      	nop
    84a8:	20000b94 	.word	0x20000b94

000084ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    84ac:	4b04      	ldr	r3, [pc, #16]	; (84c0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    84ae:	2100      	movs	r1, #0
    84b0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    84b4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    84b8:	4608      	mov	r0, r1
    84ba:	f7ff bdcb 	b.w	8054 <k_sched_time_slice_set>
    84be:	bf00      	nop
    84c0:	20000b94 	.word	0x20000b94

000084c4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    84c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    84c6:	f04f 0320 	mov.w	r3, #32
    84ca:	f3ef 8511 	mrs	r5, BASEPRI
    84ce:	f383 8812 	msr	BASEPRI_MAX, r3
    84d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    84d6:	491a      	ldr	r1, [pc, #104]	; (8540 <z_impl_k_yield+0x7c>)
    84d8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    84da:	7b43      	ldrb	r3, [r0, #13]
    84dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    84e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    84e2:	f004 f81b 	bl	c51c <sys_dlist_remove>
	}
	queue_thread(_current);
    84e6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    84e8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    84ea:	4608      	mov	r0, r1
    84ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
    84f0:	735a      	strb	r2, [r3, #13]
    84f2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84f6:	4282      	cmp	r2, r0
    84f8:	d01c      	beq.n	8534 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84fa:	b1da      	cbz	r2, 8534 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    84fc:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    84fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    8502:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    8506:	42a6      	cmp	r6, r4
    8508:	d00f      	beq.n	852a <z_impl_k_yield+0x66>
		return b2 - b1;
    850a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    850c:	2c00      	cmp	r4, #0
    850e:	dd0c      	ble.n	852a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    8510:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8512:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8516:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8518:	6053      	str	r3, [r2, #4]
	update_cache(1);
    851a:	2001      	movs	r0, #1
    851c:	f7ff fdf0 	bl	8100 <update_cache>
    8520:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    8522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8526:	f7fc bd05 	b.w	4f34 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    852a:	42ba      	cmp	r2, r7
    852c:	d002      	beq.n	8534 <z_impl_k_yield+0x70>
    852e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8530:	2a00      	cmp	r2, #0
    8532:	d1e6      	bne.n	8502 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    8534:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    8536:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    853a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    853c:	624b      	str	r3, [r1, #36]	; 0x24
}
    853e:	e7ec      	b.n	851a <z_impl_k_yield+0x56>
    8540:	20000b94 	.word	0x20000b94

00008544 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8544:	ea50 0301 	orrs.w	r3, r0, r1
{
    8548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    854c:	4605      	mov	r5, r0
    854e:	460e      	mov	r6, r1
	if (ticks == 0) {
    8550:	d103      	bne.n	855a <z_tick_sleep+0x16>
	z_impl_k_yield();
    8552:	f7ff ffb7 	bl	84c4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    8556:	2000      	movs	r0, #0
    8558:	e033      	b.n	85c2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    855a:	f06f 0401 	mvn.w	r4, #1
    855e:	1a24      	subs	r4, r4, r0
    8560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8564:	eb63 0301 	sbc.w	r3, r3, r1
    8568:	2c01      	cmp	r4, #1
    856a:	f173 0300 	sbcs.w	r3, r3, #0
    856e:	da02      	bge.n	8576 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8570:	f004 f8f1 	bl	c756 <sys_clock_tick_get_32>
    8574:	1944      	adds	r4, r0, r5
    8576:	f04f 0320 	mov.w	r3, #32
    857a:	f3ef 8811 	mrs	r8, BASEPRI
    857e:	f383 8812 	msr	BASEPRI_MAX, r3
    8582:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8586:	4f10      	ldr	r7, [pc, #64]	; (85c8 <z_tick_sleep+0x84>)
    8588:	4b10      	ldr	r3, [pc, #64]	; (85cc <z_tick_sleep+0x88>)
    858a:	68b8      	ldr	r0, [r7, #8]
    858c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    858e:	f7ff fea5 	bl	82dc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8592:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8594:	490e      	ldr	r1, [pc, #56]	; (85d0 <z_tick_sleep+0x8c>)
    8596:	462a      	mov	r2, r5
    8598:	4633      	mov	r3, r6
    859a:	3018      	adds	r0, #24
    859c:	f000 f918 	bl	87d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    85a0:	68ba      	ldr	r2, [r7, #8]
    85a2:	7b53      	ldrb	r3, [r2, #13]
    85a4:	f043 0310 	orr.w	r3, r3, #16
    85a8:	7353      	strb	r3, [r2, #13]
    85aa:	4640      	mov	r0, r8
    85ac:	f7fc fcc2 	bl	4f34 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    85b0:	f004 f8d1 	bl	c756 <sys_clock_tick_get_32>
    85b4:	1a20      	subs	r0, r4, r0
    85b6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    85ba:	2801      	cmp	r0, #1
    85bc:	f173 0300 	sbcs.w	r3, r3, #0
    85c0:	dbc9      	blt.n	8556 <z_tick_sleep+0x12>
}
    85c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85c6:	bf00      	nop
    85c8:	20000b94 	.word	0x20000b94
    85cc:	20000bc0 	.word	0x20000bc0
    85d0:	0000c5d3 	.word	0x0000c5d3

000085d4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    85d8:	bf08      	it	eq
    85da:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    85de:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85e0:	d106      	bne.n	85f0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    85e2:	4b08      	ldr	r3, [pc, #32]	; (8604 <z_impl_k_sleep+0x30>)
    85e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    85e6:	f7ff ff13 	bl	8410 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    85ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    85ee:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    85f0:	f7ff ffa8 	bl	8544 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    85f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    85f8:	fb80 0303 	smull	r0, r3, r0, r3
    85fc:	0bc0      	lsrs	r0, r0, #15
    85fe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8602:	e7f4      	b.n	85ee <z_impl_k_sleep+0x1a>
    8604:	20000b94 	.word	0x20000b94

00008608 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8608:	4b01      	ldr	r3, [pc, #4]	; (8610 <z_impl_z_current_get+0x8>)
    860a:	6898      	ldr	r0, [r3, #8]
    860c:	4770      	bx	lr
    860e:	bf00      	nop
    8610:	20000b94 	.word	0x20000b94

00008614 <z_impl_k_is_preempt_thread>:
    8614:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8618:	b93b      	cbnz	r3, 862a <z_impl_k_is_preempt_thread+0x16>
    861a:	4b05      	ldr	r3, [pc, #20]	; (8630 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    861c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    861e:	89d8      	ldrh	r0, [r3, #14]
    8620:	287f      	cmp	r0, #127	; 0x7f
    8622:	bf8c      	ite	hi
    8624:	2000      	movhi	r0, #0
    8626:	2001      	movls	r0, #1
    8628:	4770      	bx	lr
    862a:	2000      	movs	r0, #0
}
    862c:	4770      	bx	lr
    862e:	bf00      	nop
    8630:	20000b94 	.word	0x20000b94

00008634 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8638:	4604      	mov	r4, r0
    863a:	f04f 0320 	mov.w	r3, #32
    863e:	f3ef 8611 	mrs	r6, BASEPRI
    8642:	f383 8812 	msr	BASEPRI_MAX, r3
    8646:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    864a:	7b43      	ldrb	r3, [r0, #13]
    864c:	071a      	lsls	r2, r3, #28
    864e:	d505      	bpl.n	865c <z_thread_abort+0x28>
	__asm__ volatile(
    8650:	f386 8811 	msr	BASEPRI, r6
    8654:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    865c:	f023 0220 	bic.w	r2, r3, #32
    8660:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8664:	09d2      	lsrs	r2, r2, #7
    8666:	d123      	bne.n	86b0 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8668:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    866a:	68a3      	ldr	r3, [r4, #8]
    866c:	b113      	cbz	r3, 8674 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    866e:	4620      	mov	r0, r4
    8670:	f003 ff5c 	bl	c52c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8674:	f104 0018 	add.w	r0, r4, #24
    8678:	f004 f82d 	bl	c6d6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    867c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8680:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8684:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8686:	42bd      	cmp	r5, r7
    8688:	d000      	beq.n	868c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    868a:	b9cd      	cbnz	r5, 86c0 <z_thread_abort+0x8c>
		update_cache(1);
    868c:	2001      	movs	r0, #1
    868e:	f7ff fd37 	bl	8100 <update_cache>
		z_thread_monitor_exit(thread);
    8692:	4620      	mov	r0, r4
    8694:	f7ff fa4e 	bl	7b34 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    8698:	4b10      	ldr	r3, [pc, #64]	; (86dc <z_thread_abort+0xa8>)
    869a:	689b      	ldr	r3, [r3, #8]
    869c:	42a3      	cmp	r3, r4
    869e:	d1d7      	bne.n	8650 <z_thread_abort+0x1c>
    86a0:	f3ef 8305 	mrs	r3, IPSR
    86a4:	2b00      	cmp	r3, #0
    86a6:	d1d3      	bne.n	8650 <z_thread_abort+0x1c>
    86a8:	4630      	mov	r0, r6
    86aa:	f7fc fc43 	bl	4f34 <arch_swap>
	return ret;
    86ae:	e7cf      	b.n	8650 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    86b0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    86b4:	f043 0308 	orr.w	r3, r3, #8
    86b8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    86ba:	f003 ff2f 	bl	c51c <sys_dlist_remove>
}
    86be:	e7d4      	b.n	866a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    86c0:	4628      	mov	r0, r5
    86c2:	f003 ff33 	bl	c52c <unpend_thread_no_timeout>
    86c6:	f105 0018 	add.w	r0, r5, #24
    86ca:	f004 f804 	bl	c6d6 <z_abort_timeout>
    86ce:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    86d2:	4628      	mov	r0, r5
    86d4:	f7ff fdae 	bl	8234 <ready_thread>
    86d8:	e7d4      	b.n	8684 <z_thread_abort+0x50>
    86da:	bf00      	nop
    86dc:	20000b94 	.word	0x20000b94

000086e0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    86e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    86e2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    86e6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    86e8:	e9cd 6700 	strd	r6, r7, [sp]
    86ec:	f7ff fe34 	bl	8358 <z_pend_curr>

	if (data != NULL) {
    86f0:	b11c      	cbz	r4, 86fa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    86f2:	4b03      	ldr	r3, [pc, #12]	; (8700 <z_sched_wait+0x20>)
    86f4:	689b      	ldr	r3, [r3, #8]
    86f6:	695b      	ldr	r3, [r3, #20]
    86f8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    86fa:	b002      	add	sp, #8
    86fc:	bdd0      	pop	{r4, r6, r7, pc}
    86fe:	bf00      	nop
    8700:	20000b94 	.word	0x20000b94

00008704 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8704:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8706:	4806      	ldr	r0, [pc, #24]	; (8720 <z_data_copy+0x1c>)
    8708:	4a06      	ldr	r2, [pc, #24]	; (8724 <z_data_copy+0x20>)
    870a:	4907      	ldr	r1, [pc, #28]	; (8728 <z_data_copy+0x24>)
    870c:	1a12      	subs	r2, r2, r0
    870e:	f004 f9c7 	bl	caa0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8716:	4a05      	ldr	r2, [pc, #20]	; (872c <z_data_copy+0x28>)
    8718:	4905      	ldr	r1, [pc, #20]	; (8730 <z_data_copy+0x2c>)
    871a:	4806      	ldr	r0, [pc, #24]	; (8734 <z_data_copy+0x30>)
    871c:	f004 b9c0 	b.w	caa0 <memcpy>
    8720:	20000000 	.word	0x20000000
    8724:	20000398 	.word	0x20000398
    8728:	0000f06c 	.word	0x0000f06c
    872c:	00000000 	.word	0x00000000
    8730:	0000f06c 	.word	0x0000f06c
    8734:	20000000 	.word	0x20000000

00008738 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8738:	4b03      	ldr	r3, [pc, #12]	; (8748 <elapsed+0x10>)
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	b90b      	cbnz	r3, 8742 <elapsed+0xa>
    873e:	f7fe b84f 	b.w	67e0 <sys_clock_elapsed>
}
    8742:	2000      	movs	r0, #0
    8744:	4770      	bx	lr
    8746:	bf00      	nop
    8748:	20000bcc 	.word	0x20000bcc

0000874c <next_timeout>:
	return list->head == list;
    874c:	4b11      	ldr	r3, [pc, #68]	; (8794 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    874e:	b510      	push	{r4, lr}
    8750:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8752:	429c      	cmp	r4, r3
    8754:	bf08      	it	eq
    8756:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8758:	f7ff ffee 	bl	8738 <elapsed>
    875c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    875e:	b16c      	cbz	r4, 877c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8760:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    8764:	1ac0      	subs	r0, r0, r3
    8766:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    876a:	2801      	cmp	r0, #1
    876c:	f173 0200 	sbcs.w	r2, r3, #0
    8770:	db0d      	blt.n	878e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8772:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    8776:	f173 0300 	sbcs.w	r3, r3, #0
    877a:	db01      	blt.n	8780 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    877c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8780:	4b05      	ldr	r3, [pc, #20]	; (8798 <next_timeout+0x4c>)
    8782:	691b      	ldr	r3, [r3, #16]
    8784:	b113      	cbz	r3, 878c <next_timeout+0x40>
    8786:	4298      	cmp	r0, r3
    8788:	bfa8      	it	ge
    878a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    878c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    878e:	2000      	movs	r0, #0
    8790:	e7f6      	b.n	8780 <next_timeout+0x34>
    8792:	bf00      	nop
    8794:	20000168 	.word	0x20000168
    8798:	20000b94 	.word	0x20000b94

0000879c <remove_timeout>:
{
    879c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    879e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    87a0:	b168      	cbz	r0, 87be <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    87a2:	4a0a      	ldr	r2, [pc, #40]	; (87cc <remove_timeout+0x30>)
    87a4:	6852      	ldr	r2, [r2, #4]
    87a6:	4290      	cmp	r0, r2
    87a8:	d009      	beq.n	87be <remove_timeout+0x22>
	if (next(t) != NULL) {
    87aa:	b143      	cbz	r3, 87be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    87ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    87b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    87b4:	1912      	adds	r2, r2, r4
    87b6:	eb41 0105 	adc.w	r1, r1, r5
    87ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    87be:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    87c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    87c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    87c4:	2300      	movs	r3, #0
	node->prev = NULL;
    87c6:	e9c0 3300 	strd	r3, r3, [r0]
}
    87ca:	bd30      	pop	{r4, r5, pc}
    87cc:	20000168 	.word	0x20000168

000087d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    87d4:	bf08      	it	eq
    87d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    87da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87dc:	4604      	mov	r4, r0
    87de:	461f      	mov	r7, r3
    87e0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87e2:	d067      	beq.n	88b4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    87e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    87e6:	f04f 0320 	mov.w	r3, #32
    87ea:	f3ef 8611 	mrs	r6, BASEPRI
    87ee:	f383 8812 	msr	BASEPRI_MAX, r3
    87f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    87f6:	f06f 0201 	mvn.w	r2, #1
    87fa:	1b53      	subs	r3, r2, r5
    87fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    8800:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8804:	2b00      	cmp	r3, #0
    8806:	db1b      	blt.n	8840 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8808:	4b2b      	ldr	r3, [pc, #172]	; (88b8 <z_add_timeout+0xe8>)
    880a:	e9d3 1300 	ldrd	r1, r3, [r3]
    880e:	1a52      	subs	r2, r2, r1
    8810:	eb6c 0303 	sbc.w	r3, ip, r3
    8814:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    8816:	eb63 0307 	sbc.w	r3, r3, r7
    881a:	2d01      	cmp	r5, #1
    881c:	f173 0200 	sbcs.w	r2, r3, #0
    8820:	bfbc      	itt	lt
    8822:	2501      	movlt	r5, #1
    8824:	2300      	movlt	r3, #0
    8826:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    882a:	4824      	ldr	r0, [pc, #144]	; (88bc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    882c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8830:	4283      	cmp	r3, r0
    8832:	d118      	bne.n	8866 <z_add_timeout+0x96>
	node->prev = tail;
    8834:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    8838:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    883c:	6044      	str	r4, [r0, #4]
}
    883e:	e026      	b.n	888e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8840:	f7ff ff7a 	bl	8738 <elapsed>
    8844:	3501      	adds	r5, #1
    8846:	f147 0700 	adc.w	r7, r7, #0
    884a:	182d      	adds	r5, r5, r0
    884c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    8850:	e9c4 5704 	strd	r5, r7, [r4, #16]
    8854:	e7e9      	b.n	882a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8856:	1a52      	subs	r2, r2, r1
    8858:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    885c:	459c      	cmp	ip, r3
    885e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    8862:	d0e7      	beq.n	8834 <z_add_timeout+0x64>
    8864:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8866:	2b00      	cmp	r3, #0
    8868:	d0e4      	beq.n	8834 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    886a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    886e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    8872:	428a      	cmp	r2, r1
    8874:	eb75 0e07 	sbcs.w	lr, r5, r7
    8878:	daed      	bge.n	8856 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    887a:	1a8a      	subs	r2, r1, r2
    887c:	eb67 0505 	sbc.w	r5, r7, r5
    8880:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8884:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8886:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    888a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    888c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    888e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8890:	4283      	cmp	r3, r0
    8892:	d00b      	beq.n	88ac <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8894:	429c      	cmp	r4, r3
    8896:	d109      	bne.n	88ac <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8898:	f7ff ff58 	bl	874c <next_timeout>

			if (next_time == 0 ||
    889c:	b118      	cbz	r0, 88a6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    889e:	4b08      	ldr	r3, [pc, #32]	; (88c0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    88a0:	691b      	ldr	r3, [r3, #16]
    88a2:	4283      	cmp	r3, r0
    88a4:	d002      	beq.n	88ac <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    88a6:	2100      	movs	r1, #0
    88a8:	f7fd ff68 	bl	677c <sys_clock_set_timeout>
	__asm__ volatile(
    88ac:	f386 8811 	msr	BASEPRI, r6
    88b0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    88b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88b6:	bf00      	nop
    88b8:	200005d0 	.word	0x200005d0
    88bc:	20000168 	.word	0x20000168
    88c0:	20000b94 	.word	0x20000b94

000088c4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    88c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88c8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    88ca:	f7ff fc73 	bl	81b4 <z_time_slice>
	__asm__ volatile(
    88ce:	f04f 0320 	mov.w	r3, #32
    88d2:	f3ef 8411 	mrs	r4, BASEPRI
    88d6:	f383 8812 	msr	BASEPRI_MAX, r3
    88da:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    88de:	4e24      	ldr	r6, [pc, #144]	; (8970 <sys_clock_announce+0xac>)
	return list->head == list;
    88e0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8974 <sys_clock_announce+0xb0>
    88e4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    88e6:	4d24      	ldr	r5, [pc, #144]	; (8978 <sys_clock_announce+0xb4>)
    88e8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    88ec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88ee:	4540      	cmp	r0, r8
		curr_tick += dt;
    88f0:	e9d5 1e00 	ldrd	r1, lr, [r5]
    88f4:	ea4f 77e2 	mov.w	r7, r2, asr #31
    88f8:	d00b      	beq.n	8912 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    88fa:	b150      	cbz	r0, 8912 <sys_clock_announce+0x4e>
    88fc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    8900:	429a      	cmp	r2, r3
    8902:	eb77 090c 	sbcs.w	r9, r7, ip
    8906:	da16      	bge.n	8936 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8908:	1a9b      	subs	r3, r3, r2
    890a:	eb6c 0c07 	sbc.w	ip, ip, r7
    890e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    8912:	1852      	adds	r2, r2, r1
    8914:	eb4e 0707 	adc.w	r7, lr, r7
    8918:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    891c:	2500      	movs	r5, #0
    891e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8920:	f7ff ff14 	bl	874c <next_timeout>
    8924:	4629      	mov	r1, r5
    8926:	f7fd ff29 	bl	677c <sys_clock_set_timeout>
	__asm__ volatile(
    892a:	f384 8811 	msr	BASEPRI, r4
    892e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8936:	1859      	adds	r1, r3, r1
    8938:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    893c:	1ad3      	subs	r3, r2, r3
    893e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    8940:	2200      	movs	r2, #0
    8942:	2300      	movs	r3, #0
    8944:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    8948:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    894c:	f7ff ff26 	bl	879c <remove_timeout>
    8950:	f384 8811 	msr	BASEPRI, r4
    8954:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8958:	6883      	ldr	r3, [r0, #8]
    895a:	4798      	blx	r3
	__asm__ volatile(
    895c:	f04f 0320 	mov.w	r3, #32
    8960:	f3ef 8411 	mrs	r4, BASEPRI
    8964:	f383 8812 	msr	BASEPRI_MAX, r3
    8968:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    896c:	e7bc      	b.n	88e8 <sys_clock_announce+0x24>
    896e:	bf00      	nop
    8970:	20000bcc 	.word	0x20000bcc
    8974:	20000168 	.word	0x20000168
    8978:	200005d0 	.word	0x200005d0

0000897c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    897c:	b510      	push	{r4, lr}
    897e:	f04f 0320 	mov.w	r3, #32
    8982:	f3ef 8411 	mrs	r4, BASEPRI
    8986:	f383 8812 	msr	BASEPRI_MAX, r3
    898a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    898e:	f7fd ff27 	bl	67e0 <sys_clock_elapsed>
    8992:	4a05      	ldr	r2, [pc, #20]	; (89a8 <sys_clock_tick_get+0x2c>)
    8994:	e9d2 3100 	ldrd	r3, r1, [r2]
    8998:	18c0      	adds	r0, r0, r3
    899a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    899e:	f384 8811 	msr	BASEPRI, r4
    89a2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    89a6:	bd10      	pop	{r4, pc}
    89a8:	200005d0 	.word	0x200005d0

000089ac <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    89ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    89b0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    89b2:	4b29      	ldr	r3, [pc, #164]	; (8a58 <z_impl_k_poll+0xac>)
    89b4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    89b6:	2301      	movs	r3, #1
    89b8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    89bc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    89c0:	ea52 0305 	orrs.w	r3, r2, r5
{
    89c4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    89c6:	bf0c      	ite	eq
    89c8:	2301      	moveq	r3, #1
    89ca:	2300      	movne	r3, #0
    89cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    89d0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    89d2:	f003 fefc 	bl	c7ce <register_events>
    89d6:	4681      	mov	r9, r0
	__asm__ volatile(
    89d8:	f04f 0320 	mov.w	r3, #32
    89dc:	f3ef 8a11 	mrs	sl, BASEPRI
    89e0:	f383 8812 	msr	BASEPRI_MAX, r3
    89e4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    89e8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    89ec:	b964      	cbnz	r4, 8a08 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    89ee:	4601      	mov	r1, r0
    89f0:	4652      	mov	r2, sl
    89f2:	4640      	mov	r0, r8
    89f4:	f003 ffbc 	bl	c970 <clear_event_registrations>
	__asm__ volatile(
    89f8:	f38a 8811 	msr	BASEPRI, sl
    89fc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    8a00:	4620      	mov	r0, r4
    8a02:	b002      	add	sp, #8
    8a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    8a08:	2300      	movs	r3, #0
    8a0a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8a0e:	ea56 0305 	orrs.w	r3, r6, r5
    8a12:	d106      	bne.n	8a22 <z_impl_k_poll+0x76>
    8a14:	f38a 8811 	msr	BASEPRI, sl
    8a18:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    8a1c:	f06f 040a 	mvn.w	r4, #10
    8a20:	e7ee      	b.n	8a00 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    8a22:	e9cd 6500 	strd	r6, r5, [sp]
    8a26:	4a0d      	ldr	r2, [pc, #52]	; (8a5c <z_impl_k_poll+0xb0>)
    8a28:	480d      	ldr	r0, [pc, #52]	; (8a60 <z_impl_k_poll+0xb4>)
    8a2a:	4651      	mov	r1, sl
    8a2c:	f7ff fc94 	bl	8358 <z_pend_curr>
    8a30:	4604      	mov	r4, r0
	__asm__ volatile(
    8a32:	f04f 0320 	mov.w	r3, #32
    8a36:	f3ef 8511 	mrs	r5, BASEPRI
    8a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8a3e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    8a42:	462a      	mov	r2, r5
    8a44:	4649      	mov	r1, r9
    8a46:	4640      	mov	r0, r8
    8a48:	f003 ff92 	bl	c970 <clear_event_registrations>
	__asm__ volatile(
    8a4c:	f385 8811 	msr	BASEPRI, r5
    8a50:	f3bf 8f6f 	isb	sy
	return swap_rc;
    8a54:	e7d4      	b.n	8a00 <z_impl_k_poll+0x54>
    8a56:	bf00      	nop
    8a58:	20000b94 	.word	0x20000b94
    8a5c:	20000170 	.word	0x20000170
    8a60:	20001039 	.word	0x20001039

00008a64 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    8a64:	b538      	push	{r3, r4, r5, lr}
    8a66:	4603      	mov	r3, r0
	__asm__ volatile(
    8a68:	f04f 0220 	mov.w	r2, #32
    8a6c:	f3ef 8511 	mrs	r5, BASEPRI
    8a70:	f382 8812 	msr	BASEPRI_MAX, r2
    8a74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    8a78:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    8a7a:	2101      	movs	r1, #1
    8a7c:	6081      	str	r1, [r0, #8]
	return list->head == list;
    8a7e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    8a80:	4283      	cmp	r3, r0
    8a82:	d106      	bne.n	8a92 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    8a84:	f385 8811 	msr	BASEPRI, r5
    8a88:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    8a8c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    8a8e:	4620      	mov	r0, r4
    8a90:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    8a92:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8a96:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8a98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8a9a:	2300      	movs	r3, #0
	node->prev = NULL;
    8a9c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    8aa0:	f003 ff0c 	bl	c8bc <signal_poll_event>
	z_reschedule(&lock, key);
    8aa4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    8aa6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    8aa8:	4801      	ldr	r0, [pc, #4]	; (8ab0 <z_impl_k_poll_signal_raise+0x4c>)
    8aaa:	f7ff fb03 	bl	80b4 <z_reschedule>
	return rc;
    8aae:	e7ee      	b.n	8a8e <z_impl_k_poll_signal_raise+0x2a>
    8ab0:	20001039 	.word	0x20001039

00008ab4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8ab4:	4a02      	ldr	r2, [pc, #8]	; (8ac0 <boot_banner+0xc>)
    8ab6:	4903      	ldr	r1, [pc, #12]	; (8ac4 <boot_banner+0x10>)
    8ab8:	4803      	ldr	r0, [pc, #12]	; (8ac8 <boot_banner+0x14>)
    8aba:	f001 bf54 	b.w	a966 <printk>
    8abe:	bf00      	nop
    8ac0:	0000df89 	.word	0x0000df89
    8ac4:	0000edaf 	.word	0x0000edaf
    8ac8:	0000edca 	.word	0x0000edca

00008acc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8ace:	4b09      	ldr	r3, [pc, #36]	; (8af4 <k_sys_work_q_init+0x28>)
    8ad0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8ad2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8ad4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8ad6:	9300      	str	r3, [sp, #0]
    8ad8:	4907      	ldr	r1, [pc, #28]	; (8af8 <k_sys_work_q_init+0x2c>)
    8ada:	4808      	ldr	r0, [pc, #32]	; (8afc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8adc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8ae8:	f000 f8f0 	bl	8ccc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8aec:	4620      	mov	r0, r4
    8aee:	b004      	add	sp, #16
    8af0:	bd10      	pop	{r4, pc}
    8af2:	bf00      	nop
    8af4:	0000edf1 	.word	0x0000edf1
    8af8:	20002600 	.word	0x20002600
    8afc:	200005d8 	.word	0x200005d8

00008b00 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    8b04:	4e47      	ldr	r6, [pc, #284]	; (8c24 <work_queue_main+0x124>)
    8b06:	b085      	sub	sp, #20
    8b08:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8b0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    8b0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    8b12:	f04f 0320 	mov.w	r3, #32
    8b16:	f3ef 8711 	mrs	r7, BASEPRI
    8b1a:	f383 8812 	msr	BASEPRI_MAX, r3
    8b1e:	f3bf 8f6f 	isb	sy
    8b22:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8b26:	b98d      	cbnz	r5, 8b4c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    8b28:	2102      	movs	r1, #2
    8b2a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    8b2e:	f003 ff78 	bl	ca22 <flag_test_and_clear>
    8b32:	2800      	cmp	r0, #0
    8b34:	d135      	bne.n	8ba2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8b36:	2300      	movs	r3, #0
    8b38:	e9cd 8900 	strd	r8, r9, [sp]
    8b3c:	9302      	str	r3, [sp, #8]
    8b3e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    8b42:	4639      	mov	r1, r7
    8b44:	4838      	ldr	r0, [pc, #224]	; (8c28 <work_queue_main+0x128>)
    8b46:	f7ff fdcb 	bl	86e0 <z_sched_wait>
			continue;
    8b4a:	e7e2      	b.n	8b12 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b4c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    8b50:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    8b52:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b56:	4295      	cmp	r5, r2
    8b58:	d101      	bne.n	8b5e <work_queue_main+0x5e>
	list->tail = node;
    8b5a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    8b5e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    8b62:	f043 0302 	orr.w	r3, r3, #2
    8b66:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    8b6a:	68eb      	ldr	r3, [r5, #12]
    8b6c:	f023 0304 	bic.w	r3, r3, #4
    8b70:	f043 0301 	orr.w	r3, r3, #1
    8b74:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    8b76:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    8b78:	f387 8811 	msr	BASEPRI, r7
    8b7c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8b80:	4628      	mov	r0, r5
    8b82:	4798      	blx	r3
	__asm__ volatile(
    8b84:	f04f 0320 	mov.w	r3, #32
    8b88:	f3ef 8b11 	mrs	fp, BASEPRI
    8b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    8b90:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8b94:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8b96:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8b98:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8b9c:	d40b      	bmi.n	8bb6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    8b9e:	60ea      	str	r2, [r5, #12]
    8ba0:	e00e      	b.n	8bc0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8ba2:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8ba6:	2200      	movs	r2, #0
    8ba8:	2101      	movs	r1, #1
    8baa:	4628      	mov	r0, r5
    8bac:	f003 fd75 	bl	c69a <z_sched_wake>
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d1f8      	bne.n	8ba6 <work_queue_main+0xa6>
    8bb4:	e7bf      	b.n	8b36 <work_queue_main+0x36>
	return list->head;
    8bb6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    8bb8:	f023 0303 	bic.w	r3, r3, #3
    8bbc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8bbe:	b970      	cbnz	r0, 8bde <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    8bc0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    8bc4:	f023 0302 	bic.w	r3, r3, #2
    8bc8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    8bcc:	f38b 8811 	msr	BASEPRI, fp
    8bd0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8bd4:	05d8      	lsls	r0, r3, #23
    8bd6:	d49c      	bmi.n	8b12 <work_queue_main+0x12>
	z_impl_k_yield();
    8bd8:	f7ff fc74 	bl	84c4 <z_impl_k_yield>
}
    8bdc:	e799      	b.n	8b12 <work_queue_main+0x12>
	return node->next;
    8bde:	2700      	movs	r7, #0
    8be0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    8be4:	463b      	mov	r3, r7
		if (wc->work == work) {
    8be6:	6842      	ldr	r2, [r0, #4]
    8be8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    8bea:	4601      	mov	r1, r0
		if (wc->work == work) {
    8bec:	d10c      	bne.n	8c08 <work_queue_main+0x108>
	return node->next;
    8bee:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    8bf0:	b997      	cbnz	r7, 8c18 <work_queue_main+0x118>
    8bf2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    8bf4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    8bf6:	4282      	cmp	r2, r0
    8bf8:	d100      	bne.n	8bfc <work_queue_main+0xfc>
	list->tail = node;
    8bfa:	6071      	str	r1, [r6, #4]
	parent->next = child;
    8bfc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    8c00:	f7ff f9c4 	bl	7f8c <z_impl_k_sem_give>
}
    8c04:	4639      	mov	r1, r7
    8c06:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8c08:	f1ba 0f00 	cmp.w	sl, #0
    8c0c:	d0d8      	beq.n	8bc0 <work_queue_main+0xc0>
	return node->next;
    8c0e:	4650      	mov	r0, sl
    8c10:	460f      	mov	r7, r1
    8c12:	f8da a000 	ldr.w	sl, [sl]
    8c16:	e7e6      	b.n	8be6 <work_queue_main+0xe6>
	return list->tail;
    8c18:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    8c1a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    8c1c:	4290      	cmp	r0, r2
	list->tail = node;
    8c1e:	bf08      	it	eq
    8c20:	6077      	streq	r7, [r6, #4]
}
    8c22:	e7eb      	b.n	8bfc <work_queue_main+0xfc>
    8c24:	20000bd0 	.word	0x20000bd0
    8c28:	20001039 	.word	0x20001039

00008c2c <submit_to_queue_locked>:
{
    8c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    8c2e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8c30:	079a      	lsls	r2, r3, #30
{
    8c32:	4604      	mov	r4, r0
    8c34:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8c36:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8c3a:	d41f      	bmi.n	8c7c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8c3c:	075f      	lsls	r7, r3, #29
    8c3e:	d41f      	bmi.n	8c80 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    8c40:	680a      	ldr	r2, [r1, #0]
    8c42:	b90a      	cbnz	r2, 8c48 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8c44:	6882      	ldr	r2, [r0, #8]
    8c46:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8c48:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    8c4a:	bf44      	itt	mi
    8c4c:	68a3      	ldrmi	r3, [r4, #8]
    8c4e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8c50:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    8c52:	bf4c      	ite	mi
    8c54:	2502      	movmi	r5, #2
		ret = 1;
    8c56:	2501      	movpl	r5, #1
	if (queue == NULL) {
    8c58:	b37f      	cbz	r7, 8cba <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8c5a:	4b1b      	ldr	r3, [pc, #108]	; (8cc8 <submit_to_queue_locked+0x9c>)
    8c5c:	689b      	ldr	r3, [r3, #8]
    8c5e:	42bb      	cmp	r3, r7
    8c60:	d111      	bne.n	8c86 <submit_to_queue_locked+0x5a>
    8c62:	f003 fc2d 	bl	c4c0 <k_is_in_isr>
    8c66:	f080 0001 	eor.w	r0, r0, #1
    8c6a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    8c6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8c70:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8c72:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8c76:	d523      	bpl.n	8cc0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    8c78:	b13a      	cbz	r2, 8c8a <submit_to_queue_locked+0x5e>
    8c7a:	b940      	cbnz	r0, 8c8e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    8c7c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8c80:	2300      	movs	r3, #0
    8c82:	6033      	str	r3, [r6, #0]
	return ret;
    8c84:	e013      	b.n	8cae <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8c86:	2000      	movs	r0, #0
    8c88:	e7f0      	b.n	8c6c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    8c8a:	071b      	lsls	r3, r3, #28
    8c8c:	d4f6      	bmi.n	8c7c <submit_to_queue_locked+0x50>
	parent->next = child;
    8c8e:	2300      	movs	r3, #0
    8c90:	6023      	str	r3, [r4, #0]
	return list->tail;
    8c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    8c96:	b963      	cbnz	r3, 8cb2 <submit_to_queue_locked+0x86>
	list->head = node;
    8c98:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    8c9c:	4638      	mov	r0, r7
    8c9e:	f003 fecb 	bl	ca38 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    8ca2:	68e3      	ldr	r3, [r4, #12]
    8ca4:	f043 0304 	orr.w	r3, r3, #4
    8ca8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8caa:	6833      	ldr	r3, [r6, #0]
    8cac:	60a3      	str	r3, [r4, #8]
}
    8cae:	4628      	mov	r0, r5
    8cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    8cb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8cb4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    8cb8:	e7f0      	b.n	8c9c <submit_to_queue_locked+0x70>
		return -EINVAL;
    8cba:	f06f 0515 	mvn.w	r5, #21
    8cbe:	e7df      	b.n	8c80 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    8cc0:	f06f 0512 	mvn.w	r5, #18
    8cc4:	e7dc      	b.n	8c80 <submit_to_queue_locked+0x54>
    8cc6:	bf00      	nop
    8cc8:	20000b94 	.word	0x20000b94

00008ccc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cce:	b089      	sub	sp, #36	; 0x24
    8cd0:	4604      	mov	r4, r0
	list->head = NULL;
    8cd2:	2000      	movs	r0, #0
	list->tail = NULL;
    8cd4:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    8cd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    8cda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    8cde:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    8ce2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    8ce6:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8cea:	b31d      	cbz	r5, 8d34 <k_work_queue_start+0x68>
    8cec:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8cee:	2800      	cmp	r0, #0
    8cf0:	f240 1001 	movw	r0, #257	; 0x101
    8cf4:	bf08      	it	eq
    8cf6:	2001      	moveq	r0, #1
	*flagp = flags;
    8cf8:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8cfc:	2000      	movs	r0, #0
    8cfe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    8d02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    8d06:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8d0a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8d0e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    8d12:	4b09      	ldr	r3, [pc, #36]	; (8d38 <k_work_queue_start+0x6c>)
    8d14:	9400      	str	r4, [sp, #0]
    8d16:	4620      	mov	r0, r4
    8d18:	f7fe ffda 	bl	7cd0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8d1c:	b125      	cbz	r5, 8d28 <k_work_queue_start+0x5c>
    8d1e:	6829      	ldr	r1, [r5, #0]
    8d20:	b111      	cbz	r1, 8d28 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    8d22:	4620      	mov	r0, r4
    8d24:	f7fe ff24 	bl	7b70 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8d28:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8d2a:	b009      	add	sp, #36	; 0x24
    8d2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8d30:	f003 bbce 	b.w	c4d0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8d34:	2001      	movs	r0, #1
    8d36:	e7df      	b.n	8cf8 <k_work_queue_start+0x2c>
    8d38:	00008b01 	.word	0x00008b01

00008d3c <malloc>:
    8d3c:	4b02      	ldr	r3, [pc, #8]	; (8d48 <malloc+0xc>)
    8d3e:	4601      	mov	r1, r0
    8d40:	6818      	ldr	r0, [r3, #0]
    8d42:	f000 b84d 	b.w	8de0 <_malloc_r>
    8d46:	bf00      	nop
    8d48:	20000178 	.word	0x20000178

00008d4c <_free_r>:
    8d4c:	b538      	push	{r3, r4, r5, lr}
    8d4e:	4605      	mov	r5, r0
    8d50:	2900      	cmp	r1, #0
    8d52:	d041      	beq.n	8dd8 <_free_r+0x8c>
    8d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8d58:	1f0c      	subs	r4, r1, #4
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	bfb8      	it	lt
    8d5e:	18e4      	addlt	r4, r4, r3
    8d60:	f000 fd32 	bl	97c8 <__malloc_lock>
    8d64:	4a1d      	ldr	r2, [pc, #116]	; (8ddc <_free_r+0x90>)
    8d66:	6813      	ldr	r3, [r2, #0]
    8d68:	b933      	cbnz	r3, 8d78 <_free_r+0x2c>
    8d6a:	6063      	str	r3, [r4, #4]
    8d6c:	6014      	str	r4, [r2, #0]
    8d6e:	4628      	mov	r0, r5
    8d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8d74:	f000 bd2e 	b.w	97d4 <__malloc_unlock>
    8d78:	42a3      	cmp	r3, r4
    8d7a:	d908      	bls.n	8d8e <_free_r+0x42>
    8d7c:	6820      	ldr	r0, [r4, #0]
    8d7e:	1821      	adds	r1, r4, r0
    8d80:	428b      	cmp	r3, r1
    8d82:	bf01      	itttt	eq
    8d84:	6819      	ldreq	r1, [r3, #0]
    8d86:	685b      	ldreq	r3, [r3, #4]
    8d88:	1809      	addeq	r1, r1, r0
    8d8a:	6021      	streq	r1, [r4, #0]
    8d8c:	e7ed      	b.n	8d6a <_free_r+0x1e>
    8d8e:	461a      	mov	r2, r3
    8d90:	685b      	ldr	r3, [r3, #4]
    8d92:	b10b      	cbz	r3, 8d98 <_free_r+0x4c>
    8d94:	42a3      	cmp	r3, r4
    8d96:	d9fa      	bls.n	8d8e <_free_r+0x42>
    8d98:	6811      	ldr	r1, [r2, #0]
    8d9a:	1850      	adds	r0, r2, r1
    8d9c:	42a0      	cmp	r0, r4
    8d9e:	d10b      	bne.n	8db8 <_free_r+0x6c>
    8da0:	6820      	ldr	r0, [r4, #0]
    8da2:	4401      	add	r1, r0
    8da4:	1850      	adds	r0, r2, r1
    8da6:	4283      	cmp	r3, r0
    8da8:	6011      	str	r1, [r2, #0]
    8daa:	d1e0      	bne.n	8d6e <_free_r+0x22>
    8dac:	6818      	ldr	r0, [r3, #0]
    8dae:	685b      	ldr	r3, [r3, #4]
    8db0:	6053      	str	r3, [r2, #4]
    8db2:	4401      	add	r1, r0
    8db4:	6011      	str	r1, [r2, #0]
    8db6:	e7da      	b.n	8d6e <_free_r+0x22>
    8db8:	d902      	bls.n	8dc0 <_free_r+0x74>
    8dba:	230c      	movs	r3, #12
    8dbc:	602b      	str	r3, [r5, #0]
    8dbe:	e7d6      	b.n	8d6e <_free_r+0x22>
    8dc0:	6820      	ldr	r0, [r4, #0]
    8dc2:	1821      	adds	r1, r4, r0
    8dc4:	428b      	cmp	r3, r1
    8dc6:	bf04      	itt	eq
    8dc8:	6819      	ldreq	r1, [r3, #0]
    8dca:	685b      	ldreq	r3, [r3, #4]
    8dcc:	6063      	str	r3, [r4, #4]
    8dce:	bf04      	itt	eq
    8dd0:	1809      	addeq	r1, r1, r0
    8dd2:	6021      	streq	r1, [r4, #0]
    8dd4:	6054      	str	r4, [r2, #4]
    8dd6:	e7ca      	b.n	8d6e <_free_r+0x22>
    8dd8:	bd38      	pop	{r3, r4, r5, pc}
    8dda:	bf00      	nop
    8ddc:	20000bd8 	.word	0x20000bd8

00008de0 <_malloc_r>:
    8de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8de2:	1ccd      	adds	r5, r1, #3
    8de4:	f025 0503 	bic.w	r5, r5, #3
    8de8:	3508      	adds	r5, #8
    8dea:	2d0c      	cmp	r5, #12
    8dec:	bf38      	it	cc
    8dee:	250c      	movcc	r5, #12
    8df0:	2d00      	cmp	r5, #0
    8df2:	4606      	mov	r6, r0
    8df4:	db01      	blt.n	8dfa <_malloc_r+0x1a>
    8df6:	42a9      	cmp	r1, r5
    8df8:	d903      	bls.n	8e02 <_malloc_r+0x22>
    8dfa:	230c      	movs	r3, #12
    8dfc:	6033      	str	r3, [r6, #0]
    8dfe:	2000      	movs	r0, #0
    8e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e02:	f000 fce1 	bl	97c8 <__malloc_lock>
    8e06:	4921      	ldr	r1, [pc, #132]	; (8e8c <_malloc_r+0xac>)
    8e08:	680a      	ldr	r2, [r1, #0]
    8e0a:	4614      	mov	r4, r2
    8e0c:	b99c      	cbnz	r4, 8e36 <_malloc_r+0x56>
    8e0e:	4f20      	ldr	r7, [pc, #128]	; (8e90 <_malloc_r+0xb0>)
    8e10:	683b      	ldr	r3, [r7, #0]
    8e12:	b923      	cbnz	r3, 8e1e <_malloc_r+0x3e>
    8e14:	4621      	mov	r1, r4
    8e16:	4630      	mov	r0, r6
    8e18:	f000 fb8c 	bl	9534 <_sbrk_r>
    8e1c:	6038      	str	r0, [r7, #0]
    8e1e:	4629      	mov	r1, r5
    8e20:	4630      	mov	r0, r6
    8e22:	f000 fb87 	bl	9534 <_sbrk_r>
    8e26:	1c43      	adds	r3, r0, #1
    8e28:	d123      	bne.n	8e72 <_malloc_r+0x92>
    8e2a:	230c      	movs	r3, #12
    8e2c:	6033      	str	r3, [r6, #0]
    8e2e:	4630      	mov	r0, r6
    8e30:	f000 fcd0 	bl	97d4 <__malloc_unlock>
    8e34:	e7e3      	b.n	8dfe <_malloc_r+0x1e>
    8e36:	6823      	ldr	r3, [r4, #0]
    8e38:	1b5b      	subs	r3, r3, r5
    8e3a:	d417      	bmi.n	8e6c <_malloc_r+0x8c>
    8e3c:	2b0b      	cmp	r3, #11
    8e3e:	d903      	bls.n	8e48 <_malloc_r+0x68>
    8e40:	6023      	str	r3, [r4, #0]
    8e42:	441c      	add	r4, r3
    8e44:	6025      	str	r5, [r4, #0]
    8e46:	e004      	b.n	8e52 <_malloc_r+0x72>
    8e48:	6863      	ldr	r3, [r4, #4]
    8e4a:	42a2      	cmp	r2, r4
    8e4c:	bf0c      	ite	eq
    8e4e:	600b      	streq	r3, [r1, #0]
    8e50:	6053      	strne	r3, [r2, #4]
    8e52:	4630      	mov	r0, r6
    8e54:	f000 fcbe 	bl	97d4 <__malloc_unlock>
    8e58:	f104 000b 	add.w	r0, r4, #11
    8e5c:	1d23      	adds	r3, r4, #4
    8e5e:	f020 0007 	bic.w	r0, r0, #7
    8e62:	1ac2      	subs	r2, r0, r3
    8e64:	d0cc      	beq.n	8e00 <_malloc_r+0x20>
    8e66:	1a1b      	subs	r3, r3, r0
    8e68:	50a3      	str	r3, [r4, r2]
    8e6a:	e7c9      	b.n	8e00 <_malloc_r+0x20>
    8e6c:	4622      	mov	r2, r4
    8e6e:	6864      	ldr	r4, [r4, #4]
    8e70:	e7cc      	b.n	8e0c <_malloc_r+0x2c>
    8e72:	1cc4      	adds	r4, r0, #3
    8e74:	f024 0403 	bic.w	r4, r4, #3
    8e78:	42a0      	cmp	r0, r4
    8e7a:	d0e3      	beq.n	8e44 <_malloc_r+0x64>
    8e7c:	1a21      	subs	r1, r4, r0
    8e7e:	4630      	mov	r0, r6
    8e80:	f000 fb58 	bl	9534 <_sbrk_r>
    8e84:	3001      	adds	r0, #1
    8e86:	d1dd      	bne.n	8e44 <_malloc_r+0x64>
    8e88:	e7cf      	b.n	8e2a <_malloc_r+0x4a>
    8e8a:	bf00      	nop
    8e8c:	20000bd8 	.word	0x20000bd8
    8e90:	20000bdc 	.word	0x20000bdc

00008e94 <_printf_float>:
    8e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e98:	b091      	sub	sp, #68	; 0x44
    8e9a:	460c      	mov	r4, r1
    8e9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    8ea0:	4616      	mov	r6, r2
    8ea2:	461f      	mov	r7, r3
    8ea4:	4605      	mov	r5, r0
    8ea6:	f000 fc8b 	bl	97c0 <_localeconv_r>
    8eaa:	6803      	ldr	r3, [r0, #0]
    8eac:	9309      	str	r3, [sp, #36]	; 0x24
    8eae:	4618      	mov	r0, r3
    8eb0:	f7f7 ff81 	bl	db6 <strlen>
    8eb4:	2300      	movs	r3, #0
    8eb6:	930e      	str	r3, [sp, #56]	; 0x38
    8eb8:	f8d8 3000 	ldr.w	r3, [r8]
    8ebc:	900a      	str	r0, [sp, #40]	; 0x28
    8ebe:	3307      	adds	r3, #7
    8ec0:	f023 0307 	bic.w	r3, r3, #7
    8ec4:	f103 0208 	add.w	r2, r3, #8
    8ec8:	f894 9018 	ldrb.w	r9, [r4, #24]
    8ecc:	f8d4 b000 	ldr.w	fp, [r4]
    8ed0:	f8c8 2000 	str.w	r2, [r8]
    8ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ed8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    8edc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    8ee0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    8ee4:	930b      	str	r3, [sp, #44]	; 0x2c
    8ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8ee8:	4b9c      	ldr	r3, [pc, #624]	; (915c <_printf_float+0x2c8>)
    8eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8eee:	4640      	mov	r0, r8
    8ef0:	f7f7 fdc6 	bl	a80 <__aeabi_dcmpun>
    8ef4:	bb70      	cbnz	r0, 8f54 <_printf_float+0xc0>
    8ef6:	4b99      	ldr	r3, [pc, #612]	; (915c <_printf_float+0x2c8>)
    8ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8efe:	4640      	mov	r0, r8
    8f00:	f7f7 fda0 	bl	a44 <__aeabi_dcmple>
    8f04:	bb30      	cbnz	r0, 8f54 <_printf_float+0xc0>
    8f06:	2200      	movs	r2, #0
    8f08:	2300      	movs	r3, #0
    8f0a:	4640      	mov	r0, r8
    8f0c:	4651      	mov	r1, sl
    8f0e:	f7f7 fd8f 	bl	a30 <__aeabi_dcmplt>
    8f12:	b110      	cbz	r0, 8f1a <_printf_float+0x86>
    8f14:	232d      	movs	r3, #45	; 0x2d
    8f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    8f1a:	4b91      	ldr	r3, [pc, #580]	; (9160 <_printf_float+0x2cc>)
    8f1c:	4891      	ldr	r0, [pc, #580]	; (9164 <_printf_float+0x2d0>)
    8f1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    8f22:	bf94      	ite	ls
    8f24:	4698      	movls	r8, r3
    8f26:	4680      	movhi	r8, r0
    8f28:	2303      	movs	r3, #3
    8f2a:	6123      	str	r3, [r4, #16]
    8f2c:	f02b 0304 	bic.w	r3, fp, #4
    8f30:	6023      	str	r3, [r4, #0]
    8f32:	f04f 0a00 	mov.w	sl, #0
    8f36:	9700      	str	r7, [sp, #0]
    8f38:	4633      	mov	r3, r6
    8f3a:	aa0f      	add	r2, sp, #60	; 0x3c
    8f3c:	4621      	mov	r1, r4
    8f3e:	4628      	mov	r0, r5
    8f40:	f003 fe7c 	bl	cc3c <_printf_common>
    8f44:	3001      	adds	r0, #1
    8f46:	f040 808f 	bne.w	9068 <_printf_float+0x1d4>
    8f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f4e:	b011      	add	sp, #68	; 0x44
    8f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f54:	4642      	mov	r2, r8
    8f56:	4653      	mov	r3, sl
    8f58:	4640      	mov	r0, r8
    8f5a:	4651      	mov	r1, sl
    8f5c:	f7f7 fd90 	bl	a80 <__aeabi_dcmpun>
    8f60:	b140      	cbz	r0, 8f74 <_printf_float+0xe0>
    8f62:	f1ba 0f00 	cmp.w	sl, #0
    8f66:	bfbc      	itt	lt
    8f68:	232d      	movlt	r3, #45	; 0x2d
    8f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    8f6e:	487e      	ldr	r0, [pc, #504]	; (9168 <_printf_float+0x2d4>)
    8f70:	4b7e      	ldr	r3, [pc, #504]	; (916c <_printf_float+0x2d8>)
    8f72:	e7d4      	b.n	8f1e <_printf_float+0x8a>
    8f74:	6863      	ldr	r3, [r4, #4]
    8f76:	1c5a      	adds	r2, r3, #1
    8f78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    8f7c:	d142      	bne.n	9004 <_printf_float+0x170>
    8f7e:	2306      	movs	r3, #6
    8f80:	6063      	str	r3, [r4, #4]
    8f82:	2200      	movs	r2, #0
    8f84:	9206      	str	r2, [sp, #24]
    8f86:	aa0e      	add	r2, sp, #56	; 0x38
    8f88:	e9cd 9204 	strd	r9, r2, [sp, #16]
    8f8c:	aa0d      	add	r2, sp, #52	; 0x34
    8f8e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    8f92:	9203      	str	r2, [sp, #12]
    8f94:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    8f98:	e9cd 3201 	strd	r3, r2, [sp, #4]
    8f9c:	6023      	str	r3, [r4, #0]
    8f9e:	6863      	ldr	r3, [r4, #4]
    8fa0:	9300      	str	r3, [sp, #0]
    8fa2:	4642      	mov	r2, r8
    8fa4:	4653      	mov	r3, sl
    8fa6:	4628      	mov	r0, r5
    8fa8:	910b      	str	r1, [sp, #44]	; 0x2c
    8faa:	f003 fda9 	bl	cb00 <__cvt>
    8fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8fb0:	2947      	cmp	r1, #71	; 0x47
    8fb2:	4680      	mov	r8, r0
    8fb4:	990d      	ldr	r1, [sp, #52]	; 0x34
    8fb6:	d108      	bne.n	8fca <_printf_float+0x136>
    8fb8:	1cc8      	adds	r0, r1, #3
    8fba:	db02      	blt.n	8fc2 <_printf_float+0x12e>
    8fbc:	6863      	ldr	r3, [r4, #4]
    8fbe:	4299      	cmp	r1, r3
    8fc0:	dd40      	ble.n	9044 <_printf_float+0x1b0>
    8fc2:	f1a9 0902 	sub.w	r9, r9, #2
    8fc6:	fa5f f989 	uxtb.w	r9, r9
    8fca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    8fce:	d81f      	bhi.n	9010 <_printf_float+0x17c>
    8fd0:	3901      	subs	r1, #1
    8fd2:	464a      	mov	r2, r9
    8fd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8fd8:	910d      	str	r1, [sp, #52]	; 0x34
    8fda:	f003 fdf1 	bl	cbc0 <__exponent>
    8fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8fe0:	1813      	adds	r3, r2, r0
    8fe2:	2a01      	cmp	r2, #1
    8fe4:	4682      	mov	sl, r0
    8fe6:	6123      	str	r3, [r4, #16]
    8fe8:	dc02      	bgt.n	8ff0 <_printf_float+0x15c>
    8fea:	6822      	ldr	r2, [r4, #0]
    8fec:	07d2      	lsls	r2, r2, #31
    8fee:	d501      	bpl.n	8ff4 <_printf_float+0x160>
    8ff0:	3301      	adds	r3, #1
    8ff2:	6123      	str	r3, [r4, #16]
    8ff4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d09c      	beq.n	8f36 <_printf_float+0xa2>
    8ffc:	232d      	movs	r3, #45	; 0x2d
    8ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9002:	e798      	b.n	8f36 <_printf_float+0xa2>
    9004:	2947      	cmp	r1, #71	; 0x47
    9006:	d1bc      	bne.n	8f82 <_printf_float+0xee>
    9008:	2b00      	cmp	r3, #0
    900a:	d1ba      	bne.n	8f82 <_printf_float+0xee>
    900c:	2301      	movs	r3, #1
    900e:	e7b7      	b.n	8f80 <_printf_float+0xec>
    9010:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    9014:	d118      	bne.n	9048 <_printf_float+0x1b4>
    9016:	2900      	cmp	r1, #0
    9018:	6863      	ldr	r3, [r4, #4]
    901a:	dd0b      	ble.n	9034 <_printf_float+0x1a0>
    901c:	6121      	str	r1, [r4, #16]
    901e:	b913      	cbnz	r3, 9026 <_printf_float+0x192>
    9020:	6822      	ldr	r2, [r4, #0]
    9022:	07d0      	lsls	r0, r2, #31
    9024:	d502      	bpl.n	902c <_printf_float+0x198>
    9026:	3301      	adds	r3, #1
    9028:	440b      	add	r3, r1
    902a:	6123      	str	r3, [r4, #16]
    902c:	65a1      	str	r1, [r4, #88]	; 0x58
    902e:	f04f 0a00 	mov.w	sl, #0
    9032:	e7df      	b.n	8ff4 <_printf_float+0x160>
    9034:	b913      	cbnz	r3, 903c <_printf_float+0x1a8>
    9036:	6822      	ldr	r2, [r4, #0]
    9038:	07d2      	lsls	r2, r2, #31
    903a:	d501      	bpl.n	9040 <_printf_float+0x1ac>
    903c:	3302      	adds	r3, #2
    903e:	e7f4      	b.n	902a <_printf_float+0x196>
    9040:	2301      	movs	r3, #1
    9042:	e7f2      	b.n	902a <_printf_float+0x196>
    9044:	f04f 0967 	mov.w	r9, #103	; 0x67
    9048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    904a:	4299      	cmp	r1, r3
    904c:	db05      	blt.n	905a <_printf_float+0x1c6>
    904e:	6823      	ldr	r3, [r4, #0]
    9050:	6121      	str	r1, [r4, #16]
    9052:	07d8      	lsls	r0, r3, #31
    9054:	d5ea      	bpl.n	902c <_printf_float+0x198>
    9056:	1c4b      	adds	r3, r1, #1
    9058:	e7e7      	b.n	902a <_printf_float+0x196>
    905a:	2900      	cmp	r1, #0
    905c:	bfd4      	ite	le
    905e:	f1c1 0202 	rsble	r2, r1, #2
    9062:	2201      	movgt	r2, #1
    9064:	4413      	add	r3, r2
    9066:	e7e0      	b.n	902a <_printf_float+0x196>
    9068:	6823      	ldr	r3, [r4, #0]
    906a:	055a      	lsls	r2, r3, #21
    906c:	d407      	bmi.n	907e <_printf_float+0x1ea>
    906e:	6923      	ldr	r3, [r4, #16]
    9070:	4642      	mov	r2, r8
    9072:	4631      	mov	r1, r6
    9074:	4628      	mov	r0, r5
    9076:	47b8      	blx	r7
    9078:	3001      	adds	r0, #1
    907a:	d12b      	bne.n	90d4 <_printf_float+0x240>
    907c:	e765      	b.n	8f4a <_printf_float+0xb6>
    907e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    9082:	f240 80dc 	bls.w	923e <_printf_float+0x3aa>
    9086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    908a:	2200      	movs	r2, #0
    908c:	2300      	movs	r3, #0
    908e:	f7f7 fcc5 	bl	a1c <__aeabi_dcmpeq>
    9092:	2800      	cmp	r0, #0
    9094:	d033      	beq.n	90fe <_printf_float+0x26a>
    9096:	4a36      	ldr	r2, [pc, #216]	; (9170 <_printf_float+0x2dc>)
    9098:	2301      	movs	r3, #1
    909a:	4631      	mov	r1, r6
    909c:	4628      	mov	r0, r5
    909e:	47b8      	blx	r7
    90a0:	3001      	adds	r0, #1
    90a2:	f43f af52 	beq.w	8f4a <_printf_float+0xb6>
    90a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    90aa:	429a      	cmp	r2, r3
    90ac:	db02      	blt.n	90b4 <_printf_float+0x220>
    90ae:	6823      	ldr	r3, [r4, #0]
    90b0:	07d8      	lsls	r0, r3, #31
    90b2:	d50f      	bpl.n	90d4 <_printf_float+0x240>
    90b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    90b8:	4631      	mov	r1, r6
    90ba:	4628      	mov	r0, r5
    90bc:	47b8      	blx	r7
    90be:	3001      	adds	r0, #1
    90c0:	f43f af43 	beq.w	8f4a <_printf_float+0xb6>
    90c4:	f04f 0800 	mov.w	r8, #0
    90c8:	f104 091a 	add.w	r9, r4, #26
    90cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    90ce:	3b01      	subs	r3, #1
    90d0:	4543      	cmp	r3, r8
    90d2:	dc09      	bgt.n	90e8 <_printf_float+0x254>
    90d4:	6823      	ldr	r3, [r4, #0]
    90d6:	079b      	lsls	r3, r3, #30
    90d8:	f100 8101 	bmi.w	92de <_printf_float+0x44a>
    90dc:	68e0      	ldr	r0, [r4, #12]
    90de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    90e0:	4298      	cmp	r0, r3
    90e2:	bfb8      	it	lt
    90e4:	4618      	movlt	r0, r3
    90e6:	e732      	b.n	8f4e <_printf_float+0xba>
    90e8:	2301      	movs	r3, #1
    90ea:	464a      	mov	r2, r9
    90ec:	4631      	mov	r1, r6
    90ee:	4628      	mov	r0, r5
    90f0:	47b8      	blx	r7
    90f2:	3001      	adds	r0, #1
    90f4:	f43f af29 	beq.w	8f4a <_printf_float+0xb6>
    90f8:	f108 0801 	add.w	r8, r8, #1
    90fc:	e7e6      	b.n	90cc <_printf_float+0x238>
    90fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9100:	2b00      	cmp	r3, #0
    9102:	dc37      	bgt.n	9174 <_printf_float+0x2e0>
    9104:	4a1a      	ldr	r2, [pc, #104]	; (9170 <_printf_float+0x2dc>)
    9106:	2301      	movs	r3, #1
    9108:	4631      	mov	r1, r6
    910a:	4628      	mov	r0, r5
    910c:	47b8      	blx	r7
    910e:	3001      	adds	r0, #1
    9110:	f43f af1b 	beq.w	8f4a <_printf_float+0xb6>
    9114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    9118:	4313      	orrs	r3, r2
    911a:	d102      	bne.n	9122 <_printf_float+0x28e>
    911c:	6823      	ldr	r3, [r4, #0]
    911e:	07d9      	lsls	r1, r3, #31
    9120:	d5d8      	bpl.n	90d4 <_printf_float+0x240>
    9122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    9126:	4631      	mov	r1, r6
    9128:	4628      	mov	r0, r5
    912a:	47b8      	blx	r7
    912c:	3001      	adds	r0, #1
    912e:	f43f af0c 	beq.w	8f4a <_printf_float+0xb6>
    9132:	f04f 0900 	mov.w	r9, #0
    9136:	f104 0a1a 	add.w	sl, r4, #26
    913a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    913c:	425b      	negs	r3, r3
    913e:	454b      	cmp	r3, r9
    9140:	dc01      	bgt.n	9146 <_printf_float+0x2b2>
    9142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9144:	e794      	b.n	9070 <_printf_float+0x1dc>
    9146:	2301      	movs	r3, #1
    9148:	4652      	mov	r2, sl
    914a:	4631      	mov	r1, r6
    914c:	4628      	mov	r0, r5
    914e:	47b8      	blx	r7
    9150:	3001      	adds	r0, #1
    9152:	f43f aefa 	beq.w	8f4a <_printf_float+0xb6>
    9156:	f109 0901 	add.w	r9, r9, #1
    915a:	e7ee      	b.n	913a <_printf_float+0x2a6>
    915c:	7fefffff 	.word	0x7fefffff
    9160:	0000eefb 	.word	0x0000eefb
    9164:	0000eeff 	.word	0x0000eeff
    9168:	0000ef07 	.word	0x0000ef07
    916c:	0000ef03 	.word	0x0000ef03
    9170:	0000ed39 	.word	0x0000ed39
    9174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9176:	6da3      	ldr	r3, [r4, #88]	; 0x58
    9178:	429a      	cmp	r2, r3
    917a:	bfa8      	it	ge
    917c:	461a      	movge	r2, r3
    917e:	2a00      	cmp	r2, #0
    9180:	4691      	mov	r9, r2
    9182:	dc37      	bgt.n	91f4 <_printf_float+0x360>
    9184:	f04f 0b00 	mov.w	fp, #0
    9188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    918c:	f104 021a 	add.w	r2, r4, #26
    9190:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    9194:	ebaa 0309 	sub.w	r3, sl, r9
    9198:	455b      	cmp	r3, fp
    919a:	dc33      	bgt.n	9204 <_printf_float+0x370>
    919c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    91a0:	429a      	cmp	r2, r3
    91a2:	db3b      	blt.n	921c <_printf_float+0x388>
    91a4:	6823      	ldr	r3, [r4, #0]
    91a6:	07da      	lsls	r2, r3, #31
    91a8:	d438      	bmi.n	921c <_printf_float+0x388>
    91aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    91ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    91ae:	eba3 020a 	sub.w	r2, r3, sl
    91b2:	eba3 0901 	sub.w	r9, r3, r1
    91b6:	4591      	cmp	r9, r2
    91b8:	bfa8      	it	ge
    91ba:	4691      	movge	r9, r2
    91bc:	f1b9 0f00 	cmp.w	r9, #0
    91c0:	dc34      	bgt.n	922c <_printf_float+0x398>
    91c2:	f04f 0800 	mov.w	r8, #0
    91c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    91ca:	f104 0a1a 	add.w	sl, r4, #26
    91ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    91d2:	1a9b      	subs	r3, r3, r2
    91d4:	eba3 0309 	sub.w	r3, r3, r9
    91d8:	4543      	cmp	r3, r8
    91da:	f77f af7b 	ble.w	90d4 <_printf_float+0x240>
    91de:	2301      	movs	r3, #1
    91e0:	4652      	mov	r2, sl
    91e2:	4631      	mov	r1, r6
    91e4:	4628      	mov	r0, r5
    91e6:	47b8      	blx	r7
    91e8:	3001      	adds	r0, #1
    91ea:	f43f aeae 	beq.w	8f4a <_printf_float+0xb6>
    91ee:	f108 0801 	add.w	r8, r8, #1
    91f2:	e7ec      	b.n	91ce <_printf_float+0x33a>
    91f4:	4613      	mov	r3, r2
    91f6:	4631      	mov	r1, r6
    91f8:	4642      	mov	r2, r8
    91fa:	4628      	mov	r0, r5
    91fc:	47b8      	blx	r7
    91fe:	3001      	adds	r0, #1
    9200:	d1c0      	bne.n	9184 <_printf_float+0x2f0>
    9202:	e6a2      	b.n	8f4a <_printf_float+0xb6>
    9204:	2301      	movs	r3, #1
    9206:	4631      	mov	r1, r6
    9208:	4628      	mov	r0, r5
    920a:	920b      	str	r2, [sp, #44]	; 0x2c
    920c:	47b8      	blx	r7
    920e:	3001      	adds	r0, #1
    9210:	f43f ae9b 	beq.w	8f4a <_printf_float+0xb6>
    9214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9216:	f10b 0b01 	add.w	fp, fp, #1
    921a:	e7b9      	b.n	9190 <_printf_float+0x2fc>
    921c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    9220:	4631      	mov	r1, r6
    9222:	4628      	mov	r0, r5
    9224:	47b8      	blx	r7
    9226:	3001      	adds	r0, #1
    9228:	d1bf      	bne.n	91aa <_printf_float+0x316>
    922a:	e68e      	b.n	8f4a <_printf_float+0xb6>
    922c:	464b      	mov	r3, r9
    922e:	eb08 020a 	add.w	r2, r8, sl
    9232:	4631      	mov	r1, r6
    9234:	4628      	mov	r0, r5
    9236:	47b8      	blx	r7
    9238:	3001      	adds	r0, #1
    923a:	d1c2      	bne.n	91c2 <_printf_float+0x32e>
    923c:	e685      	b.n	8f4a <_printf_float+0xb6>
    923e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9240:	2a01      	cmp	r2, #1
    9242:	dc01      	bgt.n	9248 <_printf_float+0x3b4>
    9244:	07db      	lsls	r3, r3, #31
    9246:	d537      	bpl.n	92b8 <_printf_float+0x424>
    9248:	2301      	movs	r3, #1
    924a:	4642      	mov	r2, r8
    924c:	4631      	mov	r1, r6
    924e:	4628      	mov	r0, r5
    9250:	47b8      	blx	r7
    9252:	3001      	adds	r0, #1
    9254:	f43f ae79 	beq.w	8f4a <_printf_float+0xb6>
    9258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    925c:	4631      	mov	r1, r6
    925e:	4628      	mov	r0, r5
    9260:	47b8      	blx	r7
    9262:	3001      	adds	r0, #1
    9264:	f43f ae71 	beq.w	8f4a <_printf_float+0xb6>
    9268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    926c:	2200      	movs	r2, #0
    926e:	2300      	movs	r3, #0
    9270:	f7f7 fbd4 	bl	a1c <__aeabi_dcmpeq>
    9274:	b9d8      	cbnz	r0, 92ae <_printf_float+0x41a>
    9276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9278:	f108 0201 	add.w	r2, r8, #1
    927c:	3b01      	subs	r3, #1
    927e:	4631      	mov	r1, r6
    9280:	4628      	mov	r0, r5
    9282:	47b8      	blx	r7
    9284:	3001      	adds	r0, #1
    9286:	d10e      	bne.n	92a6 <_printf_float+0x412>
    9288:	e65f      	b.n	8f4a <_printf_float+0xb6>
    928a:	2301      	movs	r3, #1
    928c:	464a      	mov	r2, r9
    928e:	4631      	mov	r1, r6
    9290:	4628      	mov	r0, r5
    9292:	47b8      	blx	r7
    9294:	3001      	adds	r0, #1
    9296:	f43f ae58 	beq.w	8f4a <_printf_float+0xb6>
    929a:	f108 0801 	add.w	r8, r8, #1
    929e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    92a0:	3b01      	subs	r3, #1
    92a2:	4543      	cmp	r3, r8
    92a4:	dcf1      	bgt.n	928a <_printf_float+0x3f6>
    92a6:	4653      	mov	r3, sl
    92a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
    92ac:	e6e1      	b.n	9072 <_printf_float+0x1de>
    92ae:	f04f 0800 	mov.w	r8, #0
    92b2:	f104 091a 	add.w	r9, r4, #26
    92b6:	e7f2      	b.n	929e <_printf_float+0x40a>
    92b8:	2301      	movs	r3, #1
    92ba:	4642      	mov	r2, r8
    92bc:	e7df      	b.n	927e <_printf_float+0x3ea>
    92be:	2301      	movs	r3, #1
    92c0:	464a      	mov	r2, r9
    92c2:	4631      	mov	r1, r6
    92c4:	4628      	mov	r0, r5
    92c6:	47b8      	blx	r7
    92c8:	3001      	adds	r0, #1
    92ca:	f43f ae3e 	beq.w	8f4a <_printf_float+0xb6>
    92ce:	f108 0801 	add.w	r8, r8, #1
    92d2:	68e3      	ldr	r3, [r4, #12]
    92d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    92d6:	1a5b      	subs	r3, r3, r1
    92d8:	4543      	cmp	r3, r8
    92da:	dcf0      	bgt.n	92be <_printf_float+0x42a>
    92dc:	e6fe      	b.n	90dc <_printf_float+0x248>
    92de:	f04f 0800 	mov.w	r8, #0
    92e2:	f104 0919 	add.w	r9, r4, #25
    92e6:	e7f4      	b.n	92d2 <_printf_float+0x43e>

000092e8 <_printf_i>:
    92e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    92ec:	7e0f      	ldrb	r7, [r1, #24]
    92ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    92f0:	2f78      	cmp	r7, #120	; 0x78
    92f2:	4691      	mov	r9, r2
    92f4:	4680      	mov	r8, r0
    92f6:	460c      	mov	r4, r1
    92f8:	469a      	mov	sl, r3
    92fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
    92fe:	d807      	bhi.n	9310 <_printf_i+0x28>
    9300:	2f62      	cmp	r7, #98	; 0x62
    9302:	d80a      	bhi.n	931a <_printf_i+0x32>
    9304:	2f00      	cmp	r7, #0
    9306:	f000 80d8 	beq.w	94ba <_printf_i+0x1d2>
    930a:	2f58      	cmp	r7, #88	; 0x58
    930c:	f000 80a3 	beq.w	9456 <_printf_i+0x16e>
    9310:	f104 0542 	add.w	r5, r4, #66	; 0x42
    9314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    9318:	e03a      	b.n	9390 <_printf_i+0xa8>
    931a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    931e:	2b15      	cmp	r3, #21
    9320:	d8f6      	bhi.n	9310 <_printf_i+0x28>
    9322:	a101      	add	r1, pc, #4	; (adr r1, 9328 <_printf_i+0x40>)
    9324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    9328:	00009381 	.word	0x00009381
    932c:	00009395 	.word	0x00009395
    9330:	00009311 	.word	0x00009311
    9334:	00009311 	.word	0x00009311
    9338:	00009311 	.word	0x00009311
    933c:	00009311 	.word	0x00009311
    9340:	00009395 	.word	0x00009395
    9344:	00009311 	.word	0x00009311
    9348:	00009311 	.word	0x00009311
    934c:	00009311 	.word	0x00009311
    9350:	00009311 	.word	0x00009311
    9354:	000094a1 	.word	0x000094a1
    9358:	000093c5 	.word	0x000093c5
    935c:	00009483 	.word	0x00009483
    9360:	00009311 	.word	0x00009311
    9364:	00009311 	.word	0x00009311
    9368:	000094c3 	.word	0x000094c3
    936c:	00009311 	.word	0x00009311
    9370:	000093c5 	.word	0x000093c5
    9374:	00009311 	.word	0x00009311
    9378:	00009311 	.word	0x00009311
    937c:	0000948b 	.word	0x0000948b
    9380:	682b      	ldr	r3, [r5, #0]
    9382:	1d1a      	adds	r2, r3, #4
    9384:	681b      	ldr	r3, [r3, #0]
    9386:	602a      	str	r2, [r5, #0]
    9388:	f104 0542 	add.w	r5, r4, #66	; 0x42
    938c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    9390:	2301      	movs	r3, #1
    9392:	e0a3      	b.n	94dc <_printf_i+0x1f4>
    9394:	6820      	ldr	r0, [r4, #0]
    9396:	6829      	ldr	r1, [r5, #0]
    9398:	0606      	lsls	r6, r0, #24
    939a:	f101 0304 	add.w	r3, r1, #4
    939e:	d50a      	bpl.n	93b6 <_printf_i+0xce>
    93a0:	680e      	ldr	r6, [r1, #0]
    93a2:	602b      	str	r3, [r5, #0]
    93a4:	2e00      	cmp	r6, #0
    93a6:	da03      	bge.n	93b0 <_printf_i+0xc8>
    93a8:	232d      	movs	r3, #45	; 0x2d
    93aa:	4276      	negs	r6, r6
    93ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    93b0:	485e      	ldr	r0, [pc, #376]	; (952c <_printf_i+0x244>)
    93b2:	230a      	movs	r3, #10
    93b4:	e019      	b.n	93ea <_printf_i+0x102>
    93b6:	680e      	ldr	r6, [r1, #0]
    93b8:	602b      	str	r3, [r5, #0]
    93ba:	f010 0f40 	tst.w	r0, #64	; 0x40
    93be:	bf18      	it	ne
    93c0:	b236      	sxthne	r6, r6
    93c2:	e7ef      	b.n	93a4 <_printf_i+0xbc>
    93c4:	682b      	ldr	r3, [r5, #0]
    93c6:	6820      	ldr	r0, [r4, #0]
    93c8:	1d19      	adds	r1, r3, #4
    93ca:	6029      	str	r1, [r5, #0]
    93cc:	0601      	lsls	r1, r0, #24
    93ce:	d501      	bpl.n	93d4 <_printf_i+0xec>
    93d0:	681e      	ldr	r6, [r3, #0]
    93d2:	e002      	b.n	93da <_printf_i+0xf2>
    93d4:	0646      	lsls	r6, r0, #25
    93d6:	d5fb      	bpl.n	93d0 <_printf_i+0xe8>
    93d8:	881e      	ldrh	r6, [r3, #0]
    93da:	4854      	ldr	r0, [pc, #336]	; (952c <_printf_i+0x244>)
    93dc:	2f6f      	cmp	r7, #111	; 0x6f
    93de:	bf0c      	ite	eq
    93e0:	2308      	moveq	r3, #8
    93e2:	230a      	movne	r3, #10
    93e4:	2100      	movs	r1, #0
    93e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    93ea:	6865      	ldr	r5, [r4, #4]
    93ec:	60a5      	str	r5, [r4, #8]
    93ee:	2d00      	cmp	r5, #0
    93f0:	bfa2      	ittt	ge
    93f2:	6821      	ldrge	r1, [r4, #0]
    93f4:	f021 0104 	bicge.w	r1, r1, #4
    93f8:	6021      	strge	r1, [r4, #0]
    93fa:	b90e      	cbnz	r6, 9400 <_printf_i+0x118>
    93fc:	2d00      	cmp	r5, #0
    93fe:	d04d      	beq.n	949c <_printf_i+0x1b4>
    9400:	4615      	mov	r5, r2
    9402:	fbb6 f1f3 	udiv	r1, r6, r3
    9406:	fb03 6711 	mls	r7, r3, r1, r6
    940a:	5dc7      	ldrb	r7, [r0, r7]
    940c:	f805 7d01 	strb.w	r7, [r5, #-1]!
    9410:	4637      	mov	r7, r6
    9412:	42bb      	cmp	r3, r7
    9414:	460e      	mov	r6, r1
    9416:	d9f4      	bls.n	9402 <_printf_i+0x11a>
    9418:	2b08      	cmp	r3, #8
    941a:	d10b      	bne.n	9434 <_printf_i+0x14c>
    941c:	6823      	ldr	r3, [r4, #0]
    941e:	07de      	lsls	r6, r3, #31
    9420:	d508      	bpl.n	9434 <_printf_i+0x14c>
    9422:	6923      	ldr	r3, [r4, #16]
    9424:	6861      	ldr	r1, [r4, #4]
    9426:	4299      	cmp	r1, r3
    9428:	bfde      	ittt	le
    942a:	2330      	movle	r3, #48	; 0x30
    942c:	f805 3c01 	strble.w	r3, [r5, #-1]
    9430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    9434:	1b52      	subs	r2, r2, r5
    9436:	6122      	str	r2, [r4, #16]
    9438:	f8cd a000 	str.w	sl, [sp]
    943c:	464b      	mov	r3, r9
    943e:	aa03      	add	r2, sp, #12
    9440:	4621      	mov	r1, r4
    9442:	4640      	mov	r0, r8
    9444:	f003 fbfa 	bl	cc3c <_printf_common>
    9448:	3001      	adds	r0, #1
    944a:	d14c      	bne.n	94e6 <_printf_i+0x1fe>
    944c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9450:	b004      	add	sp, #16
    9452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9456:	4835      	ldr	r0, [pc, #212]	; (952c <_printf_i+0x244>)
    9458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    945c:	6829      	ldr	r1, [r5, #0]
    945e:	6823      	ldr	r3, [r4, #0]
    9460:	f851 6b04 	ldr.w	r6, [r1], #4
    9464:	6029      	str	r1, [r5, #0]
    9466:	061d      	lsls	r5, r3, #24
    9468:	d514      	bpl.n	9494 <_printf_i+0x1ac>
    946a:	07df      	lsls	r7, r3, #31
    946c:	bf44      	itt	mi
    946e:	f043 0320 	orrmi.w	r3, r3, #32
    9472:	6023      	strmi	r3, [r4, #0]
    9474:	b91e      	cbnz	r6, 947e <_printf_i+0x196>
    9476:	6823      	ldr	r3, [r4, #0]
    9478:	f023 0320 	bic.w	r3, r3, #32
    947c:	6023      	str	r3, [r4, #0]
    947e:	2310      	movs	r3, #16
    9480:	e7b0      	b.n	93e4 <_printf_i+0xfc>
    9482:	6823      	ldr	r3, [r4, #0]
    9484:	f043 0320 	orr.w	r3, r3, #32
    9488:	6023      	str	r3, [r4, #0]
    948a:	2378      	movs	r3, #120	; 0x78
    948c:	4828      	ldr	r0, [pc, #160]	; (9530 <_printf_i+0x248>)
    948e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    9492:	e7e3      	b.n	945c <_printf_i+0x174>
    9494:	0659      	lsls	r1, r3, #25
    9496:	bf48      	it	mi
    9498:	b2b6      	uxthmi	r6, r6
    949a:	e7e6      	b.n	946a <_printf_i+0x182>
    949c:	4615      	mov	r5, r2
    949e:	e7bb      	b.n	9418 <_printf_i+0x130>
    94a0:	682b      	ldr	r3, [r5, #0]
    94a2:	6826      	ldr	r6, [r4, #0]
    94a4:	6961      	ldr	r1, [r4, #20]
    94a6:	1d18      	adds	r0, r3, #4
    94a8:	6028      	str	r0, [r5, #0]
    94aa:	0635      	lsls	r5, r6, #24
    94ac:	681b      	ldr	r3, [r3, #0]
    94ae:	d501      	bpl.n	94b4 <_printf_i+0x1cc>
    94b0:	6019      	str	r1, [r3, #0]
    94b2:	e002      	b.n	94ba <_printf_i+0x1d2>
    94b4:	0670      	lsls	r0, r6, #25
    94b6:	d5fb      	bpl.n	94b0 <_printf_i+0x1c8>
    94b8:	8019      	strh	r1, [r3, #0]
    94ba:	2300      	movs	r3, #0
    94bc:	6123      	str	r3, [r4, #16]
    94be:	4615      	mov	r5, r2
    94c0:	e7ba      	b.n	9438 <_printf_i+0x150>
    94c2:	682b      	ldr	r3, [r5, #0]
    94c4:	1d1a      	adds	r2, r3, #4
    94c6:	602a      	str	r2, [r5, #0]
    94c8:	681d      	ldr	r5, [r3, #0]
    94ca:	6862      	ldr	r2, [r4, #4]
    94cc:	2100      	movs	r1, #0
    94ce:	4628      	mov	r0, r5
    94d0:	f7f6 fe16 	bl	100 <memchr>
    94d4:	b108      	cbz	r0, 94da <_printf_i+0x1f2>
    94d6:	1b40      	subs	r0, r0, r5
    94d8:	6060      	str	r0, [r4, #4]
    94da:	6863      	ldr	r3, [r4, #4]
    94dc:	6123      	str	r3, [r4, #16]
    94de:	2300      	movs	r3, #0
    94e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    94e4:	e7a8      	b.n	9438 <_printf_i+0x150>
    94e6:	6923      	ldr	r3, [r4, #16]
    94e8:	462a      	mov	r2, r5
    94ea:	4649      	mov	r1, r9
    94ec:	4640      	mov	r0, r8
    94ee:	47d0      	blx	sl
    94f0:	3001      	adds	r0, #1
    94f2:	d0ab      	beq.n	944c <_printf_i+0x164>
    94f4:	6823      	ldr	r3, [r4, #0]
    94f6:	079b      	lsls	r3, r3, #30
    94f8:	d413      	bmi.n	9522 <_printf_i+0x23a>
    94fa:	68e0      	ldr	r0, [r4, #12]
    94fc:	9b03      	ldr	r3, [sp, #12]
    94fe:	4298      	cmp	r0, r3
    9500:	bfb8      	it	lt
    9502:	4618      	movlt	r0, r3
    9504:	e7a4      	b.n	9450 <_printf_i+0x168>
    9506:	2301      	movs	r3, #1
    9508:	4632      	mov	r2, r6
    950a:	4649      	mov	r1, r9
    950c:	4640      	mov	r0, r8
    950e:	47d0      	blx	sl
    9510:	3001      	adds	r0, #1
    9512:	d09b      	beq.n	944c <_printf_i+0x164>
    9514:	3501      	adds	r5, #1
    9516:	68e3      	ldr	r3, [r4, #12]
    9518:	9903      	ldr	r1, [sp, #12]
    951a:	1a5b      	subs	r3, r3, r1
    951c:	42ab      	cmp	r3, r5
    951e:	dcf2      	bgt.n	9506 <_printf_i+0x21e>
    9520:	e7eb      	b.n	94fa <_printf_i+0x212>
    9522:	2500      	movs	r5, #0
    9524:	f104 0619 	add.w	r6, r4, #25
    9528:	e7f5      	b.n	9516 <_printf_i+0x22e>
    952a:	bf00      	nop
    952c:	0000ef0b 	.word	0x0000ef0b
    9530:	0000ef1c 	.word	0x0000ef1c

00009534 <_sbrk_r>:
    9534:	b538      	push	{r3, r4, r5, lr}
    9536:	4d06      	ldr	r5, [pc, #24]	; (9550 <_sbrk_r+0x1c>)
    9538:	2300      	movs	r3, #0
    953a:	4604      	mov	r4, r0
    953c:	4608      	mov	r0, r1
    953e:	602b      	str	r3, [r5, #0]
    9540:	f7fc f806 	bl	5550 <_sbrk>
    9544:	1c43      	adds	r3, r0, #1
    9546:	d102      	bne.n	954e <_sbrk_r+0x1a>
    9548:	682b      	ldr	r3, [r5, #0]
    954a:	b103      	cbz	r3, 954e <_sbrk_r+0x1a>
    954c:	6023      	str	r3, [r4, #0]
    954e:	bd38      	pop	{r3, r4, r5, pc}
    9550:	20000be0 	.word	0x20000be0

00009554 <sniprintf>:
    9554:	b40c      	push	{r2, r3}
    9556:	b530      	push	{r4, r5, lr}
    9558:	4b17      	ldr	r3, [pc, #92]	; (95b8 <sniprintf+0x64>)
    955a:	1e0c      	subs	r4, r1, #0
    955c:	681d      	ldr	r5, [r3, #0]
    955e:	b09d      	sub	sp, #116	; 0x74
    9560:	da08      	bge.n	9574 <sniprintf+0x20>
    9562:	238b      	movs	r3, #139	; 0x8b
    9564:	602b      	str	r3, [r5, #0]
    9566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    956a:	b01d      	add	sp, #116	; 0x74
    956c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    9570:	b002      	add	sp, #8
    9572:	4770      	bx	lr
    9574:	f44f 7302 	mov.w	r3, #520	; 0x208
    9578:	f8ad 3014 	strh.w	r3, [sp, #20]
    957c:	bf14      	ite	ne
    957e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    9582:	4623      	moveq	r3, r4
    9584:	9304      	str	r3, [sp, #16]
    9586:	9307      	str	r3, [sp, #28]
    9588:	f64f 73ff 	movw	r3, #65535	; 0xffff
    958c:	9002      	str	r0, [sp, #8]
    958e:	9006      	str	r0, [sp, #24]
    9590:	f8ad 3016 	strh.w	r3, [sp, #22]
    9594:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9596:	ab21      	add	r3, sp, #132	; 0x84
    9598:	a902      	add	r1, sp, #8
    959a:	4628      	mov	r0, r5
    959c:	9301      	str	r3, [sp, #4]
    959e:	f000 fc33 	bl	9e08 <_svfiprintf_r>
    95a2:	1c43      	adds	r3, r0, #1
    95a4:	bfbc      	itt	lt
    95a6:	238b      	movlt	r3, #139	; 0x8b
    95a8:	602b      	strlt	r3, [r5, #0]
    95aa:	2c00      	cmp	r4, #0
    95ac:	d0dd      	beq.n	956a <sniprintf+0x16>
    95ae:	9b02      	ldr	r3, [sp, #8]
    95b0:	2200      	movs	r2, #0
    95b2:	701a      	strb	r2, [r3, #0]
    95b4:	e7d9      	b.n	956a <sniprintf+0x16>
    95b6:	bf00      	nop
    95b8:	20000178 	.word	0x20000178

000095bc <_strtol_l.constprop.0>:
    95bc:	2b01      	cmp	r3, #1
    95be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95c2:	4680      	mov	r8, r0
    95c4:	d001      	beq.n	95ca <_strtol_l.constprop.0+0xe>
    95c6:	2b24      	cmp	r3, #36	; 0x24
    95c8:	d906      	bls.n	95d8 <_strtol_l.constprop.0+0x1c>
    95ca:	f002 fb24 	bl	bc16 <__errno>
    95ce:	2316      	movs	r3, #22
    95d0:	6003      	str	r3, [r0, #0]
    95d2:	2000      	movs	r0, #0
    95d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95d8:	4f35      	ldr	r7, [pc, #212]	; (96b0 <_strtol_l.constprop.0+0xf4>)
    95da:	460d      	mov	r5, r1
    95dc:	4628      	mov	r0, r5
    95de:	f815 4b01 	ldrb.w	r4, [r5], #1
    95e2:	5de6      	ldrb	r6, [r4, r7]
    95e4:	f016 0608 	ands.w	r6, r6, #8
    95e8:	d1f8      	bne.n	95dc <_strtol_l.constprop.0+0x20>
    95ea:	2c2d      	cmp	r4, #45	; 0x2d
    95ec:	d12f      	bne.n	964e <_strtol_l.constprop.0+0x92>
    95ee:	782c      	ldrb	r4, [r5, #0]
    95f0:	2601      	movs	r6, #1
    95f2:	1c85      	adds	r5, r0, #2
    95f4:	2b00      	cmp	r3, #0
    95f6:	d057      	beq.n	96a8 <_strtol_l.constprop.0+0xec>
    95f8:	2b10      	cmp	r3, #16
    95fa:	d109      	bne.n	9610 <_strtol_l.constprop.0+0x54>
    95fc:	2c30      	cmp	r4, #48	; 0x30
    95fe:	d107      	bne.n	9610 <_strtol_l.constprop.0+0x54>
    9600:	7828      	ldrb	r0, [r5, #0]
    9602:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    9606:	2858      	cmp	r0, #88	; 0x58
    9608:	d149      	bne.n	969e <_strtol_l.constprop.0+0xe2>
    960a:	786c      	ldrb	r4, [r5, #1]
    960c:	2310      	movs	r3, #16
    960e:	3502      	adds	r5, #2
    9610:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
    9614:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    9618:	2700      	movs	r7, #0
    961a:	fbbe f9f3 	udiv	r9, lr, r3
    961e:	4638      	mov	r0, r7
    9620:	fb03 ea19 	mls	sl, r3, r9, lr
    9624:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    9628:	f1bc 0f09 	cmp.w	ip, #9
    962c:	d814      	bhi.n	9658 <_strtol_l.constprop.0+0x9c>
    962e:	4664      	mov	r4, ip
    9630:	42a3      	cmp	r3, r4
    9632:	dd22      	ble.n	967a <_strtol_l.constprop.0+0xbe>
    9634:	2f00      	cmp	r7, #0
    9636:	db1d      	blt.n	9674 <_strtol_l.constprop.0+0xb8>
    9638:	4581      	cmp	r9, r0
    963a:	d31b      	bcc.n	9674 <_strtol_l.constprop.0+0xb8>
    963c:	d101      	bne.n	9642 <_strtol_l.constprop.0+0x86>
    963e:	45a2      	cmp	sl, r4
    9640:	db18      	blt.n	9674 <_strtol_l.constprop.0+0xb8>
    9642:	fb00 4003 	mla	r0, r0, r3, r4
    9646:	2701      	movs	r7, #1
    9648:	f815 4b01 	ldrb.w	r4, [r5], #1
    964c:	e7ea      	b.n	9624 <_strtol_l.constprop.0+0x68>
    964e:	2c2b      	cmp	r4, #43	; 0x2b
    9650:	bf04      	itt	eq
    9652:	782c      	ldrbeq	r4, [r5, #0]
    9654:	1c85      	addeq	r5, r0, #2
    9656:	e7cd      	b.n	95f4 <_strtol_l.constprop.0+0x38>
    9658:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    965c:	f1bc 0f19 	cmp.w	ip, #25
    9660:	d801      	bhi.n	9666 <_strtol_l.constprop.0+0xaa>
    9662:	3c37      	subs	r4, #55	; 0x37
    9664:	e7e4      	b.n	9630 <_strtol_l.constprop.0+0x74>
    9666:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    966a:	f1bc 0f19 	cmp.w	ip, #25
    966e:	d804      	bhi.n	967a <_strtol_l.constprop.0+0xbe>
    9670:	3c57      	subs	r4, #87	; 0x57
    9672:	e7dd      	b.n	9630 <_strtol_l.constprop.0+0x74>
    9674:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9678:	e7e6      	b.n	9648 <_strtol_l.constprop.0+0x8c>
    967a:	2f00      	cmp	r7, #0
    967c:	da07      	bge.n	968e <_strtol_l.constprop.0+0xd2>
    967e:	2322      	movs	r3, #34	; 0x22
    9680:	f8c8 3000 	str.w	r3, [r8]
    9684:	4670      	mov	r0, lr
    9686:	2a00      	cmp	r2, #0
    9688:	d0a4      	beq.n	95d4 <_strtol_l.constprop.0+0x18>
    968a:	1e69      	subs	r1, r5, #1
    968c:	e005      	b.n	969a <_strtol_l.constprop.0+0xde>
    968e:	b106      	cbz	r6, 9692 <_strtol_l.constprop.0+0xd6>
    9690:	4240      	negs	r0, r0
    9692:	2a00      	cmp	r2, #0
    9694:	d09e      	beq.n	95d4 <_strtol_l.constprop.0+0x18>
    9696:	2f00      	cmp	r7, #0
    9698:	d1f7      	bne.n	968a <_strtol_l.constprop.0+0xce>
    969a:	6011      	str	r1, [r2, #0]
    969c:	e79a      	b.n	95d4 <_strtol_l.constprop.0+0x18>
    969e:	2430      	movs	r4, #48	; 0x30
    96a0:	2b00      	cmp	r3, #0
    96a2:	d1b5      	bne.n	9610 <_strtol_l.constprop.0+0x54>
    96a4:	2308      	movs	r3, #8
    96a6:	e7b3      	b.n	9610 <_strtol_l.constprop.0+0x54>
    96a8:	2c30      	cmp	r4, #48	; 0x30
    96aa:	d0a9      	beq.n	9600 <_strtol_l.constprop.0+0x44>
    96ac:	230a      	movs	r3, #10
    96ae:	e7af      	b.n	9610 <_strtol_l.constprop.0+0x54>
    96b0:	0000edfb 	.word	0x0000edfb

000096b4 <strtol>:
    96b4:	4613      	mov	r3, r2
    96b6:	460a      	mov	r2, r1
    96b8:	4601      	mov	r1, r0
    96ba:	4802      	ldr	r0, [pc, #8]	; (96c4 <strtol+0x10>)
    96bc:	6800      	ldr	r0, [r0, #0]
    96be:	f7ff bf7d 	b.w	95bc <_strtol_l.constprop.0>
    96c2:	bf00      	nop
    96c4:	20000178 	.word	0x20000178

000096c8 <_strtoul_l.constprop.0>:
    96c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    96cc:	4f36      	ldr	r7, [pc, #216]	; (97a8 <_strtoul_l.constprop.0+0xe0>)
    96ce:	4686      	mov	lr, r0
    96d0:	460d      	mov	r5, r1
    96d2:	4628      	mov	r0, r5
    96d4:	f815 4b01 	ldrb.w	r4, [r5], #1
    96d8:	5de6      	ldrb	r6, [r4, r7]
    96da:	f016 0608 	ands.w	r6, r6, #8
    96de:	d1f8      	bne.n	96d2 <_strtoul_l.constprop.0+0xa>
    96e0:	2c2d      	cmp	r4, #45	; 0x2d
    96e2:	d12f      	bne.n	9744 <_strtoul_l.constprop.0+0x7c>
    96e4:	782c      	ldrb	r4, [r5, #0]
    96e6:	2601      	movs	r6, #1
    96e8:	1c85      	adds	r5, r0, #2
    96ea:	2b00      	cmp	r3, #0
    96ec:	d057      	beq.n	979e <_strtoul_l.constprop.0+0xd6>
    96ee:	2b10      	cmp	r3, #16
    96f0:	d109      	bne.n	9706 <_strtoul_l.constprop.0+0x3e>
    96f2:	2c30      	cmp	r4, #48	; 0x30
    96f4:	d107      	bne.n	9706 <_strtoul_l.constprop.0+0x3e>
    96f6:	7828      	ldrb	r0, [r5, #0]
    96f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    96fc:	2858      	cmp	r0, #88	; 0x58
    96fe:	d149      	bne.n	9794 <_strtoul_l.constprop.0+0xcc>
    9700:	786c      	ldrb	r4, [r5, #1]
    9702:	2310      	movs	r3, #16
    9704:	3502      	adds	r5, #2
    9706:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    970a:	2700      	movs	r7, #0
    970c:	fbb8 f8f3 	udiv	r8, r8, r3
    9710:	fb03 f908 	mul.w	r9, r3, r8
    9714:	ea6f 0909 	mvn.w	r9, r9
    9718:	4638      	mov	r0, r7
    971a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    971e:	f1bc 0f09 	cmp.w	ip, #9
    9722:	d814      	bhi.n	974e <_strtoul_l.constprop.0+0x86>
    9724:	4664      	mov	r4, ip
    9726:	42a3      	cmp	r3, r4
    9728:	dd22      	ble.n	9770 <_strtoul_l.constprop.0+0xa8>
    972a:	2f00      	cmp	r7, #0
    972c:	db1d      	blt.n	976a <_strtoul_l.constprop.0+0xa2>
    972e:	4580      	cmp	r8, r0
    9730:	d31b      	bcc.n	976a <_strtoul_l.constprop.0+0xa2>
    9732:	d101      	bne.n	9738 <_strtoul_l.constprop.0+0x70>
    9734:	45a1      	cmp	r9, r4
    9736:	db18      	blt.n	976a <_strtoul_l.constprop.0+0xa2>
    9738:	fb00 4003 	mla	r0, r0, r3, r4
    973c:	2701      	movs	r7, #1
    973e:	f815 4b01 	ldrb.w	r4, [r5], #1
    9742:	e7ea      	b.n	971a <_strtoul_l.constprop.0+0x52>
    9744:	2c2b      	cmp	r4, #43	; 0x2b
    9746:	bf04      	itt	eq
    9748:	782c      	ldrbeq	r4, [r5, #0]
    974a:	1c85      	addeq	r5, r0, #2
    974c:	e7cd      	b.n	96ea <_strtoul_l.constprop.0+0x22>
    974e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    9752:	f1bc 0f19 	cmp.w	ip, #25
    9756:	d801      	bhi.n	975c <_strtoul_l.constprop.0+0x94>
    9758:	3c37      	subs	r4, #55	; 0x37
    975a:	e7e4      	b.n	9726 <_strtoul_l.constprop.0+0x5e>
    975c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    9760:	f1bc 0f19 	cmp.w	ip, #25
    9764:	d804      	bhi.n	9770 <_strtoul_l.constprop.0+0xa8>
    9766:	3c57      	subs	r4, #87	; 0x57
    9768:	e7dd      	b.n	9726 <_strtoul_l.constprop.0+0x5e>
    976a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    976e:	e7e6      	b.n	973e <_strtoul_l.constprop.0+0x76>
    9770:	2f00      	cmp	r7, #0
    9772:	da07      	bge.n	9784 <_strtoul_l.constprop.0+0xbc>
    9774:	2322      	movs	r3, #34	; 0x22
    9776:	f8ce 3000 	str.w	r3, [lr]
    977a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    977e:	b932      	cbnz	r2, 978e <_strtoul_l.constprop.0+0xc6>
    9780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9784:	b106      	cbz	r6, 9788 <_strtoul_l.constprop.0+0xc0>
    9786:	4240      	negs	r0, r0
    9788:	2a00      	cmp	r2, #0
    978a:	d0f9      	beq.n	9780 <_strtoul_l.constprop.0+0xb8>
    978c:	b107      	cbz	r7, 9790 <_strtoul_l.constprop.0+0xc8>
    978e:	1e69      	subs	r1, r5, #1
    9790:	6011      	str	r1, [r2, #0]
    9792:	e7f5      	b.n	9780 <_strtoul_l.constprop.0+0xb8>
    9794:	2430      	movs	r4, #48	; 0x30
    9796:	2b00      	cmp	r3, #0
    9798:	d1b5      	bne.n	9706 <_strtoul_l.constprop.0+0x3e>
    979a:	2308      	movs	r3, #8
    979c:	e7b3      	b.n	9706 <_strtoul_l.constprop.0+0x3e>
    979e:	2c30      	cmp	r4, #48	; 0x30
    97a0:	d0a9      	beq.n	96f6 <_strtoul_l.constprop.0+0x2e>
    97a2:	230a      	movs	r3, #10
    97a4:	e7af      	b.n	9706 <_strtoul_l.constprop.0+0x3e>
    97a6:	bf00      	nop
    97a8:	0000edfb 	.word	0x0000edfb

000097ac <strtoul>:
    97ac:	4613      	mov	r3, r2
    97ae:	460a      	mov	r2, r1
    97b0:	4601      	mov	r1, r0
    97b2:	4802      	ldr	r0, [pc, #8]	; (97bc <strtoul+0x10>)
    97b4:	6800      	ldr	r0, [r0, #0]
    97b6:	f7ff bf87 	b.w	96c8 <_strtoul_l.constprop.0>
    97ba:	bf00      	nop
    97bc:	20000178 	.word	0x20000178

000097c0 <_localeconv_r>:
    97c0:	4800      	ldr	r0, [pc, #0]	; (97c4 <_localeconv_r+0x4>)
    97c2:	4770      	bx	lr
    97c4:	200002cc 	.word	0x200002cc

000097c8 <__malloc_lock>:
    97c8:	4801      	ldr	r0, [pc, #4]	; (97d0 <__malloc_lock+0x8>)
    97ca:	f002 ba1c 	b.w	bc06 <__retarget_lock_acquire_recursive>
    97ce:	bf00      	nop
    97d0:	2000035c 	.word	0x2000035c

000097d4 <__malloc_unlock>:
    97d4:	4801      	ldr	r0, [pc, #4]	; (97dc <__malloc_unlock+0x8>)
    97d6:	f002 ba1c 	b.w	bc12 <__retarget_lock_release_recursive>
    97da:	bf00      	nop
    97dc:	2000035c 	.word	0x2000035c

000097e0 <_Balloc>:
    97e0:	b570      	push	{r4, r5, r6, lr}
    97e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    97e4:	4604      	mov	r4, r0
    97e6:	460d      	mov	r5, r1
    97e8:	b976      	cbnz	r6, 9808 <_Balloc+0x28>
    97ea:	2010      	movs	r0, #16
    97ec:	f7ff faa6 	bl	8d3c <malloc>
    97f0:	4602      	mov	r2, r0
    97f2:	6260      	str	r0, [r4, #36]	; 0x24
    97f4:	b920      	cbnz	r0, 9800 <_Balloc+0x20>
    97f6:	4b18      	ldr	r3, [pc, #96]	; (9858 <_Balloc+0x78>)
    97f8:	4818      	ldr	r0, [pc, #96]	; (985c <_Balloc+0x7c>)
    97fa:	2166      	movs	r1, #102	; 0x66
    97fc:	f000 fc04 	bl	a008 <__assert_func>
    9800:	e9c0 6601 	strd	r6, r6, [r0, #4]
    9804:	6006      	str	r6, [r0, #0]
    9806:	60c6      	str	r6, [r0, #12]
    9808:	6a66      	ldr	r6, [r4, #36]	; 0x24
    980a:	68f3      	ldr	r3, [r6, #12]
    980c:	b183      	cbz	r3, 9830 <_Balloc+0x50>
    980e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9810:	68db      	ldr	r3, [r3, #12]
    9812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    9816:	b9b8      	cbnz	r0, 9848 <_Balloc+0x68>
    9818:	2101      	movs	r1, #1
    981a:	fa01 f605 	lsl.w	r6, r1, r5
    981e:	1d72      	adds	r2, r6, #5
    9820:	0092      	lsls	r2, r2, #2
    9822:	4620      	mov	r0, r4
    9824:	f003 fbc4 	bl	cfb0 <_calloc_r>
    9828:	b160      	cbz	r0, 9844 <_Balloc+0x64>
    982a:	e9c0 5601 	strd	r5, r6, [r0, #4]
    982e:	e00e      	b.n	984e <_Balloc+0x6e>
    9830:	2221      	movs	r2, #33	; 0x21
    9832:	2104      	movs	r1, #4
    9834:	4620      	mov	r0, r4
    9836:	f003 fbbb 	bl	cfb0 <_calloc_r>
    983a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    983c:	60f0      	str	r0, [r6, #12]
    983e:	68db      	ldr	r3, [r3, #12]
    9840:	2b00      	cmp	r3, #0
    9842:	d1e4      	bne.n	980e <_Balloc+0x2e>
    9844:	2000      	movs	r0, #0
    9846:	bd70      	pop	{r4, r5, r6, pc}
    9848:	6802      	ldr	r2, [r0, #0]
    984a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    984e:	2300      	movs	r3, #0
    9850:	e9c0 3303 	strd	r3, r3, [r0, #12]
    9854:	e7f7      	b.n	9846 <_Balloc+0x66>
    9856:	bf00      	nop
    9858:	0000ef3a 	.word	0x0000ef3a
    985c:	0000efbc 	.word	0x0000efbc

00009860 <_Bfree>:
    9860:	b570      	push	{r4, r5, r6, lr}
    9862:	6a46      	ldr	r6, [r0, #36]	; 0x24
    9864:	4605      	mov	r5, r0
    9866:	460c      	mov	r4, r1
    9868:	b976      	cbnz	r6, 9888 <_Bfree+0x28>
    986a:	2010      	movs	r0, #16
    986c:	f7ff fa66 	bl	8d3c <malloc>
    9870:	4602      	mov	r2, r0
    9872:	6268      	str	r0, [r5, #36]	; 0x24
    9874:	b920      	cbnz	r0, 9880 <_Bfree+0x20>
    9876:	4b09      	ldr	r3, [pc, #36]	; (989c <_Bfree+0x3c>)
    9878:	4809      	ldr	r0, [pc, #36]	; (98a0 <_Bfree+0x40>)
    987a:	218a      	movs	r1, #138	; 0x8a
    987c:	f000 fbc4 	bl	a008 <__assert_func>
    9880:	e9c0 6601 	strd	r6, r6, [r0, #4]
    9884:	6006      	str	r6, [r0, #0]
    9886:	60c6      	str	r6, [r0, #12]
    9888:	b13c      	cbz	r4, 989a <_Bfree+0x3a>
    988a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    988c:	6862      	ldr	r2, [r4, #4]
    988e:	68db      	ldr	r3, [r3, #12]
    9890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9894:	6021      	str	r1, [r4, #0]
    9896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    989a:	bd70      	pop	{r4, r5, r6, pc}
    989c:	0000ef3a 	.word	0x0000ef3a
    98a0:	0000efbc 	.word	0x0000efbc

000098a4 <__multadd>:
    98a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98a8:	690d      	ldr	r5, [r1, #16]
    98aa:	4607      	mov	r7, r0
    98ac:	460c      	mov	r4, r1
    98ae:	461e      	mov	r6, r3
    98b0:	f101 0c14 	add.w	ip, r1, #20
    98b4:	2000      	movs	r0, #0
    98b6:	f8dc 3000 	ldr.w	r3, [ip]
    98ba:	b299      	uxth	r1, r3
    98bc:	fb02 6101 	mla	r1, r2, r1, r6
    98c0:	0c1e      	lsrs	r6, r3, #16
    98c2:	0c0b      	lsrs	r3, r1, #16
    98c4:	fb02 3306 	mla	r3, r2, r6, r3
    98c8:	b289      	uxth	r1, r1
    98ca:	3001      	adds	r0, #1
    98cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    98d0:	4285      	cmp	r5, r0
    98d2:	f84c 1b04 	str.w	r1, [ip], #4
    98d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
    98da:	dcec      	bgt.n	98b6 <__multadd+0x12>
    98dc:	b30e      	cbz	r6, 9922 <__multadd+0x7e>
    98de:	68a3      	ldr	r3, [r4, #8]
    98e0:	42ab      	cmp	r3, r5
    98e2:	dc19      	bgt.n	9918 <__multadd+0x74>
    98e4:	6861      	ldr	r1, [r4, #4]
    98e6:	4638      	mov	r0, r7
    98e8:	3101      	adds	r1, #1
    98ea:	f7ff ff79 	bl	97e0 <_Balloc>
    98ee:	4680      	mov	r8, r0
    98f0:	b928      	cbnz	r0, 98fe <__multadd+0x5a>
    98f2:	4602      	mov	r2, r0
    98f4:	4b0c      	ldr	r3, [pc, #48]	; (9928 <__multadd+0x84>)
    98f6:	480d      	ldr	r0, [pc, #52]	; (992c <__multadd+0x88>)
    98f8:	21b5      	movs	r1, #181	; 0xb5
    98fa:	f000 fb85 	bl	a008 <__assert_func>
    98fe:	6922      	ldr	r2, [r4, #16]
    9900:	3202      	adds	r2, #2
    9902:	f104 010c 	add.w	r1, r4, #12
    9906:	0092      	lsls	r2, r2, #2
    9908:	300c      	adds	r0, #12
    990a:	f003 f8c9 	bl	caa0 <memcpy>
    990e:	4621      	mov	r1, r4
    9910:	4638      	mov	r0, r7
    9912:	f7ff ffa5 	bl	9860 <_Bfree>
    9916:	4644      	mov	r4, r8
    9918:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    991c:	3501      	adds	r5, #1
    991e:	615e      	str	r6, [r3, #20]
    9920:	6125      	str	r5, [r4, #16]
    9922:	4620      	mov	r0, r4
    9924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9928:	0000efab 	.word	0x0000efab
    992c:	0000efbc 	.word	0x0000efbc

00009930 <__i2b>:
    9930:	b510      	push	{r4, lr}
    9932:	460c      	mov	r4, r1
    9934:	2101      	movs	r1, #1
    9936:	f7ff ff53 	bl	97e0 <_Balloc>
    993a:	4602      	mov	r2, r0
    993c:	b928      	cbnz	r0, 994a <__i2b+0x1a>
    993e:	4b05      	ldr	r3, [pc, #20]	; (9954 <__i2b+0x24>)
    9940:	4805      	ldr	r0, [pc, #20]	; (9958 <__i2b+0x28>)
    9942:	f44f 71a0 	mov.w	r1, #320	; 0x140
    9946:	f000 fb5f 	bl	a008 <__assert_func>
    994a:	2301      	movs	r3, #1
    994c:	6144      	str	r4, [r0, #20]
    994e:	6103      	str	r3, [r0, #16]
    9950:	bd10      	pop	{r4, pc}
    9952:	bf00      	nop
    9954:	0000efab 	.word	0x0000efab
    9958:	0000efbc 	.word	0x0000efbc

0000995c <__multiply>:
    995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9960:	4691      	mov	r9, r2
    9962:	690a      	ldr	r2, [r1, #16]
    9964:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9968:	429a      	cmp	r2, r3
    996a:	bfb8      	it	lt
    996c:	460b      	movlt	r3, r1
    996e:	460c      	mov	r4, r1
    9970:	bfbc      	itt	lt
    9972:	464c      	movlt	r4, r9
    9974:	4699      	movlt	r9, r3
    9976:	6927      	ldr	r7, [r4, #16]
    9978:	f8d9 a010 	ldr.w	sl, [r9, #16]
    997c:	68a3      	ldr	r3, [r4, #8]
    997e:	6861      	ldr	r1, [r4, #4]
    9980:	eb07 060a 	add.w	r6, r7, sl
    9984:	42b3      	cmp	r3, r6
    9986:	b085      	sub	sp, #20
    9988:	bfb8      	it	lt
    998a:	3101      	addlt	r1, #1
    998c:	f7ff ff28 	bl	97e0 <_Balloc>
    9990:	b930      	cbnz	r0, 99a0 <__multiply+0x44>
    9992:	4602      	mov	r2, r0
    9994:	4b43      	ldr	r3, [pc, #268]	; (9aa4 <__multiply+0x148>)
    9996:	4844      	ldr	r0, [pc, #272]	; (9aa8 <__multiply+0x14c>)
    9998:	f240 115d 	movw	r1, #349	; 0x15d
    999c:	f000 fb34 	bl	a008 <__assert_func>
    99a0:	f100 0514 	add.w	r5, r0, #20
    99a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    99a8:	462b      	mov	r3, r5
    99aa:	2200      	movs	r2, #0
    99ac:	4543      	cmp	r3, r8
    99ae:	d321      	bcc.n	99f4 <__multiply+0x98>
    99b0:	f104 0314 	add.w	r3, r4, #20
    99b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    99b8:	f109 0314 	add.w	r3, r9, #20
    99bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    99c0:	9202      	str	r2, [sp, #8]
    99c2:	1b3a      	subs	r2, r7, r4
    99c4:	3a15      	subs	r2, #21
    99c6:	f022 0203 	bic.w	r2, r2, #3
    99ca:	3204      	adds	r2, #4
    99cc:	f104 0115 	add.w	r1, r4, #21
    99d0:	428f      	cmp	r7, r1
    99d2:	bf38      	it	cc
    99d4:	2204      	movcc	r2, #4
    99d6:	9201      	str	r2, [sp, #4]
    99d8:	9a02      	ldr	r2, [sp, #8]
    99da:	9303      	str	r3, [sp, #12]
    99dc:	429a      	cmp	r2, r3
    99de:	d80c      	bhi.n	99fa <__multiply+0x9e>
    99e0:	2e00      	cmp	r6, #0
    99e2:	dd03      	ble.n	99ec <__multiply+0x90>
    99e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    99e8:	2b00      	cmp	r3, #0
    99ea:	d059      	beq.n	9aa0 <__multiply+0x144>
    99ec:	6106      	str	r6, [r0, #16]
    99ee:	b005      	add	sp, #20
    99f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99f4:	f843 2b04 	str.w	r2, [r3], #4
    99f8:	e7d8      	b.n	99ac <__multiply+0x50>
    99fa:	f8b3 a000 	ldrh.w	sl, [r3]
    99fe:	f1ba 0f00 	cmp.w	sl, #0
    9a02:	d023      	beq.n	9a4c <__multiply+0xf0>
    9a04:	f104 0e14 	add.w	lr, r4, #20
    9a08:	46a9      	mov	r9, r5
    9a0a:	f04f 0c00 	mov.w	ip, #0
    9a0e:	f85e 2b04 	ldr.w	r2, [lr], #4
    9a12:	f8d9 1000 	ldr.w	r1, [r9]
    9a16:	fa1f fb82 	uxth.w	fp, r2
    9a1a:	b289      	uxth	r1, r1
    9a1c:	fb0a 110b 	mla	r1, sl, fp, r1
    9a20:	4461      	add	r1, ip
    9a22:	f8d9 c000 	ldr.w	ip, [r9]
    9a26:	0c12      	lsrs	r2, r2, #16
    9a28:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    9a2c:	fb0a c202 	mla	r2, sl, r2, ip
    9a30:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    9a34:	b289      	uxth	r1, r1
    9a36:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    9a3a:	4577      	cmp	r7, lr
    9a3c:	f849 1b04 	str.w	r1, [r9], #4
    9a40:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    9a44:	d8e3      	bhi.n	9a0e <__multiply+0xb2>
    9a46:	9a01      	ldr	r2, [sp, #4]
    9a48:	f845 c002 	str.w	ip, [r5, r2]
    9a4c:	9a03      	ldr	r2, [sp, #12]
    9a4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    9a52:	3304      	adds	r3, #4
    9a54:	f1b9 0f00 	cmp.w	r9, #0
    9a58:	d020      	beq.n	9a9c <__multiply+0x140>
    9a5a:	6829      	ldr	r1, [r5, #0]
    9a5c:	f104 0c14 	add.w	ip, r4, #20
    9a60:	46ae      	mov	lr, r5
    9a62:	f04f 0a00 	mov.w	sl, #0
    9a66:	f8bc b000 	ldrh.w	fp, [ip]
    9a6a:	f8be 2002 	ldrh.w	r2, [lr, #2]
    9a6e:	fb09 220b 	mla	r2, r9, fp, r2
    9a72:	4492      	add	sl, r2
    9a74:	b289      	uxth	r1, r1
    9a76:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    9a7a:	f84e 1b04 	str.w	r1, [lr], #4
    9a7e:	f85c 2b04 	ldr.w	r2, [ip], #4
    9a82:	f8be 1000 	ldrh.w	r1, [lr]
    9a86:	0c12      	lsrs	r2, r2, #16
    9a88:	fb09 1102 	mla	r1, r9, r2, r1
    9a8c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    9a90:	4567      	cmp	r7, ip
    9a92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    9a96:	d8e6      	bhi.n	9a66 <__multiply+0x10a>
    9a98:	9a01      	ldr	r2, [sp, #4]
    9a9a:	50a9      	str	r1, [r5, r2]
    9a9c:	3504      	adds	r5, #4
    9a9e:	e79b      	b.n	99d8 <__multiply+0x7c>
    9aa0:	3e01      	subs	r6, #1
    9aa2:	e79d      	b.n	99e0 <__multiply+0x84>
    9aa4:	0000efab 	.word	0x0000efab
    9aa8:	0000efbc 	.word	0x0000efbc

00009aac <__pow5mult>:
    9aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ab0:	4615      	mov	r5, r2
    9ab2:	f012 0203 	ands.w	r2, r2, #3
    9ab6:	4606      	mov	r6, r0
    9ab8:	460f      	mov	r7, r1
    9aba:	d007      	beq.n	9acc <__pow5mult+0x20>
    9abc:	4c25      	ldr	r4, [pc, #148]	; (9b54 <__pow5mult+0xa8>)
    9abe:	3a01      	subs	r2, #1
    9ac0:	2300      	movs	r3, #0
    9ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    9ac6:	f7ff feed 	bl	98a4 <__multadd>
    9aca:	4607      	mov	r7, r0
    9acc:	10ad      	asrs	r5, r5, #2
    9ace:	d03d      	beq.n	9b4c <__pow5mult+0xa0>
    9ad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
    9ad2:	b97c      	cbnz	r4, 9af4 <__pow5mult+0x48>
    9ad4:	2010      	movs	r0, #16
    9ad6:	f7ff f931 	bl	8d3c <malloc>
    9ada:	4602      	mov	r2, r0
    9adc:	6270      	str	r0, [r6, #36]	; 0x24
    9ade:	b928      	cbnz	r0, 9aec <__pow5mult+0x40>
    9ae0:	4b1d      	ldr	r3, [pc, #116]	; (9b58 <__pow5mult+0xac>)
    9ae2:	481e      	ldr	r0, [pc, #120]	; (9b5c <__pow5mult+0xb0>)
    9ae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    9ae8:	f000 fa8e 	bl	a008 <__assert_func>
    9aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
    9af0:	6004      	str	r4, [r0, #0]
    9af2:	60c4      	str	r4, [r0, #12]
    9af4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    9af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
    9afc:	b94c      	cbnz	r4, 9b12 <__pow5mult+0x66>
    9afe:	f240 2171 	movw	r1, #625	; 0x271
    9b02:	4630      	mov	r0, r6
    9b04:	f7ff ff14 	bl	9930 <__i2b>
    9b08:	2300      	movs	r3, #0
    9b0a:	f8c8 0008 	str.w	r0, [r8, #8]
    9b0e:	4604      	mov	r4, r0
    9b10:	6003      	str	r3, [r0, #0]
    9b12:	f04f 0900 	mov.w	r9, #0
    9b16:	07eb      	lsls	r3, r5, #31
    9b18:	d50a      	bpl.n	9b30 <__pow5mult+0x84>
    9b1a:	4639      	mov	r1, r7
    9b1c:	4622      	mov	r2, r4
    9b1e:	4630      	mov	r0, r6
    9b20:	f7ff ff1c 	bl	995c <__multiply>
    9b24:	4639      	mov	r1, r7
    9b26:	4680      	mov	r8, r0
    9b28:	4630      	mov	r0, r6
    9b2a:	f7ff fe99 	bl	9860 <_Bfree>
    9b2e:	4647      	mov	r7, r8
    9b30:	106d      	asrs	r5, r5, #1
    9b32:	d00b      	beq.n	9b4c <__pow5mult+0xa0>
    9b34:	6820      	ldr	r0, [r4, #0]
    9b36:	b938      	cbnz	r0, 9b48 <__pow5mult+0x9c>
    9b38:	4622      	mov	r2, r4
    9b3a:	4621      	mov	r1, r4
    9b3c:	4630      	mov	r0, r6
    9b3e:	f7ff ff0d 	bl	995c <__multiply>
    9b42:	6020      	str	r0, [r4, #0]
    9b44:	f8c0 9000 	str.w	r9, [r0]
    9b48:	4604      	mov	r4, r0
    9b4a:	e7e4      	b.n	9b16 <__pow5mult+0x6a>
    9b4c:	4638      	mov	r0, r7
    9b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b52:	bf00      	nop
    9b54:	0000dd2c 	.word	0x0000dd2c
    9b58:	0000ef3a 	.word	0x0000ef3a
    9b5c:	0000efbc 	.word	0x0000efbc

00009b60 <__lshift>:
    9b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b64:	460c      	mov	r4, r1
    9b66:	6849      	ldr	r1, [r1, #4]
    9b68:	6923      	ldr	r3, [r4, #16]
    9b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
    9b6e:	68a3      	ldr	r3, [r4, #8]
    9b70:	4607      	mov	r7, r0
    9b72:	4691      	mov	r9, r2
    9b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
    9b78:	f108 0601 	add.w	r6, r8, #1
    9b7c:	42b3      	cmp	r3, r6
    9b7e:	db0b      	blt.n	9b98 <__lshift+0x38>
    9b80:	4638      	mov	r0, r7
    9b82:	f7ff fe2d 	bl	97e0 <_Balloc>
    9b86:	4605      	mov	r5, r0
    9b88:	b948      	cbnz	r0, 9b9e <__lshift+0x3e>
    9b8a:	4602      	mov	r2, r0
    9b8c:	4b2a      	ldr	r3, [pc, #168]	; (9c38 <__lshift+0xd8>)
    9b8e:	482b      	ldr	r0, [pc, #172]	; (9c3c <__lshift+0xdc>)
    9b90:	f240 11d9 	movw	r1, #473	; 0x1d9
    9b94:	f000 fa38 	bl	a008 <__assert_func>
    9b98:	3101      	adds	r1, #1
    9b9a:	005b      	lsls	r3, r3, #1
    9b9c:	e7ee      	b.n	9b7c <__lshift+0x1c>
    9b9e:	2300      	movs	r3, #0
    9ba0:	f100 0114 	add.w	r1, r0, #20
    9ba4:	f100 0210 	add.w	r2, r0, #16
    9ba8:	4618      	mov	r0, r3
    9baa:	4553      	cmp	r3, sl
    9bac:	db37      	blt.n	9c1e <__lshift+0xbe>
    9bae:	6920      	ldr	r0, [r4, #16]
    9bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    9bb4:	f104 0314 	add.w	r3, r4, #20
    9bb8:	f019 091f 	ands.w	r9, r9, #31
    9bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    9bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9bc4:	d02f      	beq.n	9c26 <__lshift+0xc6>
    9bc6:	f1c9 0e20 	rsb	lr, r9, #32
    9bca:	468a      	mov	sl, r1
    9bcc:	f04f 0c00 	mov.w	ip, #0
    9bd0:	681a      	ldr	r2, [r3, #0]
    9bd2:	fa02 f209 	lsl.w	r2, r2, r9
    9bd6:	ea42 020c 	orr.w	r2, r2, ip
    9bda:	f84a 2b04 	str.w	r2, [sl], #4
    9bde:	f853 2b04 	ldr.w	r2, [r3], #4
    9be2:	4298      	cmp	r0, r3
    9be4:	fa22 fc0e 	lsr.w	ip, r2, lr
    9be8:	d8f2      	bhi.n	9bd0 <__lshift+0x70>
    9bea:	1b03      	subs	r3, r0, r4
    9bec:	3b15      	subs	r3, #21
    9bee:	f023 0303 	bic.w	r3, r3, #3
    9bf2:	3304      	adds	r3, #4
    9bf4:	f104 0215 	add.w	r2, r4, #21
    9bf8:	4290      	cmp	r0, r2
    9bfa:	bf38      	it	cc
    9bfc:	2304      	movcc	r3, #4
    9bfe:	f841 c003 	str.w	ip, [r1, r3]
    9c02:	f1bc 0f00 	cmp.w	ip, #0
    9c06:	d001      	beq.n	9c0c <__lshift+0xac>
    9c08:	f108 0602 	add.w	r6, r8, #2
    9c0c:	3e01      	subs	r6, #1
    9c0e:	4638      	mov	r0, r7
    9c10:	612e      	str	r6, [r5, #16]
    9c12:	4621      	mov	r1, r4
    9c14:	f7ff fe24 	bl	9860 <_Bfree>
    9c18:	4628      	mov	r0, r5
    9c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c1e:	f842 0f04 	str.w	r0, [r2, #4]!
    9c22:	3301      	adds	r3, #1
    9c24:	e7c1      	b.n	9baa <__lshift+0x4a>
    9c26:	3904      	subs	r1, #4
    9c28:	f853 2b04 	ldr.w	r2, [r3], #4
    9c2c:	f841 2f04 	str.w	r2, [r1, #4]!
    9c30:	4298      	cmp	r0, r3
    9c32:	d8f9      	bhi.n	9c28 <__lshift+0xc8>
    9c34:	e7ea      	b.n	9c0c <__lshift+0xac>
    9c36:	bf00      	nop
    9c38:	0000efab 	.word	0x0000efab
    9c3c:	0000efbc 	.word	0x0000efbc

00009c40 <__mdiff>:
    9c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c44:	460d      	mov	r5, r1
    9c46:	4607      	mov	r7, r0
    9c48:	4611      	mov	r1, r2
    9c4a:	4628      	mov	r0, r5
    9c4c:	4614      	mov	r4, r2
    9c4e:	f003 f994 	bl	cf7a <__mcmp>
    9c52:	1e06      	subs	r6, r0, #0
    9c54:	d111      	bne.n	9c7a <__mdiff+0x3a>
    9c56:	4631      	mov	r1, r6
    9c58:	4638      	mov	r0, r7
    9c5a:	f7ff fdc1 	bl	97e0 <_Balloc>
    9c5e:	4602      	mov	r2, r0
    9c60:	b928      	cbnz	r0, 9c6e <__mdiff+0x2e>
    9c62:	4b39      	ldr	r3, [pc, #228]	; (9d48 <__mdiff+0x108>)
    9c64:	f240 2132 	movw	r1, #562	; 0x232
    9c68:	4838      	ldr	r0, [pc, #224]	; (9d4c <__mdiff+0x10c>)
    9c6a:	f000 f9cd 	bl	a008 <__assert_func>
    9c6e:	2301      	movs	r3, #1
    9c70:	e9c0 3604 	strd	r3, r6, [r0, #16]
    9c74:	4610      	mov	r0, r2
    9c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c7a:	bfa4      	itt	ge
    9c7c:	4623      	movge	r3, r4
    9c7e:	462c      	movge	r4, r5
    9c80:	4638      	mov	r0, r7
    9c82:	6861      	ldr	r1, [r4, #4]
    9c84:	bfa6      	itte	ge
    9c86:	461d      	movge	r5, r3
    9c88:	2600      	movge	r6, #0
    9c8a:	2601      	movlt	r6, #1
    9c8c:	f7ff fda8 	bl	97e0 <_Balloc>
    9c90:	4602      	mov	r2, r0
    9c92:	b918      	cbnz	r0, 9c9c <__mdiff+0x5c>
    9c94:	4b2c      	ldr	r3, [pc, #176]	; (9d48 <__mdiff+0x108>)
    9c96:	f44f 7110 	mov.w	r1, #576	; 0x240
    9c9a:	e7e5      	b.n	9c68 <__mdiff+0x28>
    9c9c:	6927      	ldr	r7, [r4, #16]
    9c9e:	60c6      	str	r6, [r0, #12]
    9ca0:	692e      	ldr	r6, [r5, #16]
    9ca2:	f104 0014 	add.w	r0, r4, #20
    9ca6:	f105 0914 	add.w	r9, r5, #20
    9caa:	f102 0e14 	add.w	lr, r2, #20
    9cae:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    9cb2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    9cb6:	3410      	adds	r4, #16
    9cb8:	46f2      	mov	sl, lr
    9cba:	2100      	movs	r1, #0
    9cbc:	f859 3b04 	ldr.w	r3, [r9], #4
    9cc0:	f854 bf04 	ldr.w	fp, [r4, #4]!
    9cc4:	fa1f f883 	uxth.w	r8, r3
    9cc8:	fa11 f18b 	uxtah	r1, r1, fp
    9ccc:	0c1b      	lsrs	r3, r3, #16
    9cce:	eba1 0808 	sub.w	r8, r1, r8
    9cd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    9cd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
    9cda:	fa1f f888 	uxth.w	r8, r8
    9cde:	1419      	asrs	r1, r3, #16
    9ce0:	454e      	cmp	r6, r9
    9ce2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    9ce6:	f84a 3b04 	str.w	r3, [sl], #4
    9cea:	d8e7      	bhi.n	9cbc <__mdiff+0x7c>
    9cec:	1b73      	subs	r3, r6, r5
    9cee:	3b15      	subs	r3, #21
    9cf0:	f023 0303 	bic.w	r3, r3, #3
    9cf4:	3304      	adds	r3, #4
    9cf6:	3515      	adds	r5, #21
    9cf8:	42ae      	cmp	r6, r5
    9cfa:	bf38      	it	cc
    9cfc:	2304      	movcc	r3, #4
    9cfe:	4418      	add	r0, r3
    9d00:	4473      	add	r3, lr
    9d02:	469e      	mov	lr, r3
    9d04:	4606      	mov	r6, r0
    9d06:	4566      	cmp	r6, ip
    9d08:	d30e      	bcc.n	9d28 <__mdiff+0xe8>
    9d0a:	f10c 0103 	add.w	r1, ip, #3
    9d0e:	1a09      	subs	r1, r1, r0
    9d10:	f021 0103 	bic.w	r1, r1, #3
    9d14:	3803      	subs	r0, #3
    9d16:	4584      	cmp	ip, r0
    9d18:	bf38      	it	cc
    9d1a:	2100      	movcc	r1, #0
    9d1c:	4419      	add	r1, r3
    9d1e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    9d22:	b17b      	cbz	r3, 9d44 <__mdiff+0x104>
    9d24:	6117      	str	r7, [r2, #16]
    9d26:	e7a5      	b.n	9c74 <__mdiff+0x34>
    9d28:	f856 8b04 	ldr.w	r8, [r6], #4
    9d2c:	fa11 f488 	uxtah	r4, r1, r8
    9d30:	1425      	asrs	r5, r4, #16
    9d32:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    9d36:	b2a4      	uxth	r4, r4
    9d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9d3c:	f84e 4b04 	str.w	r4, [lr], #4
    9d40:	1429      	asrs	r1, r5, #16
    9d42:	e7e0      	b.n	9d06 <__mdiff+0xc6>
    9d44:	3f01      	subs	r7, #1
    9d46:	e7ea      	b.n	9d1e <__mdiff+0xde>
    9d48:	0000efab 	.word	0x0000efab
    9d4c:	0000efbc 	.word	0x0000efbc

00009d50 <__d2b>:
    9d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9d54:	2101      	movs	r1, #1
    9d56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    9d5a:	4690      	mov	r8, r2
    9d5c:	461d      	mov	r5, r3
    9d5e:	f7ff fd3f 	bl	97e0 <_Balloc>
    9d62:	4604      	mov	r4, r0
    9d64:	b930      	cbnz	r0, 9d74 <__d2b+0x24>
    9d66:	4602      	mov	r2, r0
    9d68:	4b25      	ldr	r3, [pc, #148]	; (9e00 <__d2b+0xb0>)
    9d6a:	4826      	ldr	r0, [pc, #152]	; (9e04 <__d2b+0xb4>)
    9d6c:	f240 310a 	movw	r1, #778	; 0x30a
    9d70:	f000 f94a 	bl	a008 <__assert_func>
    9d74:	f3c5 0313 	ubfx	r3, r5, #0, #20
    9d78:	f3c5 550a 	ubfx	r5, r5, #20, #11
    9d7c:	bb2d      	cbnz	r5, 9dca <__d2b+0x7a>
    9d7e:	9301      	str	r3, [sp, #4]
    9d80:	f1b8 0300 	subs.w	r3, r8, #0
    9d84:	d026      	beq.n	9dd4 <__d2b+0x84>
    9d86:	4668      	mov	r0, sp
    9d88:	9300      	str	r3, [sp, #0]
    9d8a:	f003 f8c9 	bl	cf20 <__lo0bits>
    9d8e:	9900      	ldr	r1, [sp, #0]
    9d90:	b1f0      	cbz	r0, 9dd0 <__d2b+0x80>
    9d92:	9a01      	ldr	r2, [sp, #4]
    9d94:	f1c0 0320 	rsb	r3, r0, #32
    9d98:	fa02 f303 	lsl.w	r3, r2, r3
    9d9c:	430b      	orrs	r3, r1
    9d9e:	40c2      	lsrs	r2, r0
    9da0:	6163      	str	r3, [r4, #20]
    9da2:	9201      	str	r2, [sp, #4]
    9da4:	9b01      	ldr	r3, [sp, #4]
    9da6:	61a3      	str	r3, [r4, #24]
    9da8:	2b00      	cmp	r3, #0
    9daa:	bf14      	ite	ne
    9dac:	2102      	movne	r1, #2
    9dae:	2101      	moveq	r1, #1
    9db0:	6121      	str	r1, [r4, #16]
    9db2:	b1c5      	cbz	r5, 9de6 <__d2b+0x96>
    9db4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    9db8:	4405      	add	r5, r0
    9dba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    9dbe:	603d      	str	r5, [r7, #0]
    9dc0:	6030      	str	r0, [r6, #0]
    9dc2:	4620      	mov	r0, r4
    9dc4:	b002      	add	sp, #8
    9dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9dce:	e7d6      	b.n	9d7e <__d2b+0x2e>
    9dd0:	6161      	str	r1, [r4, #20]
    9dd2:	e7e7      	b.n	9da4 <__d2b+0x54>
    9dd4:	a801      	add	r0, sp, #4
    9dd6:	f003 f8a3 	bl	cf20 <__lo0bits>
    9dda:	9b01      	ldr	r3, [sp, #4]
    9ddc:	6163      	str	r3, [r4, #20]
    9dde:	2101      	movs	r1, #1
    9de0:	6121      	str	r1, [r4, #16]
    9de2:	3020      	adds	r0, #32
    9de4:	e7e5      	b.n	9db2 <__d2b+0x62>
    9de6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    9dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    9dee:	6038      	str	r0, [r7, #0]
    9df0:	6918      	ldr	r0, [r3, #16]
    9df2:	f003 f875 	bl	cee0 <__hi0bits>
    9df6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    9dfa:	6031      	str	r1, [r6, #0]
    9dfc:	e7e1      	b.n	9dc2 <__d2b+0x72>
    9dfe:	bf00      	nop
    9e00:	0000efab 	.word	0x0000efab
    9e04:	0000efbc 	.word	0x0000efbc

00009e08 <_svfiprintf_r>:
    9e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e0c:	4698      	mov	r8, r3
    9e0e:	898b      	ldrh	r3, [r1, #12]
    9e10:	061b      	lsls	r3, r3, #24
    9e12:	b09d      	sub	sp, #116	; 0x74
    9e14:	4607      	mov	r7, r0
    9e16:	460d      	mov	r5, r1
    9e18:	4614      	mov	r4, r2
    9e1a:	d50e      	bpl.n	9e3a <_svfiprintf_r+0x32>
    9e1c:	690b      	ldr	r3, [r1, #16]
    9e1e:	b963      	cbnz	r3, 9e3a <_svfiprintf_r+0x32>
    9e20:	2140      	movs	r1, #64	; 0x40
    9e22:	f7fe ffdd 	bl	8de0 <_malloc_r>
    9e26:	6028      	str	r0, [r5, #0]
    9e28:	6128      	str	r0, [r5, #16]
    9e2a:	b920      	cbnz	r0, 9e36 <_svfiprintf_r+0x2e>
    9e2c:	230c      	movs	r3, #12
    9e2e:	603b      	str	r3, [r7, #0]
    9e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9e34:	e0d1      	b.n	9fda <_svfiprintf_r+0x1d2>
    9e36:	2340      	movs	r3, #64	; 0x40
    9e38:	616b      	str	r3, [r5, #20]
    9e3a:	2300      	movs	r3, #0
    9e3c:	9309      	str	r3, [sp, #36]	; 0x24
    9e3e:	2320      	movs	r3, #32
    9e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    9e44:	f8cd 800c 	str.w	r8, [sp, #12]
    9e48:	2330      	movs	r3, #48	; 0x30
    9e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 9ff4 <_svfiprintf_r+0x1ec>
    9e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    9e52:	f04f 0901 	mov.w	r9, #1
    9e56:	4623      	mov	r3, r4
    9e58:	469a      	mov	sl, r3
    9e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
    9e5e:	b10a      	cbz	r2, 9e64 <_svfiprintf_r+0x5c>
    9e60:	2a25      	cmp	r2, #37	; 0x25
    9e62:	d1f9      	bne.n	9e58 <_svfiprintf_r+0x50>
    9e64:	ebba 0b04 	subs.w	fp, sl, r4
    9e68:	d00b      	beq.n	9e82 <_svfiprintf_r+0x7a>
    9e6a:	465b      	mov	r3, fp
    9e6c:	4622      	mov	r2, r4
    9e6e:	4629      	mov	r1, r5
    9e70:	4638      	mov	r0, r7
    9e72:	f003 f8ab 	bl	cfcc <__ssputs_r>
    9e76:	3001      	adds	r0, #1
    9e78:	f000 80aa 	beq.w	9fd0 <_svfiprintf_r+0x1c8>
    9e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9e7e:	445a      	add	r2, fp
    9e80:	9209      	str	r2, [sp, #36]	; 0x24
    9e82:	f89a 3000 	ldrb.w	r3, [sl]
    9e86:	2b00      	cmp	r3, #0
    9e88:	f000 80a2 	beq.w	9fd0 <_svfiprintf_r+0x1c8>
    9e8c:	2300      	movs	r3, #0
    9e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
    9e96:	f10a 0a01 	add.w	sl, sl, #1
    9e9a:	9304      	str	r3, [sp, #16]
    9e9c:	9307      	str	r3, [sp, #28]
    9e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    9ea2:	931a      	str	r3, [sp, #104]	; 0x68
    9ea4:	4654      	mov	r4, sl
    9ea6:	2205      	movs	r2, #5
    9ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
    9eac:	4851      	ldr	r0, [pc, #324]	; (9ff4 <_svfiprintf_r+0x1ec>)
    9eae:	f7f6 f927 	bl	100 <memchr>
    9eb2:	9a04      	ldr	r2, [sp, #16]
    9eb4:	b9d8      	cbnz	r0, 9eee <_svfiprintf_r+0xe6>
    9eb6:	06d0      	lsls	r0, r2, #27
    9eb8:	bf44      	itt	mi
    9eba:	2320      	movmi	r3, #32
    9ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    9ec0:	0711      	lsls	r1, r2, #28
    9ec2:	bf44      	itt	mi
    9ec4:	232b      	movmi	r3, #43	; 0x2b
    9ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    9eca:	f89a 3000 	ldrb.w	r3, [sl]
    9ece:	2b2a      	cmp	r3, #42	; 0x2a
    9ed0:	d015      	beq.n	9efe <_svfiprintf_r+0xf6>
    9ed2:	9a07      	ldr	r2, [sp, #28]
    9ed4:	4654      	mov	r4, sl
    9ed6:	2000      	movs	r0, #0
    9ed8:	f04f 0c0a 	mov.w	ip, #10
    9edc:	4621      	mov	r1, r4
    9ede:	f811 3b01 	ldrb.w	r3, [r1], #1
    9ee2:	3b30      	subs	r3, #48	; 0x30
    9ee4:	2b09      	cmp	r3, #9
    9ee6:	d94e      	bls.n	9f86 <_svfiprintf_r+0x17e>
    9ee8:	b1b0      	cbz	r0, 9f18 <_svfiprintf_r+0x110>
    9eea:	9207      	str	r2, [sp, #28]
    9eec:	e014      	b.n	9f18 <_svfiprintf_r+0x110>
    9eee:	eba0 0308 	sub.w	r3, r0, r8
    9ef2:	fa09 f303 	lsl.w	r3, r9, r3
    9ef6:	4313      	orrs	r3, r2
    9ef8:	9304      	str	r3, [sp, #16]
    9efa:	46a2      	mov	sl, r4
    9efc:	e7d2      	b.n	9ea4 <_svfiprintf_r+0x9c>
    9efe:	9b03      	ldr	r3, [sp, #12]
    9f00:	1d19      	adds	r1, r3, #4
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	9103      	str	r1, [sp, #12]
    9f06:	2b00      	cmp	r3, #0
    9f08:	bfbb      	ittet	lt
    9f0a:	425b      	neglt	r3, r3
    9f0c:	f042 0202 	orrlt.w	r2, r2, #2
    9f10:	9307      	strge	r3, [sp, #28]
    9f12:	9307      	strlt	r3, [sp, #28]
    9f14:	bfb8      	it	lt
    9f16:	9204      	strlt	r2, [sp, #16]
    9f18:	7823      	ldrb	r3, [r4, #0]
    9f1a:	2b2e      	cmp	r3, #46	; 0x2e
    9f1c:	d10c      	bne.n	9f38 <_svfiprintf_r+0x130>
    9f1e:	7863      	ldrb	r3, [r4, #1]
    9f20:	2b2a      	cmp	r3, #42	; 0x2a
    9f22:	d135      	bne.n	9f90 <_svfiprintf_r+0x188>
    9f24:	9b03      	ldr	r3, [sp, #12]
    9f26:	1d1a      	adds	r2, r3, #4
    9f28:	681b      	ldr	r3, [r3, #0]
    9f2a:	9203      	str	r2, [sp, #12]
    9f2c:	2b00      	cmp	r3, #0
    9f2e:	bfb8      	it	lt
    9f30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    9f34:	3402      	adds	r4, #2
    9f36:	9305      	str	r3, [sp, #20]
    9f38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 9ff8 <_svfiprintf_r+0x1f0>
    9f3c:	7821      	ldrb	r1, [r4, #0]
    9f3e:	2203      	movs	r2, #3
    9f40:	4650      	mov	r0, sl
    9f42:	f7f6 f8dd 	bl	100 <memchr>
    9f46:	b140      	cbz	r0, 9f5a <_svfiprintf_r+0x152>
    9f48:	2340      	movs	r3, #64	; 0x40
    9f4a:	eba0 000a 	sub.w	r0, r0, sl
    9f4e:	fa03 f000 	lsl.w	r0, r3, r0
    9f52:	9b04      	ldr	r3, [sp, #16]
    9f54:	4303      	orrs	r3, r0
    9f56:	3401      	adds	r4, #1
    9f58:	9304      	str	r3, [sp, #16]
    9f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
    9f5e:	4827      	ldr	r0, [pc, #156]	; (9ffc <_svfiprintf_r+0x1f4>)
    9f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    9f64:	2206      	movs	r2, #6
    9f66:	f7f6 f8cb 	bl	100 <memchr>
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d038      	beq.n	9fe0 <_svfiprintf_r+0x1d8>
    9f6e:	4b24      	ldr	r3, [pc, #144]	; (a000 <_svfiprintf_r+0x1f8>)
    9f70:	bb1b      	cbnz	r3, 9fba <_svfiprintf_r+0x1b2>
    9f72:	9b03      	ldr	r3, [sp, #12]
    9f74:	3307      	adds	r3, #7
    9f76:	f023 0307 	bic.w	r3, r3, #7
    9f7a:	3308      	adds	r3, #8
    9f7c:	9303      	str	r3, [sp, #12]
    9f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f80:	4433      	add	r3, r6
    9f82:	9309      	str	r3, [sp, #36]	; 0x24
    9f84:	e767      	b.n	9e56 <_svfiprintf_r+0x4e>
    9f86:	fb0c 3202 	mla	r2, ip, r2, r3
    9f8a:	460c      	mov	r4, r1
    9f8c:	2001      	movs	r0, #1
    9f8e:	e7a5      	b.n	9edc <_svfiprintf_r+0xd4>
    9f90:	2300      	movs	r3, #0
    9f92:	3401      	adds	r4, #1
    9f94:	9305      	str	r3, [sp, #20]
    9f96:	4619      	mov	r1, r3
    9f98:	f04f 0c0a 	mov.w	ip, #10
    9f9c:	4620      	mov	r0, r4
    9f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
    9fa2:	3a30      	subs	r2, #48	; 0x30
    9fa4:	2a09      	cmp	r2, #9
    9fa6:	d903      	bls.n	9fb0 <_svfiprintf_r+0x1a8>
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d0c5      	beq.n	9f38 <_svfiprintf_r+0x130>
    9fac:	9105      	str	r1, [sp, #20]
    9fae:	e7c3      	b.n	9f38 <_svfiprintf_r+0x130>
    9fb0:	fb0c 2101 	mla	r1, ip, r1, r2
    9fb4:	4604      	mov	r4, r0
    9fb6:	2301      	movs	r3, #1
    9fb8:	e7f0      	b.n	9f9c <_svfiprintf_r+0x194>
    9fba:	ab03      	add	r3, sp, #12
    9fbc:	9300      	str	r3, [sp, #0]
    9fbe:	462a      	mov	r2, r5
    9fc0:	4b10      	ldr	r3, [pc, #64]	; (a004 <_svfiprintf_r+0x1fc>)
    9fc2:	a904      	add	r1, sp, #16
    9fc4:	4638      	mov	r0, r7
    9fc6:	f7fe ff65 	bl	8e94 <_printf_float>
    9fca:	1c42      	adds	r2, r0, #1
    9fcc:	4606      	mov	r6, r0
    9fce:	d1d6      	bne.n	9f7e <_svfiprintf_r+0x176>
    9fd0:	89ab      	ldrh	r3, [r5, #12]
    9fd2:	065b      	lsls	r3, r3, #25
    9fd4:	f53f af2c 	bmi.w	9e30 <_svfiprintf_r+0x28>
    9fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
    9fda:	b01d      	add	sp, #116	; 0x74
    9fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe0:	ab03      	add	r3, sp, #12
    9fe2:	9300      	str	r3, [sp, #0]
    9fe4:	462a      	mov	r2, r5
    9fe6:	4b07      	ldr	r3, [pc, #28]	; (a004 <_svfiprintf_r+0x1fc>)
    9fe8:	a904      	add	r1, sp, #16
    9fea:	4638      	mov	r0, r7
    9fec:	f7ff f97c 	bl	92e8 <_printf_i>
    9ff0:	e7eb      	b.n	9fca <_svfiprintf_r+0x1c2>
    9ff2:	bf00      	nop
    9ff4:	0000f017 	.word	0x0000f017
    9ff8:	0000f01d 	.word	0x0000f01d
    9ffc:	0000f021 	.word	0x0000f021
    a000:	00008e95 	.word	0x00008e95
    a004:	0000cfcd 	.word	0x0000cfcd

0000a008 <__assert_func>:
    a008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a00a:	4614      	mov	r4, r2
    a00c:	461a      	mov	r2, r3
    a00e:	4b09      	ldr	r3, [pc, #36]	; (a034 <__assert_func+0x2c>)
    a010:	681b      	ldr	r3, [r3, #0]
    a012:	4605      	mov	r5, r0
    a014:	68d8      	ldr	r0, [r3, #12]
    a016:	b14c      	cbz	r4, a02c <__assert_func+0x24>
    a018:	4b07      	ldr	r3, [pc, #28]	; (a038 <__assert_func+0x30>)
    a01a:	9100      	str	r1, [sp, #0]
    a01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
    a020:	4906      	ldr	r1, [pc, #24]	; (a03c <__assert_func+0x34>)
    a022:	462b      	mov	r3, r5
    a024:	f000 f80e 	bl	a044 <fiprintf>
    a028:	f003 f897 	bl	d15a <abort>
    a02c:	4b04      	ldr	r3, [pc, #16]	; (a040 <__assert_func+0x38>)
    a02e:	461c      	mov	r4, r3
    a030:	e7f3      	b.n	a01a <__assert_func+0x12>
    a032:	bf00      	nop
    a034:	20000178 	.word	0x20000178
    a038:	0000f028 	.word	0x0000f028
    a03c:	0000f035 	.word	0x0000f035
    a040:	0000df89 	.word	0x0000df89

0000a044 <fiprintf>:
    a044:	b40e      	push	{r1, r2, r3}
    a046:	b503      	push	{r0, r1, lr}
    a048:	4601      	mov	r1, r0
    a04a:	ab03      	add	r3, sp, #12
    a04c:	4805      	ldr	r0, [pc, #20]	; (a064 <fiprintf+0x20>)
    a04e:	f853 2b04 	ldr.w	r2, [r3], #4
    a052:	6800      	ldr	r0, [r0, #0]
    a054:	9301      	str	r3, [sp, #4]
    a056:	f000 f807 	bl	a068 <_vfiprintf_r>
    a05a:	b002      	add	sp, #8
    a05c:	f85d eb04 	ldr.w	lr, [sp], #4
    a060:	b003      	add	sp, #12
    a062:	4770      	bx	lr
    a064:	20000178 	.word	0x20000178

0000a068 <_vfiprintf_r>:
    a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a06c:	460d      	mov	r5, r1
    a06e:	b09d      	sub	sp, #116	; 0x74
    a070:	4614      	mov	r4, r2
    a072:	4698      	mov	r8, r3
    a074:	4606      	mov	r6, r0
    a076:	b118      	cbz	r0, a080 <_vfiprintf_r+0x18>
    a078:	6983      	ldr	r3, [r0, #24]
    a07a:	b90b      	cbnz	r3, a080 <_vfiprintf_r+0x18>
    a07c:	f000 fae4 	bl	a648 <__sinit>
    a080:	4b89      	ldr	r3, [pc, #548]	; (a2a8 <_vfiprintf_r+0x240>)
    a082:	429d      	cmp	r5, r3
    a084:	d11b      	bne.n	a0be <_vfiprintf_r+0x56>
    a086:	6875      	ldr	r5, [r6, #4]
    a088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a08a:	07d9      	lsls	r1, r3, #31
    a08c:	d405      	bmi.n	a09a <_vfiprintf_r+0x32>
    a08e:	89ab      	ldrh	r3, [r5, #12]
    a090:	059a      	lsls	r2, r3, #22
    a092:	d402      	bmi.n	a09a <_vfiprintf_r+0x32>
    a094:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a096:	f001 fdb6 	bl	bc06 <__retarget_lock_acquire_recursive>
    a09a:	89ab      	ldrh	r3, [r5, #12]
    a09c:	071b      	lsls	r3, r3, #28
    a09e:	d501      	bpl.n	a0a4 <_vfiprintf_r+0x3c>
    a0a0:	692b      	ldr	r3, [r5, #16]
    a0a2:	b9eb      	cbnz	r3, a0e0 <_vfiprintf_r+0x78>
    a0a4:	4629      	mov	r1, r5
    a0a6:	4630      	mov	r0, r6
    a0a8:	f000 f960 	bl	a36c <__swsetup_r>
    a0ac:	b1c0      	cbz	r0, a0e0 <_vfiprintf_r+0x78>
    a0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a0b0:	07dc      	lsls	r4, r3, #31
    a0b2:	d50e      	bpl.n	a0d2 <_vfiprintf_r+0x6a>
    a0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a0b8:	b01d      	add	sp, #116	; 0x74
    a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0be:	4b7b      	ldr	r3, [pc, #492]	; (a2ac <_vfiprintf_r+0x244>)
    a0c0:	429d      	cmp	r5, r3
    a0c2:	d101      	bne.n	a0c8 <_vfiprintf_r+0x60>
    a0c4:	68b5      	ldr	r5, [r6, #8]
    a0c6:	e7df      	b.n	a088 <_vfiprintf_r+0x20>
    a0c8:	4b79      	ldr	r3, [pc, #484]	; (a2b0 <_vfiprintf_r+0x248>)
    a0ca:	429d      	cmp	r5, r3
    a0cc:	bf08      	it	eq
    a0ce:	68f5      	ldreq	r5, [r6, #12]
    a0d0:	e7da      	b.n	a088 <_vfiprintf_r+0x20>
    a0d2:	89ab      	ldrh	r3, [r5, #12]
    a0d4:	0598      	lsls	r0, r3, #22
    a0d6:	d4ed      	bmi.n	a0b4 <_vfiprintf_r+0x4c>
    a0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a0da:	f001 fd9a 	bl	bc12 <__retarget_lock_release_recursive>
    a0de:	e7e9      	b.n	a0b4 <_vfiprintf_r+0x4c>
    a0e0:	2300      	movs	r3, #0
    a0e2:	9309      	str	r3, [sp, #36]	; 0x24
    a0e4:	2320      	movs	r3, #32
    a0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a0ea:	f8cd 800c 	str.w	r8, [sp, #12]
    a0ee:	2330      	movs	r3, #48	; 0x30
    a0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; a2b4 <_vfiprintf_r+0x24c>
    a0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a0f8:	f04f 0901 	mov.w	r9, #1
    a0fc:	4623      	mov	r3, r4
    a0fe:	469a      	mov	sl, r3
    a100:	f813 2b01 	ldrb.w	r2, [r3], #1
    a104:	b10a      	cbz	r2, a10a <_vfiprintf_r+0xa2>
    a106:	2a25      	cmp	r2, #37	; 0x25
    a108:	d1f9      	bne.n	a0fe <_vfiprintf_r+0x96>
    a10a:	ebba 0b04 	subs.w	fp, sl, r4
    a10e:	d00b      	beq.n	a128 <_vfiprintf_r+0xc0>
    a110:	465b      	mov	r3, fp
    a112:	4622      	mov	r2, r4
    a114:	4629      	mov	r1, r5
    a116:	4630      	mov	r0, r6
    a118:	f003 f800 	bl	d11c <__sfputs_r>
    a11c:	3001      	adds	r0, #1
    a11e:	f000 80aa 	beq.w	a276 <_vfiprintf_r+0x20e>
    a122:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a124:	445a      	add	r2, fp
    a126:	9209      	str	r2, [sp, #36]	; 0x24
    a128:	f89a 3000 	ldrb.w	r3, [sl]
    a12c:	2b00      	cmp	r3, #0
    a12e:	f000 80a2 	beq.w	a276 <_vfiprintf_r+0x20e>
    a132:	2300      	movs	r3, #0
    a134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a138:	e9cd 2305 	strd	r2, r3, [sp, #20]
    a13c:	f10a 0a01 	add.w	sl, sl, #1
    a140:	9304      	str	r3, [sp, #16]
    a142:	9307      	str	r3, [sp, #28]
    a144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a148:	931a      	str	r3, [sp, #104]	; 0x68
    a14a:	4654      	mov	r4, sl
    a14c:	2205      	movs	r2, #5
    a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
    a152:	4858      	ldr	r0, [pc, #352]	; (a2b4 <_vfiprintf_r+0x24c>)
    a154:	f7f5 ffd4 	bl	100 <memchr>
    a158:	9a04      	ldr	r2, [sp, #16]
    a15a:	b9d8      	cbnz	r0, a194 <_vfiprintf_r+0x12c>
    a15c:	06d1      	lsls	r1, r2, #27
    a15e:	bf44      	itt	mi
    a160:	2320      	movmi	r3, #32
    a162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    a166:	0713      	lsls	r3, r2, #28
    a168:	bf44      	itt	mi
    a16a:	232b      	movmi	r3, #43	; 0x2b
    a16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    a170:	f89a 3000 	ldrb.w	r3, [sl]
    a174:	2b2a      	cmp	r3, #42	; 0x2a
    a176:	d015      	beq.n	a1a4 <_vfiprintf_r+0x13c>
    a178:	9a07      	ldr	r2, [sp, #28]
    a17a:	4654      	mov	r4, sl
    a17c:	2000      	movs	r0, #0
    a17e:	f04f 0c0a 	mov.w	ip, #10
    a182:	4621      	mov	r1, r4
    a184:	f811 3b01 	ldrb.w	r3, [r1], #1
    a188:	3b30      	subs	r3, #48	; 0x30
    a18a:	2b09      	cmp	r3, #9
    a18c:	d94e      	bls.n	a22c <_vfiprintf_r+0x1c4>
    a18e:	b1b0      	cbz	r0, a1be <_vfiprintf_r+0x156>
    a190:	9207      	str	r2, [sp, #28]
    a192:	e014      	b.n	a1be <_vfiprintf_r+0x156>
    a194:	eba0 0308 	sub.w	r3, r0, r8
    a198:	fa09 f303 	lsl.w	r3, r9, r3
    a19c:	4313      	orrs	r3, r2
    a19e:	9304      	str	r3, [sp, #16]
    a1a0:	46a2      	mov	sl, r4
    a1a2:	e7d2      	b.n	a14a <_vfiprintf_r+0xe2>
    a1a4:	9b03      	ldr	r3, [sp, #12]
    a1a6:	1d19      	adds	r1, r3, #4
    a1a8:	681b      	ldr	r3, [r3, #0]
    a1aa:	9103      	str	r1, [sp, #12]
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	bfbb      	ittet	lt
    a1b0:	425b      	neglt	r3, r3
    a1b2:	f042 0202 	orrlt.w	r2, r2, #2
    a1b6:	9307      	strge	r3, [sp, #28]
    a1b8:	9307      	strlt	r3, [sp, #28]
    a1ba:	bfb8      	it	lt
    a1bc:	9204      	strlt	r2, [sp, #16]
    a1be:	7823      	ldrb	r3, [r4, #0]
    a1c0:	2b2e      	cmp	r3, #46	; 0x2e
    a1c2:	d10c      	bne.n	a1de <_vfiprintf_r+0x176>
    a1c4:	7863      	ldrb	r3, [r4, #1]
    a1c6:	2b2a      	cmp	r3, #42	; 0x2a
    a1c8:	d135      	bne.n	a236 <_vfiprintf_r+0x1ce>
    a1ca:	9b03      	ldr	r3, [sp, #12]
    a1cc:	1d1a      	adds	r2, r3, #4
    a1ce:	681b      	ldr	r3, [r3, #0]
    a1d0:	9203      	str	r2, [sp, #12]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	bfb8      	it	lt
    a1d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    a1da:	3402      	adds	r4, #2
    a1dc:	9305      	str	r3, [sp, #20]
    a1de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; a2b8 <_vfiprintf_r+0x250>
    a1e2:	7821      	ldrb	r1, [r4, #0]
    a1e4:	2203      	movs	r2, #3
    a1e6:	4650      	mov	r0, sl
    a1e8:	f7f5 ff8a 	bl	100 <memchr>
    a1ec:	b140      	cbz	r0, a200 <_vfiprintf_r+0x198>
    a1ee:	2340      	movs	r3, #64	; 0x40
    a1f0:	eba0 000a 	sub.w	r0, r0, sl
    a1f4:	fa03 f000 	lsl.w	r0, r3, r0
    a1f8:	9b04      	ldr	r3, [sp, #16]
    a1fa:	4303      	orrs	r3, r0
    a1fc:	3401      	adds	r4, #1
    a1fe:	9304      	str	r3, [sp, #16]
    a200:	f814 1b01 	ldrb.w	r1, [r4], #1
    a204:	482d      	ldr	r0, [pc, #180]	; (a2bc <_vfiprintf_r+0x254>)
    a206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a20a:	2206      	movs	r2, #6
    a20c:	f7f5 ff78 	bl	100 <memchr>
    a210:	2800      	cmp	r0, #0
    a212:	d03f      	beq.n	a294 <_vfiprintf_r+0x22c>
    a214:	4b2a      	ldr	r3, [pc, #168]	; (a2c0 <_vfiprintf_r+0x258>)
    a216:	bb1b      	cbnz	r3, a260 <_vfiprintf_r+0x1f8>
    a218:	9b03      	ldr	r3, [sp, #12]
    a21a:	3307      	adds	r3, #7
    a21c:	f023 0307 	bic.w	r3, r3, #7
    a220:	3308      	adds	r3, #8
    a222:	9303      	str	r3, [sp, #12]
    a224:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a226:	443b      	add	r3, r7
    a228:	9309      	str	r3, [sp, #36]	; 0x24
    a22a:	e767      	b.n	a0fc <_vfiprintf_r+0x94>
    a22c:	fb0c 3202 	mla	r2, ip, r2, r3
    a230:	460c      	mov	r4, r1
    a232:	2001      	movs	r0, #1
    a234:	e7a5      	b.n	a182 <_vfiprintf_r+0x11a>
    a236:	2300      	movs	r3, #0
    a238:	3401      	adds	r4, #1
    a23a:	9305      	str	r3, [sp, #20]
    a23c:	4619      	mov	r1, r3
    a23e:	f04f 0c0a 	mov.w	ip, #10
    a242:	4620      	mov	r0, r4
    a244:	f810 2b01 	ldrb.w	r2, [r0], #1
    a248:	3a30      	subs	r2, #48	; 0x30
    a24a:	2a09      	cmp	r2, #9
    a24c:	d903      	bls.n	a256 <_vfiprintf_r+0x1ee>
    a24e:	2b00      	cmp	r3, #0
    a250:	d0c5      	beq.n	a1de <_vfiprintf_r+0x176>
    a252:	9105      	str	r1, [sp, #20]
    a254:	e7c3      	b.n	a1de <_vfiprintf_r+0x176>
    a256:	fb0c 2101 	mla	r1, ip, r1, r2
    a25a:	4604      	mov	r4, r0
    a25c:	2301      	movs	r3, #1
    a25e:	e7f0      	b.n	a242 <_vfiprintf_r+0x1da>
    a260:	ab03      	add	r3, sp, #12
    a262:	9300      	str	r3, [sp, #0]
    a264:	462a      	mov	r2, r5
    a266:	4b17      	ldr	r3, [pc, #92]	; (a2c4 <_vfiprintf_r+0x25c>)
    a268:	a904      	add	r1, sp, #16
    a26a:	4630      	mov	r0, r6
    a26c:	f7fe fe12 	bl	8e94 <_printf_float>
    a270:	4607      	mov	r7, r0
    a272:	1c78      	adds	r0, r7, #1
    a274:	d1d6      	bne.n	a224 <_vfiprintf_r+0x1bc>
    a276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a278:	07d9      	lsls	r1, r3, #31
    a27a:	d405      	bmi.n	a288 <_vfiprintf_r+0x220>
    a27c:	89ab      	ldrh	r3, [r5, #12]
    a27e:	059a      	lsls	r2, r3, #22
    a280:	d402      	bmi.n	a288 <_vfiprintf_r+0x220>
    a282:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a284:	f001 fcc5 	bl	bc12 <__retarget_lock_release_recursive>
    a288:	89ab      	ldrh	r3, [r5, #12]
    a28a:	065b      	lsls	r3, r3, #25
    a28c:	f53f af12 	bmi.w	a0b4 <_vfiprintf_r+0x4c>
    a290:	9809      	ldr	r0, [sp, #36]	; 0x24
    a292:	e711      	b.n	a0b8 <_vfiprintf_r+0x50>
    a294:	ab03      	add	r3, sp, #12
    a296:	9300      	str	r3, [sp, #0]
    a298:	462a      	mov	r2, r5
    a29a:	4b0a      	ldr	r3, [pc, #40]	; (a2c4 <_vfiprintf_r+0x25c>)
    a29c:	a904      	add	r1, sp, #16
    a29e:	4630      	mov	r0, r6
    a2a0:	f7ff f822 	bl	92e8 <_printf_i>
    a2a4:	e7e4      	b.n	a270 <_vfiprintf_r+0x208>
    a2a6:	bf00      	nop
    a2a8:	0000dd58 	.word	0x0000dd58
    a2ac:	0000dd78 	.word	0x0000dd78
    a2b0:	0000dd38 	.word	0x0000dd38
    a2b4:	0000f017 	.word	0x0000f017
    a2b8:	0000f01d 	.word	0x0000f01d
    a2bc:	0000f021 	.word	0x0000f021
    a2c0:	00008e95 	.word	0x00008e95
    a2c4:	0000d11d 	.word	0x0000d11d

0000a2c8 <__swbuf_r>:
    a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2ca:	460e      	mov	r6, r1
    a2cc:	4614      	mov	r4, r2
    a2ce:	4605      	mov	r5, r0
    a2d0:	b118      	cbz	r0, a2da <__swbuf_r+0x12>
    a2d2:	6983      	ldr	r3, [r0, #24]
    a2d4:	b90b      	cbnz	r3, a2da <__swbuf_r+0x12>
    a2d6:	f000 f9b7 	bl	a648 <__sinit>
    a2da:	4b21      	ldr	r3, [pc, #132]	; (a360 <__swbuf_r+0x98>)
    a2dc:	429c      	cmp	r4, r3
    a2de:	d12b      	bne.n	a338 <__swbuf_r+0x70>
    a2e0:	686c      	ldr	r4, [r5, #4]
    a2e2:	69a3      	ldr	r3, [r4, #24]
    a2e4:	60a3      	str	r3, [r4, #8]
    a2e6:	89a3      	ldrh	r3, [r4, #12]
    a2e8:	071a      	lsls	r2, r3, #28
    a2ea:	d52f      	bpl.n	a34c <__swbuf_r+0x84>
    a2ec:	6923      	ldr	r3, [r4, #16]
    a2ee:	b36b      	cbz	r3, a34c <__swbuf_r+0x84>
    a2f0:	6923      	ldr	r3, [r4, #16]
    a2f2:	6820      	ldr	r0, [r4, #0]
    a2f4:	1ac0      	subs	r0, r0, r3
    a2f6:	6963      	ldr	r3, [r4, #20]
    a2f8:	b2f6      	uxtb	r6, r6
    a2fa:	4283      	cmp	r3, r0
    a2fc:	4637      	mov	r7, r6
    a2fe:	dc04      	bgt.n	a30a <__swbuf_r+0x42>
    a300:	4621      	mov	r1, r4
    a302:	4628      	mov	r0, r5
    a304:	f000 f922 	bl	a54c <_fflush_r>
    a308:	bb30      	cbnz	r0, a358 <__swbuf_r+0x90>
    a30a:	68a3      	ldr	r3, [r4, #8]
    a30c:	3b01      	subs	r3, #1
    a30e:	60a3      	str	r3, [r4, #8]
    a310:	6823      	ldr	r3, [r4, #0]
    a312:	1c5a      	adds	r2, r3, #1
    a314:	6022      	str	r2, [r4, #0]
    a316:	701e      	strb	r6, [r3, #0]
    a318:	6963      	ldr	r3, [r4, #20]
    a31a:	3001      	adds	r0, #1
    a31c:	4283      	cmp	r3, r0
    a31e:	d004      	beq.n	a32a <__swbuf_r+0x62>
    a320:	89a3      	ldrh	r3, [r4, #12]
    a322:	07db      	lsls	r3, r3, #31
    a324:	d506      	bpl.n	a334 <__swbuf_r+0x6c>
    a326:	2e0a      	cmp	r6, #10
    a328:	d104      	bne.n	a334 <__swbuf_r+0x6c>
    a32a:	4621      	mov	r1, r4
    a32c:	4628      	mov	r0, r5
    a32e:	f000 f90d 	bl	a54c <_fflush_r>
    a332:	b988      	cbnz	r0, a358 <__swbuf_r+0x90>
    a334:	4638      	mov	r0, r7
    a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a338:	4b0a      	ldr	r3, [pc, #40]	; (a364 <__swbuf_r+0x9c>)
    a33a:	429c      	cmp	r4, r3
    a33c:	d101      	bne.n	a342 <__swbuf_r+0x7a>
    a33e:	68ac      	ldr	r4, [r5, #8]
    a340:	e7cf      	b.n	a2e2 <__swbuf_r+0x1a>
    a342:	4b09      	ldr	r3, [pc, #36]	; (a368 <__swbuf_r+0xa0>)
    a344:	429c      	cmp	r4, r3
    a346:	bf08      	it	eq
    a348:	68ec      	ldreq	r4, [r5, #12]
    a34a:	e7ca      	b.n	a2e2 <__swbuf_r+0x1a>
    a34c:	4621      	mov	r1, r4
    a34e:	4628      	mov	r0, r5
    a350:	f000 f80c 	bl	a36c <__swsetup_r>
    a354:	2800      	cmp	r0, #0
    a356:	d0cb      	beq.n	a2f0 <__swbuf_r+0x28>
    a358:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    a35c:	e7ea      	b.n	a334 <__swbuf_r+0x6c>
    a35e:	bf00      	nop
    a360:	0000dd58 	.word	0x0000dd58
    a364:	0000dd78 	.word	0x0000dd78
    a368:	0000dd38 	.word	0x0000dd38

0000a36c <__swsetup_r>:
    a36c:	4b32      	ldr	r3, [pc, #200]	; (a438 <__swsetup_r+0xcc>)
    a36e:	b570      	push	{r4, r5, r6, lr}
    a370:	681d      	ldr	r5, [r3, #0]
    a372:	4606      	mov	r6, r0
    a374:	460c      	mov	r4, r1
    a376:	b125      	cbz	r5, a382 <__swsetup_r+0x16>
    a378:	69ab      	ldr	r3, [r5, #24]
    a37a:	b913      	cbnz	r3, a382 <__swsetup_r+0x16>
    a37c:	4628      	mov	r0, r5
    a37e:	f000 f963 	bl	a648 <__sinit>
    a382:	4b2e      	ldr	r3, [pc, #184]	; (a43c <__swsetup_r+0xd0>)
    a384:	429c      	cmp	r4, r3
    a386:	d10f      	bne.n	a3a8 <__swsetup_r+0x3c>
    a388:	686c      	ldr	r4, [r5, #4]
    a38a:	89a3      	ldrh	r3, [r4, #12]
    a38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a390:	0719      	lsls	r1, r3, #28
    a392:	d42c      	bmi.n	a3ee <__swsetup_r+0x82>
    a394:	06dd      	lsls	r5, r3, #27
    a396:	d411      	bmi.n	a3bc <__swsetup_r+0x50>
    a398:	2309      	movs	r3, #9
    a39a:	6033      	str	r3, [r6, #0]
    a39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    a3a0:	81a3      	strh	r3, [r4, #12]
    a3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a3a6:	e03e      	b.n	a426 <__swsetup_r+0xba>
    a3a8:	4b25      	ldr	r3, [pc, #148]	; (a440 <__swsetup_r+0xd4>)
    a3aa:	429c      	cmp	r4, r3
    a3ac:	d101      	bne.n	a3b2 <__swsetup_r+0x46>
    a3ae:	68ac      	ldr	r4, [r5, #8]
    a3b0:	e7eb      	b.n	a38a <__swsetup_r+0x1e>
    a3b2:	4b24      	ldr	r3, [pc, #144]	; (a444 <__swsetup_r+0xd8>)
    a3b4:	429c      	cmp	r4, r3
    a3b6:	bf08      	it	eq
    a3b8:	68ec      	ldreq	r4, [r5, #12]
    a3ba:	e7e6      	b.n	a38a <__swsetup_r+0x1e>
    a3bc:	0758      	lsls	r0, r3, #29
    a3be:	d512      	bpl.n	a3e6 <__swsetup_r+0x7a>
    a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a3c2:	b141      	cbz	r1, a3d6 <__swsetup_r+0x6a>
    a3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    a3c8:	4299      	cmp	r1, r3
    a3ca:	d002      	beq.n	a3d2 <__swsetup_r+0x66>
    a3cc:	4630      	mov	r0, r6
    a3ce:	f7fe fcbd 	bl	8d4c <_free_r>
    a3d2:	2300      	movs	r3, #0
    a3d4:	6363      	str	r3, [r4, #52]	; 0x34
    a3d6:	89a3      	ldrh	r3, [r4, #12]
    a3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    a3dc:	81a3      	strh	r3, [r4, #12]
    a3de:	2300      	movs	r3, #0
    a3e0:	6063      	str	r3, [r4, #4]
    a3e2:	6923      	ldr	r3, [r4, #16]
    a3e4:	6023      	str	r3, [r4, #0]
    a3e6:	89a3      	ldrh	r3, [r4, #12]
    a3e8:	f043 0308 	orr.w	r3, r3, #8
    a3ec:	81a3      	strh	r3, [r4, #12]
    a3ee:	6923      	ldr	r3, [r4, #16]
    a3f0:	b94b      	cbnz	r3, a406 <__swsetup_r+0x9a>
    a3f2:	89a3      	ldrh	r3, [r4, #12]
    a3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
    a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a3fc:	d003      	beq.n	a406 <__swsetup_r+0x9a>
    a3fe:	4621      	mov	r1, r4
    a400:	4630      	mov	r0, r6
    a402:	f000 f99f 	bl	a744 <__smakebuf_r>
    a406:	89a0      	ldrh	r0, [r4, #12]
    a408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a40c:	f010 0301 	ands.w	r3, r0, #1
    a410:	d00a      	beq.n	a428 <__swsetup_r+0xbc>
    a412:	2300      	movs	r3, #0
    a414:	60a3      	str	r3, [r4, #8]
    a416:	6963      	ldr	r3, [r4, #20]
    a418:	425b      	negs	r3, r3
    a41a:	61a3      	str	r3, [r4, #24]
    a41c:	6923      	ldr	r3, [r4, #16]
    a41e:	b943      	cbnz	r3, a432 <__swsetup_r+0xc6>
    a420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    a424:	d1ba      	bne.n	a39c <__swsetup_r+0x30>
    a426:	bd70      	pop	{r4, r5, r6, pc}
    a428:	0781      	lsls	r1, r0, #30
    a42a:	bf58      	it	pl
    a42c:	6963      	ldrpl	r3, [r4, #20]
    a42e:	60a3      	str	r3, [r4, #8]
    a430:	e7f4      	b.n	a41c <__swsetup_r+0xb0>
    a432:	2000      	movs	r0, #0
    a434:	e7f7      	b.n	a426 <__swsetup_r+0xba>
    a436:	bf00      	nop
    a438:	20000178 	.word	0x20000178
    a43c:	0000dd58 	.word	0x0000dd58
    a440:	0000dd78 	.word	0x0000dd78
    a444:	0000dd38 	.word	0x0000dd38

0000a448 <__sflush_r>:
    a448:	898a      	ldrh	r2, [r1, #12]
    a44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a44c:	4605      	mov	r5, r0
    a44e:	0710      	lsls	r0, r2, #28
    a450:	460c      	mov	r4, r1
    a452:	d457      	bmi.n	a504 <__sflush_r+0xbc>
    a454:	684b      	ldr	r3, [r1, #4]
    a456:	2b00      	cmp	r3, #0
    a458:	dc04      	bgt.n	a464 <__sflush_r+0x1c>
    a45a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a45c:	2b00      	cmp	r3, #0
    a45e:	dc01      	bgt.n	a464 <__sflush_r+0x1c>
    a460:	2000      	movs	r0, #0
    a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    a466:	2e00      	cmp	r6, #0
    a468:	d0fa      	beq.n	a460 <__sflush_r+0x18>
    a46a:	2300      	movs	r3, #0
    a46c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    a470:	682f      	ldr	r7, [r5, #0]
    a472:	602b      	str	r3, [r5, #0]
    a474:	d032      	beq.n	a4dc <__sflush_r+0x94>
    a476:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a478:	89a3      	ldrh	r3, [r4, #12]
    a47a:	075a      	lsls	r2, r3, #29
    a47c:	d505      	bpl.n	a48a <__sflush_r+0x42>
    a47e:	6863      	ldr	r3, [r4, #4]
    a480:	1ac0      	subs	r0, r0, r3
    a482:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a484:	b10b      	cbz	r3, a48a <__sflush_r+0x42>
    a486:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a488:	1ac0      	subs	r0, r0, r3
    a48a:	2300      	movs	r3, #0
    a48c:	4602      	mov	r2, r0
    a48e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    a490:	6a21      	ldr	r1, [r4, #32]
    a492:	4628      	mov	r0, r5
    a494:	47b0      	blx	r6
    a496:	1c43      	adds	r3, r0, #1
    a498:	89a3      	ldrh	r3, [r4, #12]
    a49a:	d106      	bne.n	a4aa <__sflush_r+0x62>
    a49c:	6829      	ldr	r1, [r5, #0]
    a49e:	291d      	cmp	r1, #29
    a4a0:	d82c      	bhi.n	a4fc <__sflush_r+0xb4>
    a4a2:	4a29      	ldr	r2, [pc, #164]	; (a548 <__sflush_r+0x100>)
    a4a4:	40ca      	lsrs	r2, r1
    a4a6:	07d6      	lsls	r6, r2, #31
    a4a8:	d528      	bpl.n	a4fc <__sflush_r+0xb4>
    a4aa:	2200      	movs	r2, #0
    a4ac:	6062      	str	r2, [r4, #4]
    a4ae:	04d9      	lsls	r1, r3, #19
    a4b0:	6922      	ldr	r2, [r4, #16]
    a4b2:	6022      	str	r2, [r4, #0]
    a4b4:	d504      	bpl.n	a4c0 <__sflush_r+0x78>
    a4b6:	1c42      	adds	r2, r0, #1
    a4b8:	d101      	bne.n	a4be <__sflush_r+0x76>
    a4ba:	682b      	ldr	r3, [r5, #0]
    a4bc:	b903      	cbnz	r3, a4c0 <__sflush_r+0x78>
    a4be:	6560      	str	r0, [r4, #84]	; 0x54
    a4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a4c2:	602f      	str	r7, [r5, #0]
    a4c4:	2900      	cmp	r1, #0
    a4c6:	d0cb      	beq.n	a460 <__sflush_r+0x18>
    a4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    a4cc:	4299      	cmp	r1, r3
    a4ce:	d002      	beq.n	a4d6 <__sflush_r+0x8e>
    a4d0:	4628      	mov	r0, r5
    a4d2:	f7fe fc3b 	bl	8d4c <_free_r>
    a4d6:	2000      	movs	r0, #0
    a4d8:	6360      	str	r0, [r4, #52]	; 0x34
    a4da:	e7c2      	b.n	a462 <__sflush_r+0x1a>
    a4dc:	6a21      	ldr	r1, [r4, #32]
    a4de:	2301      	movs	r3, #1
    a4e0:	4628      	mov	r0, r5
    a4e2:	47b0      	blx	r6
    a4e4:	1c41      	adds	r1, r0, #1
    a4e6:	d1c7      	bne.n	a478 <__sflush_r+0x30>
    a4e8:	682b      	ldr	r3, [r5, #0]
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d0c4      	beq.n	a478 <__sflush_r+0x30>
    a4ee:	2b1d      	cmp	r3, #29
    a4f0:	d001      	beq.n	a4f6 <__sflush_r+0xae>
    a4f2:	2b16      	cmp	r3, #22
    a4f4:	d101      	bne.n	a4fa <__sflush_r+0xb2>
    a4f6:	602f      	str	r7, [r5, #0]
    a4f8:	e7b2      	b.n	a460 <__sflush_r+0x18>
    a4fa:	89a3      	ldrh	r3, [r4, #12]
    a4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a500:	81a3      	strh	r3, [r4, #12]
    a502:	e7ae      	b.n	a462 <__sflush_r+0x1a>
    a504:	690f      	ldr	r7, [r1, #16]
    a506:	2f00      	cmp	r7, #0
    a508:	d0aa      	beq.n	a460 <__sflush_r+0x18>
    a50a:	0793      	lsls	r3, r2, #30
    a50c:	680e      	ldr	r6, [r1, #0]
    a50e:	bf08      	it	eq
    a510:	694b      	ldreq	r3, [r1, #20]
    a512:	600f      	str	r7, [r1, #0]
    a514:	bf18      	it	ne
    a516:	2300      	movne	r3, #0
    a518:	1bf6      	subs	r6, r6, r7
    a51a:	608b      	str	r3, [r1, #8]
    a51c:	2e00      	cmp	r6, #0
    a51e:	dd9f      	ble.n	a460 <__sflush_r+0x18>
    a520:	6a21      	ldr	r1, [r4, #32]
    a522:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    a526:	4633      	mov	r3, r6
    a528:	463a      	mov	r2, r7
    a52a:	4628      	mov	r0, r5
    a52c:	47e0      	blx	ip
    a52e:	2800      	cmp	r0, #0
    a530:	dc06      	bgt.n	a540 <__sflush_r+0xf8>
    a532:	89a3      	ldrh	r3, [r4, #12]
    a534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a538:	81a3      	strh	r3, [r4, #12]
    a53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a53e:	e790      	b.n	a462 <__sflush_r+0x1a>
    a540:	4407      	add	r7, r0
    a542:	1a36      	subs	r6, r6, r0
    a544:	e7ea      	b.n	a51c <__sflush_r+0xd4>
    a546:	bf00      	nop
    a548:	20400001 	.word	0x20400001

0000a54c <_fflush_r>:
    a54c:	b538      	push	{r3, r4, r5, lr}
    a54e:	690b      	ldr	r3, [r1, #16]
    a550:	4605      	mov	r5, r0
    a552:	460c      	mov	r4, r1
    a554:	b913      	cbnz	r3, a55c <_fflush_r+0x10>
    a556:	2500      	movs	r5, #0
    a558:	4628      	mov	r0, r5
    a55a:	bd38      	pop	{r3, r4, r5, pc}
    a55c:	b118      	cbz	r0, a566 <_fflush_r+0x1a>
    a55e:	6983      	ldr	r3, [r0, #24]
    a560:	b90b      	cbnz	r3, a566 <_fflush_r+0x1a>
    a562:	f000 f871 	bl	a648 <__sinit>
    a566:	4b14      	ldr	r3, [pc, #80]	; (a5b8 <_fflush_r+0x6c>)
    a568:	429c      	cmp	r4, r3
    a56a:	d11b      	bne.n	a5a4 <_fflush_r+0x58>
    a56c:	686c      	ldr	r4, [r5, #4]
    a56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a572:	2b00      	cmp	r3, #0
    a574:	d0ef      	beq.n	a556 <_fflush_r+0xa>
    a576:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a578:	07d0      	lsls	r0, r2, #31
    a57a:	d404      	bmi.n	a586 <_fflush_r+0x3a>
    a57c:	0599      	lsls	r1, r3, #22
    a57e:	d402      	bmi.n	a586 <_fflush_r+0x3a>
    a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a582:	f001 fb40 	bl	bc06 <__retarget_lock_acquire_recursive>
    a586:	4628      	mov	r0, r5
    a588:	4621      	mov	r1, r4
    a58a:	f7ff ff5d 	bl	a448 <__sflush_r>
    a58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a590:	07da      	lsls	r2, r3, #31
    a592:	4605      	mov	r5, r0
    a594:	d4e0      	bmi.n	a558 <_fflush_r+0xc>
    a596:	89a3      	ldrh	r3, [r4, #12]
    a598:	059b      	lsls	r3, r3, #22
    a59a:	d4dd      	bmi.n	a558 <_fflush_r+0xc>
    a59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a59e:	f001 fb38 	bl	bc12 <__retarget_lock_release_recursive>
    a5a2:	e7d9      	b.n	a558 <_fflush_r+0xc>
    a5a4:	4b05      	ldr	r3, [pc, #20]	; (a5bc <_fflush_r+0x70>)
    a5a6:	429c      	cmp	r4, r3
    a5a8:	d101      	bne.n	a5ae <_fflush_r+0x62>
    a5aa:	68ac      	ldr	r4, [r5, #8]
    a5ac:	e7df      	b.n	a56e <_fflush_r+0x22>
    a5ae:	4b04      	ldr	r3, [pc, #16]	; (a5c0 <_fflush_r+0x74>)
    a5b0:	429c      	cmp	r4, r3
    a5b2:	bf08      	it	eq
    a5b4:	68ec      	ldreq	r4, [r5, #12]
    a5b6:	e7da      	b.n	a56e <_fflush_r+0x22>
    a5b8:	0000dd58 	.word	0x0000dd58
    a5bc:	0000dd78 	.word	0x0000dd78
    a5c0:	0000dd38 	.word	0x0000dd38

0000a5c4 <std>:
    a5c4:	2300      	movs	r3, #0
    a5c6:	b510      	push	{r4, lr}
    a5c8:	4604      	mov	r4, r0
    a5ca:	e9c0 3300 	strd	r3, r3, [r0]
    a5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
    a5d2:	6083      	str	r3, [r0, #8]
    a5d4:	8181      	strh	r1, [r0, #12]
    a5d6:	6643      	str	r3, [r0, #100]	; 0x64
    a5d8:	81c2      	strh	r2, [r0, #14]
    a5da:	6183      	str	r3, [r0, #24]
    a5dc:	4619      	mov	r1, r3
    a5de:	2208      	movs	r2, #8
    a5e0:	305c      	adds	r0, #92	; 0x5c
    a5e2:	f002 fa85 	bl	caf0 <memset>
    a5e6:	4b05      	ldr	r3, [pc, #20]	; (a5fc <std+0x38>)
    a5e8:	6263      	str	r3, [r4, #36]	; 0x24
    a5ea:	4b05      	ldr	r3, [pc, #20]	; (a600 <std+0x3c>)
    a5ec:	62a3      	str	r3, [r4, #40]	; 0x28
    a5ee:	4b05      	ldr	r3, [pc, #20]	; (a604 <std+0x40>)
    a5f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    a5f2:	4b05      	ldr	r3, [pc, #20]	; (a608 <std+0x44>)
    a5f4:	6224      	str	r4, [r4, #32]
    a5f6:	6323      	str	r3, [r4, #48]	; 0x30
    a5f8:	bd10      	pop	{r4, pc}
    a5fa:	bf00      	nop
    a5fc:	0000d281 	.word	0x0000d281
    a600:	0000d2a3 	.word	0x0000d2a3
    a604:	0000d2db 	.word	0x0000d2db
    a608:	0000d2ff 	.word	0x0000d2ff

0000a60c <_cleanup_r>:
    a60c:	4901      	ldr	r1, [pc, #4]	; (a614 <_cleanup_r+0x8>)
    a60e:	f002 bdc1 	b.w	d194 <_fwalk_reent>
    a612:	bf00      	nop
    a614:	0000a54d 	.word	0x0000a54d

0000a618 <__sfp_lock_acquire>:
    a618:	4801      	ldr	r0, [pc, #4]	; (a620 <__sfp_lock_acquire+0x8>)
    a61a:	f001 baf4 	b.w	bc06 <__retarget_lock_acquire_recursive>
    a61e:	bf00      	nop
    a620:	20000370 	.word	0x20000370

0000a624 <__sfp_lock_release>:
    a624:	4801      	ldr	r0, [pc, #4]	; (a62c <__sfp_lock_release+0x8>)
    a626:	f001 baf4 	b.w	bc12 <__retarget_lock_release_recursive>
    a62a:	bf00      	nop
    a62c:	20000370 	.word	0x20000370

0000a630 <__sinit_lock_acquire>:
    a630:	4801      	ldr	r0, [pc, #4]	; (a638 <__sinit_lock_acquire+0x8>)
    a632:	f001 bae8 	b.w	bc06 <__retarget_lock_acquire_recursive>
    a636:	bf00      	nop
    a638:	20000384 	.word	0x20000384

0000a63c <__sinit_lock_release>:
    a63c:	4801      	ldr	r0, [pc, #4]	; (a644 <__sinit_lock_release+0x8>)
    a63e:	f001 bae8 	b.w	bc12 <__retarget_lock_release_recursive>
    a642:	bf00      	nop
    a644:	20000384 	.word	0x20000384

0000a648 <__sinit>:
    a648:	b510      	push	{r4, lr}
    a64a:	4604      	mov	r4, r0
    a64c:	f7ff fff0 	bl	a630 <__sinit_lock_acquire>
    a650:	69a3      	ldr	r3, [r4, #24]
    a652:	b11b      	cbz	r3, a65c <__sinit+0x14>
    a654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a658:	f7ff bff0 	b.w	a63c <__sinit_lock_release>
    a65c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    a660:	6523      	str	r3, [r4, #80]	; 0x50
    a662:	4b13      	ldr	r3, [pc, #76]	; (a6b0 <__sinit+0x68>)
    a664:	4a13      	ldr	r2, [pc, #76]	; (a6b4 <__sinit+0x6c>)
    a666:	681b      	ldr	r3, [r3, #0]
    a668:	62a2      	str	r2, [r4, #40]	; 0x28
    a66a:	42a3      	cmp	r3, r4
    a66c:	bf04      	itt	eq
    a66e:	2301      	moveq	r3, #1
    a670:	61a3      	streq	r3, [r4, #24]
    a672:	4620      	mov	r0, r4
    a674:	f000 f820 	bl	a6b8 <__sfp>
    a678:	6060      	str	r0, [r4, #4]
    a67a:	4620      	mov	r0, r4
    a67c:	f000 f81c 	bl	a6b8 <__sfp>
    a680:	60a0      	str	r0, [r4, #8]
    a682:	4620      	mov	r0, r4
    a684:	f000 f818 	bl	a6b8 <__sfp>
    a688:	2200      	movs	r2, #0
    a68a:	60e0      	str	r0, [r4, #12]
    a68c:	2104      	movs	r1, #4
    a68e:	6860      	ldr	r0, [r4, #4]
    a690:	f7ff ff98 	bl	a5c4 <std>
    a694:	68a0      	ldr	r0, [r4, #8]
    a696:	2201      	movs	r2, #1
    a698:	2109      	movs	r1, #9
    a69a:	f7ff ff93 	bl	a5c4 <std>
    a69e:	68e0      	ldr	r0, [r4, #12]
    a6a0:	2202      	movs	r2, #2
    a6a2:	2112      	movs	r1, #18
    a6a4:	f7ff ff8e 	bl	a5c4 <std>
    a6a8:	2301      	movs	r3, #1
    a6aa:	61a3      	str	r3, [r4, #24]
    a6ac:	e7d2      	b.n	a654 <__sinit+0xc>
    a6ae:	bf00      	nop
    a6b0:	0000dd28 	.word	0x0000dd28
    a6b4:	0000a60d 	.word	0x0000a60d

0000a6b8 <__sfp>:
    a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ba:	4607      	mov	r7, r0
    a6bc:	f7ff ffac 	bl	a618 <__sfp_lock_acquire>
    a6c0:	4b1e      	ldr	r3, [pc, #120]	; (a73c <__sfp+0x84>)
    a6c2:	681e      	ldr	r6, [r3, #0]
    a6c4:	69b3      	ldr	r3, [r6, #24]
    a6c6:	b913      	cbnz	r3, a6ce <__sfp+0x16>
    a6c8:	4630      	mov	r0, r6
    a6ca:	f7ff ffbd 	bl	a648 <__sinit>
    a6ce:	3648      	adds	r6, #72	; 0x48
    a6d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    a6d4:	3b01      	subs	r3, #1
    a6d6:	d503      	bpl.n	a6e0 <__sfp+0x28>
    a6d8:	6833      	ldr	r3, [r6, #0]
    a6da:	b30b      	cbz	r3, a720 <__sfp+0x68>
    a6dc:	6836      	ldr	r6, [r6, #0]
    a6de:	e7f7      	b.n	a6d0 <__sfp+0x18>
    a6e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    a6e4:	b9d5      	cbnz	r5, a71c <__sfp+0x64>
    a6e6:	4b16      	ldr	r3, [pc, #88]	; (a740 <__sfp+0x88>)
    a6e8:	60e3      	str	r3, [r4, #12]
    a6ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a6ee:	6665      	str	r5, [r4, #100]	; 0x64
    a6f0:	f001 fa7f 	bl	bbf2 <__retarget_lock_init_recursive>
    a6f4:	f7ff ff96 	bl	a624 <__sfp_lock_release>
    a6f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
    a6fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
    a700:	6025      	str	r5, [r4, #0]
    a702:	61a5      	str	r5, [r4, #24]
    a704:	2208      	movs	r2, #8
    a706:	4629      	mov	r1, r5
    a708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    a70c:	f002 f9f0 	bl	caf0 <memset>
    a710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    a714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    a718:	4620      	mov	r0, r4
    a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a71c:	3468      	adds	r4, #104	; 0x68
    a71e:	e7d9      	b.n	a6d4 <__sfp+0x1c>
    a720:	2104      	movs	r1, #4
    a722:	4638      	mov	r0, r7
    a724:	f002 fd20 	bl	d168 <__sfmoreglue>
    a728:	4604      	mov	r4, r0
    a72a:	6030      	str	r0, [r6, #0]
    a72c:	2800      	cmp	r0, #0
    a72e:	d1d5      	bne.n	a6dc <__sfp+0x24>
    a730:	f7ff ff78 	bl	a624 <__sfp_lock_release>
    a734:	230c      	movs	r3, #12
    a736:	603b      	str	r3, [r7, #0]
    a738:	e7ee      	b.n	a718 <__sfp+0x60>
    a73a:	bf00      	nop
    a73c:	0000dd28 	.word	0x0000dd28
    a740:	ffff0001 	.word	0xffff0001

0000a744 <__smakebuf_r>:
    a744:	898b      	ldrh	r3, [r1, #12]
    a746:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a748:	079d      	lsls	r5, r3, #30
    a74a:	4606      	mov	r6, r0
    a74c:	460c      	mov	r4, r1
    a74e:	d507      	bpl.n	a760 <__smakebuf_r+0x1c>
    a750:	f104 0347 	add.w	r3, r4, #71	; 0x47
    a754:	6023      	str	r3, [r4, #0]
    a756:	6123      	str	r3, [r4, #16]
    a758:	2301      	movs	r3, #1
    a75a:	6163      	str	r3, [r4, #20]
    a75c:	b002      	add	sp, #8
    a75e:	bd70      	pop	{r4, r5, r6, pc}
    a760:	ab01      	add	r3, sp, #4
    a762:	466a      	mov	r2, sp
    a764:	f002 fd35 	bl	d1d2 <__swhatbuf_r>
    a768:	9900      	ldr	r1, [sp, #0]
    a76a:	4605      	mov	r5, r0
    a76c:	4630      	mov	r0, r6
    a76e:	f7fe fb37 	bl	8de0 <_malloc_r>
    a772:	b948      	cbnz	r0, a788 <__smakebuf_r+0x44>
    a774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a778:	059a      	lsls	r2, r3, #22
    a77a:	d4ef      	bmi.n	a75c <__smakebuf_r+0x18>
    a77c:	f023 0303 	bic.w	r3, r3, #3
    a780:	f043 0302 	orr.w	r3, r3, #2
    a784:	81a3      	strh	r3, [r4, #12]
    a786:	e7e3      	b.n	a750 <__smakebuf_r+0xc>
    a788:	4b0d      	ldr	r3, [pc, #52]	; (a7c0 <__smakebuf_r+0x7c>)
    a78a:	62b3      	str	r3, [r6, #40]	; 0x28
    a78c:	89a3      	ldrh	r3, [r4, #12]
    a78e:	6020      	str	r0, [r4, #0]
    a790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a794:	81a3      	strh	r3, [r4, #12]
    a796:	9b00      	ldr	r3, [sp, #0]
    a798:	6163      	str	r3, [r4, #20]
    a79a:	9b01      	ldr	r3, [sp, #4]
    a79c:	6120      	str	r0, [r4, #16]
    a79e:	b15b      	cbz	r3, a7b8 <__smakebuf_r+0x74>
    a7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a7a4:	4630      	mov	r0, r6
    a7a6:	f000 f85b 	bl	a860 <_isatty_r>
    a7aa:	b128      	cbz	r0, a7b8 <__smakebuf_r+0x74>
    a7ac:	89a3      	ldrh	r3, [r4, #12]
    a7ae:	f023 0303 	bic.w	r3, r3, #3
    a7b2:	f043 0301 	orr.w	r3, r3, #1
    a7b6:	81a3      	strh	r3, [r4, #12]
    a7b8:	89a0      	ldrh	r0, [r4, #12]
    a7ba:	4305      	orrs	r5, r0
    a7bc:	81a5      	strh	r5, [r4, #12]
    a7be:	e7cd      	b.n	a75c <__smakebuf_r+0x18>
    a7c0:	0000a60d 	.word	0x0000a60d

0000a7c4 <raise>:
    a7c4:	4b02      	ldr	r3, [pc, #8]	; (a7d0 <raise+0xc>)
    a7c6:	4601      	mov	r1, r0
    a7c8:	6818      	ldr	r0, [r3, #0]
    a7ca:	f002 bd2f 	b.w	d22c <_raise_r>
    a7ce:	bf00      	nop
    a7d0:	20000178 	.word	0x20000178

0000a7d4 <_kill_r>:
    a7d4:	b538      	push	{r3, r4, r5, lr}
    a7d6:	4d07      	ldr	r5, [pc, #28]	; (a7f4 <_kill_r+0x20>)
    a7d8:	2300      	movs	r3, #0
    a7da:	4604      	mov	r4, r0
    a7dc:	4608      	mov	r0, r1
    a7de:	4611      	mov	r1, r2
    a7e0:	602b      	str	r3, [r5, #0]
    a7e2:	f001 f9fd 	bl	bbe0 <_kill>
    a7e6:	1c43      	adds	r3, r0, #1
    a7e8:	d102      	bne.n	a7f0 <_kill_r+0x1c>
    a7ea:	682b      	ldr	r3, [r5, #0]
    a7ec:	b103      	cbz	r3, a7f0 <_kill_r+0x1c>
    a7ee:	6023      	str	r3, [r4, #0]
    a7f0:	bd38      	pop	{r3, r4, r5, pc}
    a7f2:	bf00      	nop
    a7f4:	20000be0 	.word	0x20000be0

0000a7f8 <_write_r>:
    a7f8:	b538      	push	{r3, r4, r5, lr}
    a7fa:	4d07      	ldr	r5, [pc, #28]	; (a818 <_write_r+0x20>)
    a7fc:	4604      	mov	r4, r0
    a7fe:	4608      	mov	r0, r1
    a800:	4611      	mov	r1, r2
    a802:	2200      	movs	r2, #0
    a804:	602a      	str	r2, [r5, #0]
    a806:	461a      	mov	r2, r3
    a808:	f001 f9dc 	bl	bbc4 <_write>
    a80c:	1c43      	adds	r3, r0, #1
    a80e:	d102      	bne.n	a816 <_write_r+0x1e>
    a810:	682b      	ldr	r3, [r5, #0]
    a812:	b103      	cbz	r3, a816 <_write_r+0x1e>
    a814:	6023      	str	r3, [r4, #0]
    a816:	bd38      	pop	{r3, r4, r5, pc}
    a818:	20000be0 	.word	0x20000be0

0000a81c <_close_r>:
    a81c:	b538      	push	{r3, r4, r5, lr}
    a81e:	4d06      	ldr	r5, [pc, #24]	; (a838 <_close_r+0x1c>)
    a820:	2300      	movs	r3, #0
    a822:	4604      	mov	r4, r0
    a824:	4608      	mov	r0, r1
    a826:	602b      	str	r3, [r5, #0]
    a828:	f001 f9d0 	bl	bbcc <_close>
    a82c:	1c43      	adds	r3, r0, #1
    a82e:	d102      	bne.n	a836 <_close_r+0x1a>
    a830:	682b      	ldr	r3, [r5, #0]
    a832:	b103      	cbz	r3, a836 <_close_r+0x1a>
    a834:	6023      	str	r3, [r4, #0]
    a836:	bd38      	pop	{r3, r4, r5, pc}
    a838:	20000be0 	.word	0x20000be0

0000a83c <_fstat_r>:
    a83c:	b538      	push	{r3, r4, r5, lr}
    a83e:	4d07      	ldr	r5, [pc, #28]	; (a85c <_fstat_r+0x20>)
    a840:	2300      	movs	r3, #0
    a842:	4604      	mov	r4, r0
    a844:	4608      	mov	r0, r1
    a846:	4611      	mov	r1, r2
    a848:	602b      	str	r3, [r5, #0]
    a84a:	f001 f9cd 	bl	bbe8 <_fstat>
    a84e:	1c43      	adds	r3, r0, #1
    a850:	d102      	bne.n	a858 <_fstat_r+0x1c>
    a852:	682b      	ldr	r3, [r5, #0]
    a854:	b103      	cbz	r3, a858 <_fstat_r+0x1c>
    a856:	6023      	str	r3, [r4, #0]
    a858:	bd38      	pop	{r3, r4, r5, pc}
    a85a:	bf00      	nop
    a85c:	20000be0 	.word	0x20000be0

0000a860 <_isatty_r>:
    a860:	b538      	push	{r3, r4, r5, lr}
    a862:	4d06      	ldr	r5, [pc, #24]	; (a87c <_isatty_r+0x1c>)
    a864:	2300      	movs	r3, #0
    a866:	4604      	mov	r4, r0
    a868:	4608      	mov	r0, r1
    a86a:	602b      	str	r3, [r5, #0]
    a86c:	f001 f9b3 	bl	bbd6 <_isatty>
    a870:	1c43      	adds	r3, r0, #1
    a872:	d102      	bne.n	a87a <_isatty_r+0x1a>
    a874:	682b      	ldr	r3, [r5, #0]
    a876:	b103      	cbz	r3, a87a <_isatty_r+0x1a>
    a878:	6023      	str	r3, [r4, #0]
    a87a:	bd38      	pop	{r3, r4, r5, pc}
    a87c:	20000be0 	.word	0x20000be0

0000a880 <_lseek_r>:
    a880:	b538      	push	{r3, r4, r5, lr}
    a882:	4d07      	ldr	r5, [pc, #28]	; (a8a0 <_lseek_r+0x20>)
    a884:	4604      	mov	r4, r0
    a886:	4608      	mov	r0, r1
    a888:	4611      	mov	r1, r2
    a88a:	2200      	movs	r2, #0
    a88c:	602a      	str	r2, [r5, #0]
    a88e:	461a      	mov	r2, r3
    a890:	f001 f99f 	bl	bbd2 <_lseek>
    a894:	1c43      	adds	r3, r0, #1
    a896:	d102      	bne.n	a89e <_lseek_r+0x1e>
    a898:	682b      	ldr	r3, [r5, #0]
    a89a:	b103      	cbz	r3, a89e <_lseek_r+0x1e>
    a89c:	6023      	str	r3, [r4, #0]
    a89e:	bd38      	pop	{r3, r4, r5, pc}
    a8a0:	20000be0 	.word	0x20000be0

0000a8a4 <_read_r>:
    a8a4:	b538      	push	{r3, r4, r5, lr}
    a8a6:	4d07      	ldr	r5, [pc, #28]	; (a8c4 <_read_r+0x20>)
    a8a8:	4604      	mov	r4, r0
    a8aa:	4608      	mov	r0, r1
    a8ac:	4611      	mov	r1, r2
    a8ae:	2200      	movs	r2, #0
    a8b0:	602a      	str	r2, [r5, #0]
    a8b2:	461a      	mov	r2, r3
    a8b4:	f001 f982 	bl	bbbc <_read>
    a8b8:	1c43      	adds	r3, r0, #1
    a8ba:	d102      	bne.n	a8c2 <_read_r+0x1e>
    a8bc:	682b      	ldr	r3, [r5, #0]
    a8be:	b103      	cbz	r3, a8c2 <_read_r+0x1e>
    a8c0:	6023      	str	r3, [r4, #0]
    a8c2:	bd38      	pop	{r3, r4, r5, pc}
    a8c4:	20000be0 	.word	0x20000be0

0000a8c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a8c8:	4770      	bx	lr

0000a8ca <i2c_burst_read.constprop.0.isra.0>:
static inline int i2c_burst_read(const struct device *dev,
    a8ca:	b507      	push	{r0, r1, r2, lr}
    a8cc:	460a      	mov	r2, r1
    a8ce:	f88d 0007 	strb.w	r0, [sp, #7]
	return i2c_write_read(dev, dev_addr,
    a8d2:	f10d 0107 	add.w	r1, sp, #7
    a8d6:	2068      	movs	r0, #104	; 0x68
    a8d8:	f7f7 f944 	bl	1b64 <i2c_write_read.constprop.0>
}
    a8dc:	b003      	add	sp, #12
    a8de:	f85d fb04 	ldr.w	pc, [sp], #4

0000a8e2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    a8e2:	4603      	mov	r3, r0
    a8e4:	b140      	cbz	r0, a8f8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a8e6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a8e8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    a8ec:	2a02      	cmp	r2, #2
    a8ee:	d006      	beq.n	a8fe <sys_notify_validate+0x1c>
    a8f0:	2a03      	cmp	r2, #3
    a8f2:	d004      	beq.n	a8fe <sys_notify_validate+0x1c>
    a8f4:	2a01      	cmp	r2, #1
    a8f6:	d005      	beq.n	a904 <sys_notify_validate+0x22>
		return -EINVAL;
    a8f8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    a8fc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    a8fe:	681a      	ldr	r2, [r3, #0]
    a900:	2a00      	cmp	r2, #0
    a902:	d0f9      	beq.n	a8f8 <sys_notify_validate+0x16>
		notify->result = 0;
    a904:	2000      	movs	r0, #0
    a906:	6098      	str	r0, [r3, #8]
    a908:	4770      	bx	lr

0000a90a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a90a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a90c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a910:	2a02      	cmp	r2, #2
{
    a912:	b510      	push	{r4, lr}
    a914:	4603      	mov	r3, r0
	notify->result = res;
    a916:	6081      	str	r1, [r0, #8]
	switch (method) {
    a918:	d00a      	beq.n	a930 <sys_notify_finalize+0x26>
    a91a:	2a03      	cmp	r2, #3
    a91c:	d10b      	bne.n	a936 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a91e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a920:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a922:	2200      	movs	r2, #0
    a924:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a926:	b108      	cbz	r0, a92c <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    a928:	f7fe f89c 	bl	8a64 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a92c:	4620      	mov	r0, r4
    a92e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    a930:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    a932:	2400      	movs	r4, #0
		break;
    a934:	e7f5      	b.n	a922 <sys_notify_finalize+0x18>
	switch (method) {
    a936:	2400      	movs	r4, #0
    a938:	4620      	mov	r0, r4
    a93a:	e7f2      	b.n	a922 <sys_notify_finalize+0x18>

0000a93c <arch_printk_char_out>:
}
    a93c:	2000      	movs	r0, #0
    a93e:	4770      	bx	lr

0000a940 <str_out>:
{
    a940:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    a942:	688a      	ldr	r2, [r1, #8]
    a944:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    a946:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    a948:	b114      	cbz	r4, a950 <str_out+0x10>
    a94a:	684b      	ldr	r3, [r1, #4]
    a94c:	4293      	cmp	r3, r2
    a94e:	dc01      	bgt.n	a954 <str_out+0x14>
		ctx->count++;
    a950:	608d      	str	r5, [r1, #8]
}
    a952:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    a954:	3b01      	subs	r3, #1
    a956:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    a958:	bf08      	it	eq
    a95a:	2200      	moveq	r2, #0
    a95c:	608d      	str	r5, [r1, #8]
    a95e:	bf0c      	ite	eq
    a960:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    a962:	54a0      	strbne	r0, [r4, r2]
    a964:	e7f5      	b.n	a952 <str_out+0x12>

0000a966 <printk>:
{
    a966:	b40f      	push	{r0, r1, r2, r3}
    a968:	b507      	push	{r0, r1, r2, lr}
    a96a:	a904      	add	r1, sp, #16
    a96c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    a970:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    a972:	f7f7 f91d 	bl	1bb0 <vprintk>
}
    a976:	b003      	add	sp, #12
    a978:	f85d eb04 	ldr.w	lr, [sp], #4
    a97c:	b004      	add	sp, #16
    a97e:	4770      	bx	lr

0000a980 <snprintk>:
{
    a980:	b40c      	push	{r2, r3}
    a982:	b507      	push	{r0, r1, r2, lr}
    a984:	ab04      	add	r3, sp, #16
    a986:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    a98a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    a98c:	f7f7 f91e 	bl	1bcc <vsnprintk>
}
    a990:	b003      	add	sp, #12
    a992:	f85d eb04 	ldr.w	lr, [sp], #4
    a996:	b002      	add	sp, #8
    a998:	4770      	bx	lr

0000a99a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a99a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    a99c:	f013 0307 	ands.w	r3, r3, #7
    a9a0:	d105      	bne.n	a9ae <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a9a2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	bf0c      	ite	eq
    a9a8:	2000      	moveq	r0, #0
    a9aa:	2003      	movne	r0, #3
    a9ac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a9ae:	2b02      	cmp	r3, #2
    a9b0:	d105      	bne.n	a9be <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a9b2:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	bf14      	ite	ne
    a9b8:	2000      	movne	r0, #0
    a9ba:	2004      	moveq	r0, #4
    a9bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a9be:	2b01      	cmp	r3, #1
    a9c0:	d105      	bne.n	a9ce <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a9c2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	bf0c      	ite	eq
    a9c8:	2000      	moveq	r0, #0
    a9ca:	2005      	movne	r0, #5
    a9cc:	4770      	bx	lr
	int evt = EVT_NOP;
    a9ce:	2000      	movs	r0, #0
}
    a9d0:	4770      	bx	lr

0000a9d2 <notify_one>:
{
    a9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9d6:	460d      	mov	r5, r1
    a9d8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a9da:	4619      	mov	r1, r3
    a9dc:	1d28      	adds	r0, r5, #4
{
    a9de:	4690      	mov	r8, r2
    a9e0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a9e2:	f7ff ff92 	bl	a90a <sys_notify_finalize>
	if (cb) {
    a9e6:	4604      	mov	r4, r0
    a9e8:	b138      	cbz	r0, a9fa <notify_one+0x28>
		cb(mgr, cli, state, res);
    a9ea:	4633      	mov	r3, r6
    a9ec:	4642      	mov	r2, r8
    a9ee:	4629      	mov	r1, r5
    a9f0:	4638      	mov	r0, r7
    a9f2:	46a4      	mov	ip, r4
}
    a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a9f8:	4760      	bx	ip
}
    a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a9fe <transition_complete>:
{
    a9fe:	b410      	push	{r4}
	__asm__ volatile(
    aa00:	f04f 0420 	mov.w	r4, #32
    aa04:	f3ef 8211 	mrs	r2, BASEPRI
    aa08:	f384 8812 	msr	BASEPRI_MAX, r4
    aa0c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    aa10:	6141      	str	r1, [r0, #20]
}
    aa12:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    aa14:	2101      	movs	r1, #1
    aa16:	f7f7 b8ed 	b.w	1bf4 <process_event>

0000aa1a <validate_args>:
{
    aa1a:	b510      	push	{r4, lr}
    aa1c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    aa1e:	b140      	cbz	r0, aa32 <validate_args+0x18>
    aa20:	b139      	cbz	r1, aa32 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    aa22:	1d08      	adds	r0, r1, #4
    aa24:	f7ff ff5d 	bl	a8e2 <sys_notify_validate>
	if ((rv == 0)
    aa28:	b928      	cbnz	r0, aa36 <validate_args+0x1c>
	    && ((cli->notify.flags
    aa2a:	68a3      	ldr	r3, [r4, #8]
    aa2c:	f033 0303 	bics.w	r3, r3, #3
    aa30:	d001      	beq.n	aa36 <validate_args+0x1c>
		rv = -EINVAL;
    aa32:	f06f 0015 	mvn.w	r0, #21
}
    aa36:	bd10      	pop	{r4, pc}

0000aa38 <onoff_manager_init>:
{
    aa38:	b538      	push	{r3, r4, r5, lr}
    aa3a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    aa3c:	4605      	mov	r5, r0
    aa3e:	b158      	cbz	r0, aa58 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    aa40:	b151      	cbz	r1, aa58 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    aa42:	680b      	ldr	r3, [r1, #0]
    aa44:	b143      	cbz	r3, aa58 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    aa46:	684b      	ldr	r3, [r1, #4]
    aa48:	b133      	cbz	r3, aa58 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    aa4a:	221c      	movs	r2, #28
    aa4c:	2100      	movs	r1, #0
    aa4e:	f002 f84f 	bl	caf0 <memset>
    aa52:	612c      	str	r4, [r5, #16]
	return 0;
    aa54:	2000      	movs	r0, #0
}
    aa56:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    aa58:	f06f 0015 	mvn.w	r0, #21
    aa5c:	e7fb      	b.n	aa56 <onoff_manager_init+0x1e>

0000aa5e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    aa5e:	b570      	push	{r4, r5, r6, lr}
    aa60:	4604      	mov	r4, r0
    aa62:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    aa64:	f7ff ffd9 	bl	aa1a <validate_args>

	if (rv < 0) {
    aa68:	1e05      	subs	r5, r0, #0
    aa6a:	db31      	blt.n	aad0 <onoff_request+0x72>
    aa6c:	f04f 0320 	mov.w	r3, #32
    aa70:	f3ef 8111 	mrs	r1, BASEPRI
    aa74:	f383 8812 	msr	BASEPRI_MAX, r3
    aa78:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    aa7c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa7e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    aa80:	f64f 75ff 	movw	r5, #65535	; 0xffff
    aa84:	42ab      	cmp	r3, r5
    aa86:	f000 0207 	and.w	r2, r0, #7
    aa8a:	d02e      	beq.n	aaea <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    aa8c:	2a02      	cmp	r2, #2
    aa8e:	d10e      	bne.n	aaae <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    aa90:	3301      	adds	r3, #1
    aa92:	8363      	strh	r3, [r4, #26]
	rv = state;
    aa94:	4615      	mov	r5, r2
		notify = true;
    aa96:	2301      	movs	r3, #1
	__asm__ volatile(
    aa98:	f381 8811 	msr	BASEPRI, r1
    aa9c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    aaa0:	b1b3      	cbz	r3, aad0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    aaa2:	2300      	movs	r3, #0
    aaa4:	4631      	mov	r1, r6
    aaa6:	4620      	mov	r0, r4
    aaa8:	f7ff ff93 	bl	a9d2 <notify_one>
    aaac:	e010      	b.n	aad0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    aaae:	0783      	lsls	r3, r0, #30
    aab0:	d001      	beq.n	aab6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    aab2:	2a06      	cmp	r2, #6
    aab4:	d10e      	bne.n	aad4 <onoff_request+0x76>
	parent->next = child;
    aab6:	2300      	movs	r3, #0
    aab8:	6033      	str	r3, [r6, #0]
	return list->tail;
    aaba:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    aabc:	b993      	cbnz	r3, aae4 <onoff_request+0x86>
	list->head = node;
    aabe:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    aac2:	4615      	mov	r5, r2
    aac4:	b962      	cbnz	r2, aae0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    aac6:	460a      	mov	r2, r1
    aac8:	4620      	mov	r0, r4
    aaca:	2102      	movs	r1, #2
    aacc:	f7f7 f892 	bl	1bf4 <process_event>
		}
	}

	return rv;
}
    aad0:	4628      	mov	r0, r5
    aad2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    aad4:	2a05      	cmp	r2, #5
    aad6:	bf0c      	ite	eq
    aad8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    aadc:	f06f 0504 	mvnne.w	r5, #4
    aae0:	2300      	movs	r3, #0
    aae2:	e7d9      	b.n	aa98 <onoff_request+0x3a>
	parent->next = child;
    aae4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    aae6:	6066      	str	r6, [r4, #4]
}
    aae8:	e7eb      	b.n	aac2 <onoff_request+0x64>
		rv = -EAGAIN;
    aaea:	f06f 050a 	mvn.w	r5, #10
    aaee:	e7f7      	b.n	aae0 <onoff_request+0x82>

0000aaf0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    aaf0:	4604      	mov	r4, r0
    aaf2:	b508      	push	{r3, lr}
    aaf4:	4608      	mov	r0, r1
    aaf6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    aaf8:	461a      	mov	r2, r3
    aafa:	47a0      	blx	r4
	return z_impl_z_current_get();
    aafc:	f7fd fd84 	bl	8608 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ab00:	f7fa fc12 	bl	5328 <z_impl_k_thread_abort>

0000ab04 <_ldiv5>:
	uint32_t v_lo = *v;
    ab04:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    ab08:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    ab0a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    ab0e:	fba2 2403 	umull	r2, r4, r2, r3
    ab12:	18d5      	adds	r5, r2, r3
    ab14:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    ab18:	fba1 1303 	umull	r1, r3, r1, r3
    ab1c:	1852      	adds	r2, r2, r1
    ab1e:	eb44 0403 	adc.w	r4, r4, r3
    ab22:	1952      	adds	r2, r2, r5
    ab24:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    ab28:	1889      	adds	r1, r1, r2
    ab2a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    ab2e:	e9c0 1300 	strd	r1, r3, [r0]
}
    ab32:	bd30      	pop	{r4, r5, pc}

0000ab34 <_get_digit>:
	if (*digit_count > 0) {
    ab34:	680a      	ldr	r2, [r1, #0]
    ab36:	2a00      	cmp	r2, #0
{
    ab38:	b510      	push	{r4, lr}
    ab3a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    ab3c:	dd0f      	ble.n	ab5e <_get_digit+0x2a>
		--*digit_count;
    ab3e:	3a01      	subs	r2, #1
    ab40:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    ab42:	681a      	ldr	r2, [r3, #0]
    ab44:	6844      	ldr	r4, [r0, #4]
    ab46:	200a      	movs	r0, #10
    ab48:	fba2 1200 	umull	r1, r2, r2, r0
    ab4c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    ab50:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    ab52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    ab56:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    ab5a:	3030      	adds	r0, #48	; 0x30
}
    ab5c:	bd10      	pop	{r4, pc}
		rval = '0';
    ab5e:	2030      	movs	r0, #48	; 0x30
    ab60:	e7fc      	b.n	ab5c <_get_digit+0x28>

0000ab62 <outs>:
{
    ab62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab66:	4607      	mov	r7, r0
    ab68:	4688      	mov	r8, r1
    ab6a:	4615      	mov	r5, r2
    ab6c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ab6e:	4614      	mov	r4, r2
    ab70:	42b4      	cmp	r4, r6
    ab72:	eba4 0005 	sub.w	r0, r4, r5
    ab76:	d302      	bcc.n	ab7e <outs+0x1c>
    ab78:	b93e      	cbnz	r6, ab8a <outs+0x28>
    ab7a:	7823      	ldrb	r3, [r4, #0]
    ab7c:	b12b      	cbz	r3, ab8a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    ab7e:	f814 0b01 	ldrb.w	r0, [r4], #1
    ab82:	4641      	mov	r1, r8
    ab84:	47b8      	blx	r7
		if (rc < 0) {
    ab86:	2800      	cmp	r0, #0
    ab88:	daf2      	bge.n	ab70 <outs+0xe>
}
    ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab8e <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    ab8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ab92:	4770      	bx	lr

0000ab94 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    ab94:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ab96:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    ab98:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ab9a:	6907      	ldr	r7, [r0, #16]
{
    ab9c:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ab9e:	b185      	cbz	r5, abc2 <ring_buf_put_claim+0x2e>
    aba0:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    aba2:	6823      	ldr	r3, [r4, #0]
    aba4:	443b      	add	r3, r7
    aba6:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    aba8:	4290      	cmp	r0, r2
    abaa:	bf28      	it	cs
    abac:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
    abae:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    abb0:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
    abb2:	42b8      	cmp	r0, r7
    abb4:	bf28      	it	cs
    abb6:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    abb8:	442b      	add	r3, r5

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    abba:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    abbc:	600b      	str	r3, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    abbe:	60a6      	str	r6, [r4, #8]

	return allocated;
}
    abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    abc2:	fbb6 f5f7 	udiv	r5, r6, r7
    abc6:	fb07 6515 	mls	r5, r7, r5, r6
    abca:	e7ea      	b.n	aba2 <ring_buf_put_claim+0xe>

0000abcc <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    abcc:	b570      	push	{r4, r5, r6, lr}
    abce:	4605      	mov	r5, r0
    abd0:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    abd2:	f7ff ffdc 	bl	ab8e <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    abd6:	686e      	ldr	r6, [r5, #4]
    abd8:	692a      	ldr	r2, [r5, #16]
    abda:	682b      	ldr	r3, [r5, #0]
    abdc:	1931      	adds	r1, r6, r4
    abde:	4413      	add	r3, r2
    abe0:	4299      	cmp	r1, r3
    abe2:	d80a      	bhi.n	abfa <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    abe4:	4286      	cmp	r6, r0
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    abe6:	bf92      	itee	ls
    abe8:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
    abea:	fbb0 f3f2 	udivhi	r3, r0, r2
    abee:	4353      	mulhi	r3, r2
	}

	buf->tail += (size - rew);
    abf0:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    abf2:	e9c5 1101 	strd	r1, r1, [r5, #4]

	return 0;
    abf6:	2000      	movs	r0, #0
}
    abf8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    abfa:	f06f 0015 	mvn.w	r0, #21
    abfe:	e7fb      	b.n	abf8 <ring_buf_put_finish+0x2c>

0000ac00 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    ac00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ac04:	4680      	mov	r8, r0
    ac06:	460e      	mov	r6, r1
    ac08:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    ac0a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    ac0c:	462a      	mov	r2, r5
    ac0e:	a901      	add	r1, sp, #4
    ac10:	4640      	mov	r0, r8
    ac12:	f7ff ffbf 	bl	ab94 <ring_buf_put_claim>
    ac16:	4631      	mov	r1, r6
    ac18:	4604      	mov	r4, r0
    ac1a:	4602      	mov	r2, r0
    ac1c:	9801      	ldr	r0, [sp, #4]
    ac1e:	f001 ff3f 	bl	caa0 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    ac22:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    ac24:	4427      	add	r7, r4
		data += partial_size;
    ac26:	4426      	add	r6, r4
	} while (size && partial_size);
    ac28:	d001      	beq.n	ac2e <ring_buf_put+0x2e>
    ac2a:	2c00      	cmp	r4, #0
    ac2c:	d1ee      	bne.n	ac0c <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    ac2e:	4639      	mov	r1, r7
    ac30:	4640      	mov	r0, r8
    ac32:	f7ff ffcb 	bl	abcc <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    ac36:	4638      	mov	r0, r7
    ac38:	b002      	add	sp, #8
    ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ac3e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    ac42:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    ac44:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    ac46:	42b3      	cmp	r3, r6
{
    ac48:	4604      	mov	r4, r0
    ac4a:	460f      	mov	r7, r1
    ac4c:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    ac4e:	d906      	bls.n	ac5e <ring_buf_get_claim+0x20>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    ac50:	6905      	ldr	r5, [r0, #16]
    ac52:	f7ff ff9c 	bl	ab8e <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    ac56:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
    ac5a:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ac5e:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    ac60:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ac62:	6923      	ldr	r3, [r4, #16]
    ac64:	b185      	cbz	r5, ac88 <ring_buf_get_claim+0x4a>
    ac66:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    ac68:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    ac6a:	4540      	cmp	r0, r8
    ac6c:	bf28      	it	cs
    ac6e:	4640      	movcs	r0, r8
    ac70:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    ac72:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    ac74:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    ac76:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    ac78:	bf28      	it	cs
    ac7a:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    ac7c:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    ac7e:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    ac80:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    ac82:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ac88:	fbb1 f5f3 	udiv	r5, r1, r3
    ac8c:	fb03 1515 	mls	r5, r3, r5, r1
    ac90:	e7ea      	b.n	ac68 <ring_buf_get_claim+0x2a>

0000ac92 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    ac92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    ac94:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    ac96:	68c3      	ldr	r3, [r0, #12]
    ac98:	42b3      	cmp	r3, r6
{
    ac9a:	4605      	mov	r5, r0
    ac9c:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    ac9e:	d912      	bls.n	acc6 <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    aca0:	6907      	ldr	r7, [r0, #16]
    aca2:	f7ff ff74 	bl	ab8e <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    aca6:	fbb0 f0f7 	udiv	r0, r0, r7
    acaa:	4378      	muls	r0, r7
				       ring_buf_get_rewind_threshold());
		tail += rew;
    acac:	4406      	add	r6, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    acae:	6829      	ldr	r1, [r5, #0]
    acb0:	4421      	add	r1, r4
    acb2:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    acb4:	bf9f      	itttt	ls
    acb6:	1a09      	subls	r1, r1, r0
    acb8:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    acba:	60e9      	strls	r1, [r5, #12]

	return 0;
    acbc:	2000      	movls	r0, #0
		return -EINVAL;
    acbe:	bf88      	it	hi
    acc0:	f06f 0015 	mvnhi.w	r0, #21
}
    acc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    acc6:	2000      	movs	r0, #0
    acc8:	e7f1      	b.n	acae <ring_buf_get_finish+0x1c>

0000acca <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    acca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    acce:	4680      	mov	r8, r0
    acd0:	460d      	mov	r5, r1
    acd2:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    acd4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    acd6:	4632      	mov	r2, r6
    acd8:	a901      	add	r1, sp, #4
    acda:	4640      	mov	r0, r8
    acdc:	f7ff ffaf 	bl	ac3e <ring_buf_get_claim>
    ace0:	4604      	mov	r4, r0
		if (data) {
    ace2:	b12d      	cbz	r5, acf0 <ring_buf_get+0x26>
    ace4:	4602      	mov	r2, r0
    ace6:	9901      	ldr	r1, [sp, #4]
    ace8:	4628      	mov	r0, r5
    acea:	f001 fed9 	bl	caa0 <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
    acee:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    acf0:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    acf2:	4427      	add	r7, r4
	} while (size && partial_size);
    acf4:	d001      	beq.n	acfa <ring_buf_get+0x30>
    acf6:	2c00      	cmp	r4, #0
    acf8:	d1ed      	bne.n	acd6 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    acfa:	4639      	mov	r1, r7
    acfc:	4640      	mov	r0, r8
    acfe:	f7ff ffc8 	bl	ac92 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    ad02:	4638      	mov	r0, r7
    ad04:	b002      	add	sp, #8
    ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad0a <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    ad0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad0e:	b087      	sub	sp, #28
    ad10:	468a      	mov	sl, r1
    ad12:	4614      	mov	r4, r2
    ad14:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    ad16:	4605      	mov	r5, r0
    ad18:	b918      	cbnz	r0, ad22 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    ad1a:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    ad1c:	b007      	add	sp, #28
    ad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    ad22:	2900      	cmp	r1, #0
    ad24:	d0f9      	beq.n	ad1a <fnmatchx+0x10>
    if (recursion-- == 0)
    ad26:	9b02      	ldr	r3, [sp, #8]
    ad28:	2b00      	cmp	r3, #0
    ad2a:	f000 811a 	beq.w	af62 <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    ad2e:	f004 0304 	and.w	r3, r4, #4
    ad32:	460a      	mov	r2, r1
    ad34:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    ad36:	46a8      	mov	r8, r5
    ad38:	4621      	mov	r1, r4
    ad3a:	f818 0b01 	ldrb.w	r0, [r8], #1
    ad3e:	f7f7 fef7 	bl	2b30 <foldcase>
    ad42:	4603      	mov	r3, r0
    ad44:	b2c0      	uxtb	r0, r0
    ad46:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    ad48:	7817      	ldrb	r7, [r2, #0]
    ad4a:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    ad4c:	d025      	beq.n	ad9a <fnmatchx+0x90>
    ad4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    ad52:	d10b      	bne.n	ad6c <fnmatchx+0x62>
    ad54:	b1c8      	cbz	r0, ad8a <fnmatchx+0x80>
    ad56:	282a      	cmp	r0, #42	; 0x2a
    ad58:	d036      	beq.n	adc8 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
    ad5a:	4621      	mov	r1, r4
    ad5c:	4638      	mov	r0, r7
    ad5e:	f7f7 fee7 	bl	2b30 <foldcase>
    ad62:	4286      	cmp	r6, r0
    ad64:	f102 0201 	add.w	r2, r2, #1
    ad68:	d01e      	beq.n	ada8 <fnmatchx+0x9e>
    ad6a:	e7d6      	b.n	ad1a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    ad6c:	285b      	cmp	r0, #91	; 0x5b
    ad6e:	d07b      	beq.n	ae68 <fnmatchx+0x15e>
    ad70:	285c      	cmp	r0, #92	; 0x5c
    ad72:	d1f2      	bne.n	ad5a <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    ad74:	07e3      	lsls	r3, r4, #31
    ad76:	d4f0      	bmi.n	ad5a <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    ad78:	7868      	ldrb	r0, [r5, #1]
    ad7a:	f7f7 fed9 	bl	2b30 <foldcase>
    ad7e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    ad82:	bf18      	it	ne
    ad84:	f105 0802 	addne.w	r8, r5, #2
    ad88:	e7e7      	b.n	ad5a <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    ad8a:	06e4      	lsls	r4, r4, #27
    ad8c:	d501      	bpl.n	ad92 <fnmatchx+0x88>
    ad8e:	2f2f      	cmp	r7, #47	; 0x2f
    ad90:	d0c4      	beq.n	ad1c <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    ad92:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    ad94:	bf18      	it	ne
    ad96:	2001      	movne	r0, #1
    ad98:	e7c0      	b.n	ad1c <fnmatchx+0x12>
            if (*string == EOS)
    ad9a:	2f00      	cmp	r7, #0
    ad9c:	d0bd      	beq.n	ad1a <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    ad9e:	2f2f      	cmp	r7, #47	; 0x2f
    ada0:	d104      	bne.n	adac <fnmatchx+0xa2>
    ada2:	07a1      	lsls	r1, r4, #30
    ada4:	d4b9      	bmi.n	ad1a <fnmatchx+0x10>
            ++string;
    ada6:	3201      	adds	r2, #1
            break;
    ada8:	4645      	mov	r5, r8
    adaa:	e7c4      	b.n	ad36 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    adac:	2f2e      	cmp	r7, #46	; 0x2e
    adae:	d1fa      	bne.n	ada6 <fnmatchx+0x9c>
    adb0:	9b04      	ldr	r3, [sp, #16]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d0f7      	beq.n	ada6 <fnmatchx+0x9c>
    adb6:	4552      	cmp	r2, sl
    adb8:	d0af      	beq.n	ad1a <fnmatchx+0x10>
                (string == stringstart ||
    adba:	07a3      	lsls	r3, r4, #30
    adbc:	d5f3      	bpl.n	ada6 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    adbe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    adc2:	2b2f      	cmp	r3, #47	; 0x2f
    adc4:	d1ef      	bne.n	ada6 <fnmatchx+0x9c>
    adc6:	e7a8      	b.n	ad1a <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    adc8:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    adca:	f7f7 feb1 	bl	2b30 <foldcase>
    adce:	b2c1      	uxtb	r1, r0
            while (c == '*')
    add0:	292a      	cmp	r1, #42	; 0x2a
    add2:	d018      	beq.n	ae06 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    add4:	2f2e      	cmp	r7, #46	; 0x2e
    add6:	d109      	bne.n	adec <fnmatchx+0xe2>
    add8:	9b04      	ldr	r3, [sp, #16]
    adda:	b13b      	cbz	r3, adec <fnmatchx+0xe2>
    addc:	4552      	cmp	r2, sl
    adde:	d09c      	beq.n	ad1a <fnmatchx+0x10>
                (string == stringstart ||
    ade0:	07a7      	lsls	r7, r4, #30
    ade2:	d503      	bpl.n	adec <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    ade4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ade8:	2b2f      	cmp	r3, #47	; 0x2f
    adea:	d096      	beq.n	ad1a <fnmatchx+0x10>
            if (c == EOS) {
    adec:	b979      	cbnz	r1, ae0e <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
    adee:	f014 0002 	ands.w	r0, r4, #2
    adf2:	d093      	beq.n	ad1c <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    adf4:	06e6      	lsls	r6, r4, #27
    adf6:	f100 80b6 	bmi.w	af66 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
    adfa:	212f      	movs	r1, #47	; 0x2f
    adfc:	4610      	mov	r0, r2
    adfe:	f001 ff8a 	bl	cd16 <strchr>
                        0 : FNM_NOMATCH;
    ae02:	3800      	subs	r0, #0
    ae04:	e7c6      	b.n	ad94 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
    ae06:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    ae0a:	4621      	mov	r1, r4
    ae0c:	e7dd      	b.n	adca <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    ae0e:	292f      	cmp	r1, #47	; 0x2f
    ae10:	d021      	beq.n	ae56 <fnmatchx+0x14c>
    if (recursion-- == 0)
    ae12:	9b02      	ldr	r3, [sp, #8]
    ae14:	4616      	mov	r6, r2
    ae16:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    ae18:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    ae1c:	f004 0a02 	and.w	sl, r4, #2
    ae20:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    ae22:	4621      	mov	r1, r4
    ae24:	f89b 0000 	ldrb.w	r0, [fp]
    ae28:	f7f7 fe82 	bl	2b30 <foldcase>
    ae2c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    ae30:	f106 0601 	add.w	r6, r6, #1
    ae34:	f43f af71 	beq.w	ad1a <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    ae38:	463b      	mov	r3, r7
    ae3a:	464a      	mov	r2, r9
    ae3c:	4659      	mov	r1, fp
    ae3e:	4640      	mov	r0, r8
    ae40:	f7ff ff63 	bl	ad0a <fnmatchx>
    ae44:	2801      	cmp	r0, #1
    ae46:	f47f af69 	bne.w	ad1c <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    ae4a:	2d2f      	cmp	r5, #47	; 0x2f
    ae4c:	d1e8      	bne.n	ae20 <fnmatchx+0x116>
    ae4e:	f1ba 0f00 	cmp.w	sl, #0
    ae52:	d0e5      	beq.n	ae20 <fnmatchx+0x116>
    ae54:	e761      	b.n	ad1a <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    ae56:	07a5      	lsls	r5, r4, #30
    ae58:	d5db      	bpl.n	ae12 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
    ae5a:	4610      	mov	r0, r2
    ae5c:	f001 ff5b 	bl	cd16 <strchr>
    ae60:	4602      	mov	r2, r0
    ae62:	2800      	cmp	r0, #0
    ae64:	d1a0      	bne.n	ada8 <fnmatchx+0x9e>
    ae66:	e758      	b.n	ad1a <fnmatchx+0x10>
            if (*string == EOS)
    ae68:	2f00      	cmp	r7, #0
    ae6a:	f43f af56 	beq.w	ad1a <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    ae6e:	2f2f      	cmp	r7, #47	; 0x2f
    ae70:	d102      	bne.n	ae78 <fnmatchx+0x16e>
    ae72:	07a0      	lsls	r0, r4, #30
    ae74:	f53f af51 	bmi.w	ad1a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    ae78:	4621      	mov	r1, r4
    ae7a:	4638      	mov	r0, r7
    ae7c:	f7f7 fe58 	bl	2b30 <foldcase>
    ae80:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
    ae82:	f1b8 0f00 	cmp.w	r8, #0
    ae86:	f43f af48 	beq.w	ad1a <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    ae8a:	786b      	ldrb	r3, [r5, #1]
    ae8c:	2b21      	cmp	r3, #33	; 0x21
    ae8e:	d001      	beq.n	ae94 <fnmatchx+0x18a>
    ae90:	2b5e      	cmp	r3, #94	; 0x5e
    ae92:	d126      	bne.n	aee2 <fnmatchx+0x1d8>
        ++pattern;
    ae94:	3502      	adds	r5, #2
    ae96:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    ae98:	9301      	str	r3, [sp, #4]
    need = 1;
    ae9a:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    ae9c:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    aea0:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    aea4:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    aea6:	462e      	mov	r6, r5
    aea8:	4621      	mov	r1, r4
    aeaa:	f816 0b01 	ldrb.w	r0, [r6], #1
    aeae:	9305      	str	r3, [sp, #20]
    aeb0:	f7f7 fe3e 	bl	2b30 <foldcase>
    aeb4:	fa5f f980 	uxtb.w	r9, r0
    aeb8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
    aebc:	9b05      	ldr	r3, [sp, #20]
    aebe:	d113      	bne.n	aee8 <fnmatchx+0x1de>
    aec0:	bb23      	cbnz	r3, af0c <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
    aec2:	9b01      	ldr	r3, [sp, #4]
    aec4:	455b      	cmp	r3, fp
    aec6:	f43f af28 	beq.w	ad1a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    aeca:	2e00      	cmp	r6, #0
    aecc:	f43f af25 	beq.w	ad1a <fnmatchx+0x10>
            if (r == (void *)-1) {
    aed0:	1c71      	adds	r1, r6, #1
    aed2:	d103      	bne.n	aedc <fnmatchx+0x1d2>
                if (*string != '[')
    aed4:	2f5b      	cmp	r7, #91	; 0x5b
    aed6:	f47f af20 	bne.w	ad1a <fnmatchx+0x10>
    aeda:	4646      	mov	r6, r8
            ++string;
    aedc:	3201      	adds	r2, #1
            break;
    aede:	46b0      	mov	r8, r6
    aee0:	e762      	b.n	ada8 <fnmatchx+0x9e>
    aee2:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    aee4:	2300      	movs	r3, #0
    aee6:	e7d7      	b.n	ae98 <fnmatchx+0x18e>
        if (c == '/')
    aee8:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
    aeec:	d0f2      	beq.n	aed4 <fnmatchx+0x1ca>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    aeee:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    aef2:	d107      	bne.n	af04 <fnmatchx+0x1fa>
    aef4:	9b03      	ldr	r3, [sp, #12]
    aef6:	b94b      	cbnz	r3, af0c <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
    aef8:	7868      	ldrb	r0, [r5, #1]
    aefa:	f7f7 fe19 	bl	2b30 <foldcase>
    aefe:	1cae      	adds	r6, r5, #2
    af00:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
    af04:	f1b9 0f00 	cmp.w	r9, #0
    af08:	f43f af07 	beq.w	ad1a <fnmatchx+0x10>
        if (*pattern == '-' 
    af0c:	7833      	ldrb	r3, [r6, #0]
    af0e:	2b2d      	cmp	r3, #45	; 0x2d
    af10:	d120      	bne.n	af54 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    af12:	7870      	ldrb	r0, [r6, #1]
    af14:	4621      	mov	r1, r4
    af16:	f7f7 fe0b 	bl	2b30 <foldcase>
    af1a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    af1e:	d019      	beq.n	af54 <fnmatchx+0x24a>
    af20:	285d      	cmp	r0, #93	; 0x5d
    af22:	d017      	beq.n	af54 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    af24:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    af26:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    af2a:	d10a      	bne.n	af42 <fnmatchx+0x238>
    af2c:	9b03      	ldr	r3, [sp, #12]
    af2e:	b943      	cbnz	r3, af42 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
    af30:	78b0      	ldrb	r0, [r6, #2]
    af32:	f7f7 fdfd 	bl	2b30 <foldcase>
            if (c2 == EOS)
    af36:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    af3a:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    af3e:	f43f aeec 	beq.w	ad1a <fnmatchx+0x10>
            if (c <= test && test <= c2)
    af42:	9b00      	ldr	r3, [sp, #0]
    af44:	454b      	cmp	r3, r9
    af46:	db03      	blt.n	af50 <fnmatchx+0x246>
                ok = 1;
    af48:	4283      	cmp	r3, r0
    af4a:	bfd8      	it	le
    af4c:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    af50:	2300      	movs	r3, #0
    af52:	e7a8      	b.n	aea6 <fnmatchx+0x19c>
        } else if (c == test)
    af54:	9b00      	ldr	r3, [sp, #0]
    af56:	4635      	mov	r5, r6
    af58:	454b      	cmp	r3, r9
    af5a:	bf08      	it	eq
    af5c:	f04f 0b01 	moveq.w	fp, #1
    af60:	e7f6      	b.n	af50 <fnmatchx+0x246>
        return FNM_NORES;
    af62:	2003      	movs	r0, #3
    af64:	e6da      	b.n	ad1c <fnmatchx+0x12>
                return 0;
    af66:	4608      	mov	r0, r1
    af68:	e6d8      	b.n	ad1c <fnmatchx+0x12>

0000af6a <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    af6a:	2340      	movs	r3, #64	; 0x40
    af6c:	f7ff becd 	b.w	ad0a <fnmatchx>

0000af70 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    af70:	4770      	bx	lr

0000af72 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    af72:	6883      	ldr	r3, [r0, #8]
    af74:	6a1b      	ldr	r3, [r3, #32]
    af76:	b103      	cbz	r3, af7a <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    af78:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    af7a:	4770      	bx	lr

0000af7c <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    af7c:	6843      	ldr	r3, [r0, #4]
    af7e:	681b      	ldr	r3, [r3, #0]
{
    af80:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    af82:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    af84:	4620      	mov	r0, r4
    af86:	f7ff fff4 	bl	af72 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    af8a:	68a3      	ldr	r3, [r4, #8]
    af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af8e:	b10b      	cbz	r3, af94 <uninit+0x18>
		api->irq_rx_disable(dev);
    af90:	4620      	mov	r0, r4
    af92:	4798      	blx	r3
}
    af94:	2000      	movs	r0, #0
    af96:	bd10      	pop	{r4, pc}

0000af98 <enable>:
{
    af98:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    af9a:	6843      	ldr	r3, [r0, #4]
    af9c:	681b      	ldr	r3, [r3, #0]
    af9e:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    afa0:	b111      	cbz	r1, afa8 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    afa2:	6818      	ldr	r0, [r3, #0]
    afa4:	f7ff ffe5 	bl	af72 <uart_irq_tx_disable>
}
    afa8:	2000      	movs	r0, #0
    afaa:	bd08      	pop	{r3, pc}

0000afac <read>:
{
    afac:	b510      	push	{r4, lr}
    afae:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    afb0:	6843      	ldr	r3, [r0, #4]
    afb2:	68d8      	ldr	r0, [r3, #12]
    afb4:	f7ff fe89 	bl	acca <ring_buf_get>
    afb8:	6020      	str	r0, [r4, #0]
}
    afba:	2000      	movs	r0, #0
    afbc:	bd10      	pop	{r4, pc}

0000afbe <ring_buf_reset>:
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    afbe:	2300      	movs	r3, #0
	buf->tail = 0;
    afc0:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
    afc4:	6083      	str	r3, [r0, #8]
    afc6:	60c3      	str	r3, [r0, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
    afc8:	4770      	bx	lr

0000afca <write>:
{
    afca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    afce:	6845      	ldr	r5, [r0, #4]
{
    afd0:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    afd2:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    afd4:	7c1b      	ldrb	r3, [r3, #16]
{
    afd6:	460c      	mov	r4, r1
    afd8:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    afda:	b153      	cbz	r3, aff2 <write+0x28>
    afdc:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    afe0:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    afe2:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
    afe4:	d120      	bne.n	b028 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    afe6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    afea:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    afec:	2001      	movs	r0, #1
    afee:	4790      	blx	r2
    aff0:	e017      	b.n	b022 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    aff2:	68a8      	ldr	r0, [r5, #8]
    aff4:	f7ff fe04 	bl	ac00 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aff8:	682b      	ldr	r3, [r5, #0]
    affa:	6030      	str	r0, [r6, #0]
    affc:	330c      	adds	r3, #12
    affe:	2101      	movs	r1, #1
    b000:	f3bf 8f5b 	dmb	ish
    b004:	e853 2f00 	ldrex	r2, [r3]
    b008:	e843 1000 	strex	r0, r1, [r3]
    b00c:	2800      	cmp	r0, #0
    b00e:	d1f9      	bne.n	b004 <write+0x3a>
    b010:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    b014:	b92a      	cbnz	r2, b022 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    b016:	682b      	ldr	r3, [r5, #0]
    b018:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    b01a:	6883      	ldr	r3, [r0, #8]
    b01c:	69db      	ldr	r3, [r3, #28]
    b01e:	b103      	cbz	r3, b022 <write+0x58>
		api->irq_tx_enable(dev);
    b020:	4798      	blx	r3
}
    b022:	2000      	movs	r0, #0
    b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    b028:	6818      	ldr	r0, [r3, #0]
    b02a:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    b02e:	6883      	ldr	r3, [r0, #8]
    b030:	685b      	ldr	r3, [r3, #4]
    b032:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    b034:	e7d4      	b.n	afe0 <write+0x16>

0000b036 <uart_callback>:
{
    b036:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b03a:	4680      	mov	r8, r0
    b03c:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
    b03e:	6883      	ldr	r3, [r0, #8]
    b040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b042:	b103      	cbz	r3, b046 <uart_callback+0x10>
	return api->irq_update(dev);
    b044:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    b046:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b04c:	bb0b      	cbnz	r3, b092 <uart_callback+0x5c>
    b04e:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    b050:	68e8      	ldr	r0, [r5, #12]
    b052:	a901      	add	r1, sp, #4
    b054:	6902      	ldr	r2, [r0, #16]
    b056:	f7ff fd9d 	bl	ab94 <ring_buf_put_claim>
		if (len > 0) {
    b05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b05e:	4606      	mov	r6, r0
    b060:	b378      	cbz	r0, b0c2 <uart_callback+0x8c>
	if (api->fifo_read == NULL) {
    b062:	699b      	ldr	r3, [r3, #24]
			rd_len = uart_fifo_read(dev, data, len);
    b064:	9901      	ldr	r1, [sp, #4]
    b066:	b34b      	cbz	r3, b0bc <uart_callback+0x86>
	return api->fifo_read(dev, rx_data, size);
    b068:	4602      	mov	r2, r0
    b06a:	4640      	mov	r0, r8
    b06c:	4798      	blx	r3
    b06e:	4604      	mov	r4, r0
				new_data = true;
    b070:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    b072:	68e8      	ldr	r0, [r5, #12]
    b074:	4621      	mov	r1, r4
				new_data = true;
    b076:	bf18      	it	ne
    b078:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    b07a:	f7ff fda7 	bl	abcc <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    b07e:	b10c      	cbz	r4, b084 <uart_callback+0x4e>
    b080:	42a6      	cmp	r6, r4
    b082:	d0e5      	beq.n	b050 <uart_callback+0x1a>
	if (new_data) {
    b084:	b14f      	cbz	r7, b09a <uart_callback+0x64>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    b086:	682b      	ldr	r3, [r5, #0]
    b088:	2000      	movs	r0, #0
    b08a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    b08e:	4790      	blx	r2
}
    b090:	e003      	b.n	b09a <uart_callback+0x64>
	return api->irq_rx_ready(dev);
    b092:	4640      	mov	r0, r8
    b094:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    b096:	2800      	cmp	r0, #0
    b098:	d1d9      	bne.n	b04e <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    b09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b0a0:	b9db      	cbnz	r3, b0da <uart_callback+0xa4>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    b0a2:	68a8      	ldr	r0, [r5, #8]
    b0a4:	a901      	add	r1, sp, #4
    b0a6:	6902      	ldr	r2, [r0, #16]
    b0a8:	f7ff fdc9 	bl	ac3e <ring_buf_get_claim>
	if (len) {
    b0ac:	4604      	mov	r4, r0
    b0ae:	b9d8      	cbnz	r0, b0e8 <uart_callback+0xb2>
		uart_irq_tx_disable(dev);
    b0b0:	4640      	mov	r0, r8
    b0b2:	f7ff ff5e 	bl	af72 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    b0b6:	682b      	ldr	r3, [r5, #0]
    b0b8:	60dc      	str	r4, [r3, #12]
    b0ba:	e021      	b.n	b100 <uart_callback+0xca>
		return -ENOSYS;
    b0bc:	f06f 0457 	mvn.w	r4, #87	; 0x57
    b0c0:	e7d6      	b.n	b070 <uart_callback+0x3a>
	if (api->fifo_read == NULL) {
    b0c2:	699b      	ldr	r3, [r3, #24]
    b0c4:	b133      	cbz	r3, b0d4 <uart_callback+0x9e>
	return api->fifo_read(dev, rx_data, size);
    b0c6:	2201      	movs	r2, #1
    b0c8:	f10d 0103 	add.w	r1, sp, #3
    b0cc:	4640      	mov	r0, r8
    b0ce:	4798      	blx	r3
    b0d0:	4604      	mov	r4, r0
    b0d2:	e7d4      	b.n	b07e <uart_callback+0x48>
		return -ENOSYS;
    b0d4:	f06f 0457 	mvn.w	r4, #87	; 0x57
    b0d8:	e7d1      	b.n	b07e <uart_callback+0x48>
	return api->irq_tx_ready(dev);
    b0da:	4640      	mov	r0, r8
    b0dc:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    b0de:	2800      	cmp	r0, #0
    b0e0:	d1df      	bne.n	b0a2 <uart_callback+0x6c>
}
    b0e2:	b002      	add	sp, #8
    b0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
    b0e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
		len = uart_fifo_fill(dev, data, len);
    b0ec:	9901      	ldr	r1, [sp, #4]
    b0ee:	695b      	ldr	r3, [r3, #20]
    b0f0:	b163      	cbz	r3, b10c <uart_callback+0xd6>
	return api->fifo_fill(dev, tx_data, size);
    b0f2:	4602      	mov	r2, r0
    b0f4:	4640      	mov	r0, r8
    b0f6:	4798      	blx	r3
    b0f8:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    b0fa:	68a8      	ldr	r0, [r5, #8]
    b0fc:	f7ff fdc9 	bl	ac92 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    b100:	682b      	ldr	r3, [r5, #0]
    b102:	2001      	movs	r0, #1
    b104:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    b108:	4790      	blx	r2
}
    b10a:	e7ea      	b.n	b0e2 <uart_callback+0xac>
		return -ENOSYS;
    b10c:	f06f 0157 	mvn.w	r1, #87	; 0x57
    b110:	e7f3      	b.n	b0fa <uart_callback+0xc4>

0000b112 <atomic_or>:
{
    b112:	4603      	mov	r3, r0
}
    b114:	f3bf 8f5b 	dmb	ish
    b118:	e853 0f00 	ldrex	r0, [r3]
    b11c:	ea40 0201 	orr.w	r2, r0, r1
    b120:	e843 2c00 	strex	ip, r2, [r3]
    b124:	f1bc 0f00 	cmp.w	ip, #0
    b128:	d1f6      	bne.n	b118 <atomic_or+0x6>
    b12a:	f3bf 8f5b 	dmb	ish
    b12e:	4770      	bx	lr

0000b130 <atomic_and>:
{
    b130:	4603      	mov	r3, r0
}
    b132:	f3bf 8f5b 	dmb	ish
    b136:	e853 0f00 	ldrex	r0, [r3]
    b13a:	ea00 0201 	and.w	r2, r0, r1
    b13e:	e843 2c00 	strex	ip, r2, [r3]
    b142:	f1bc 0f00 	cmp.w	ip, #0
    b146:	d1f6      	bne.n	b136 <atomic_and+0x6>
    b148:	f3bf 8f5b 	dmb	ish
    b14c:	4770      	bx	lr

0000b14e <shell_signal_handle>:
{
    b14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    b150:	6885      	ldr	r5, [r0, #8]
    b152:	0109      	lsls	r1, r1, #4
    b154:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    b158:	4604      	mov	r4, r0
    b15a:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    b15c:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    b15e:	aa01      	add	r2, sp, #4
    b160:	4669      	mov	r1, sp
    b162:	4628      	mov	r0, r5
    b164:	f001 fc58 	bl	ca18 <z_impl_k_poll_signal_check>
	if (set) {
    b168:	9b00      	ldr	r3, [sp, #0]
    b16a:	b123      	cbz	r3, b176 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    b16c:	4628      	mov	r0, r5
    b16e:	f001 fc50 	bl	ca12 <z_impl_k_poll_signal_reset>
		handler(shell);
    b172:	4620      	mov	r0, r4
    b174:	47b0      	blx	r6
}
    b176:	b002      	add	sp, #8
    b178:	bd70      	pop	{r4, r5, r6, pc}

0000b17a <z_shell_strlen>:
{
    b17a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    b17c:	b110      	cbz	r0, b184 <z_shell_strlen+0xa>
    b17e:	f7f5 fe1a 	bl	db6 <strlen>
    b182:	b280      	uxth	r0, r0
}
    b184:	bd08      	pop	{r3, pc}

0000b186 <z_shell_raw_fprintf>:
{
    b186:	b40e      	push	{r1, r2, r3}
    b188:	b503      	push	{r0, r1, lr}
    b18a:	aa03      	add	r2, sp, #12
    b18c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b190:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b192:	f7f8 ff43 	bl	401c <z_shell_fprintf_fmt>
}
    b196:	b002      	add	sp, #8
    b198:	f85d eb04 	ldr.w	lr, [sp], #4
    b19c:	b003      	add	sp, #12
    b19e:	4770      	bx	lr

0000b1a0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b1a0:	f7fc be38 	b.w	7e14 <z_impl_k_mutex_lock>

0000b1a4 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    b1a4:	688b      	ldr	r3, [r1, #8]
    b1a6:	b920      	cbnz	r0, b1b2 <transport_evt_handler+0xe>
    b1a8:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    b1ac:	2100      	movs	r1, #0
    b1ae:	f7fd bc59 	b.w	8a64 <z_impl_k_poll_signal_raise>
    b1b2:	f503 7026 	add.w	r0, r3, #664	; 0x298
    b1b6:	e7f9      	b.n	b1ac <transport_evt_handler+0x8>

0000b1b8 <kill_handler>:
{
    b1b8:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    b1ba:	6883      	ldr	r3, [r0, #8]
    b1bc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    b1c0:	07db      	lsls	r3, r3, #31
{
    b1c2:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    b1c4:	d41a      	bmi.n	b1fc <kill_handler+0x44>
	err = shell->iface->api->uninit(shell->iface);
    b1c6:	6840      	ldr	r0, [r0, #4]
    b1c8:	6803      	ldr	r3, [r0, #0]
    b1ca:	685b      	ldr	r3, [r3, #4]
    b1cc:	4798      	blx	r3
	if (err != 0) {
    b1ce:	4605      	mov	r5, r0
    b1d0:	b920      	cbnz	r0, b1dc <kill_handler+0x24>
	z_shell_history_purge(shell->history);
    b1d2:	68e0      	ldr	r0, [r4, #12]
    b1d4:	f000 fc10 	bl	b9f8 <z_shell_history_purge>
	shell->ctx->state = state;
    b1d8:	68a3      	ldr	r3, [r4, #8]
    b1da:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    b1dc:	68a3      	ldr	r3, [r4, #8]
    b1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1e0:	b113      	cbz	r3, b1e8 <kill_handler+0x30>
		shell->ctx->uninit_cb(shell, err);
    b1e2:	4629      	mov	r1, r5
    b1e4:	4620      	mov	r0, r4
    b1e6:	4798      	blx	r3
	shell->ctx->tid = NULL;
    b1e8:	68a3      	ldr	r3, [r4, #8]
    b1ea:	2200      	movs	r2, #0
    b1ec:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    b1f0:	f7fd fa0a 	bl	8608 <z_impl_z_current_get>
}
    b1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    b1f8:	f7fa b896 	b.w	5328 <z_impl_k_thread_abort>
		return -EBUSY;
    b1fc:	f06f 050f 	mvn.w	r5, #15
    b200:	e7ec      	b.n	b1dc <kill_handler+0x24>

0000b202 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    b202:	f500 7019 	add.w	r0, r0, #612	; 0x264
    b206:	b111      	cbz	r1, b20e <z_flag_history_exit_set.isra.0+0xc>
    b208:	2104      	movs	r1, #4
    b20a:	f7ff bf82 	b.w	b112 <atomic_or>
    b20e:	f06f 0104 	mvn.w	r1, #4
    b212:	f7ff bf8d 	b.w	b130 <atomic_and>

0000b216 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    b216:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    b218:	f500 7018 	add.w	r0, r0, #608	; 0x260
    b21c:	b129      	cbz	r1, b22a <z_flag_insert_mode_set.isra.0+0x14>
    b21e:	2101      	movs	r1, #1
    b220:	f7ff ff77 	bl	b112 <atomic_or>
}
    b224:	f000 0001 	and.w	r0, r0, #1
    b228:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    b22a:	f06f 0101 	mvn.w	r1, #1
    b22e:	f7ff ff7f 	bl	b130 <atomic_and>
    b232:	e7f7      	b.n	b224 <z_flag_insert_mode_set.isra.0+0xe>

0000b234 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b234:	f7fc be66 	b.w	7f04 <z_impl_k_mutex_unlock>

0000b238 <shell_vfprintf>:
{
    b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b23a:	4604      	mov	r4, r0
	return shell->ctx->state;
    b23c:	6880      	ldr	r0, [r0, #8]
{
    b23e:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    b240:	7903      	ldrb	r3, [r0, #4]
    b242:	2b02      	cmp	r3, #2
{
    b244:	460d      	mov	r5, r1
    b246:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    b248:	d007      	beq.n	b25a <shell_vfprintf+0x22>
}
    b24a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    b24e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    b252:	f500 7019 	add.w	r0, r0, #612	; 0x264
    b256:	f7ff bf5c 	b.w	b112 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    b25a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b262:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    b266:	f7ff ff9b 	bl	b1a0 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    b26a:	68a3      	ldr	r3, [r4, #8]
    b26c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    b270:	0511      	lsls	r1, r2, #20
    b272:	d404      	bmi.n	b27e <shell_vfprintf+0x46>
    b274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b276:	b913      	cbnz	r3, b27e <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    b278:	4620      	mov	r0, r4
    b27a:	f000 fa07 	bl	b68c <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    b27e:	463b      	mov	r3, r7
    b280:	4632      	mov	r2, r6
    b282:	4629      	mov	r1, r5
    b284:	4620      	mov	r0, r4
    b286:	f000 fa62 	bl	b74e <z_shell_vfprintf>
    b28a:	68a3      	ldr	r3, [r4, #8]
    b28c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    b290:	0512      	lsls	r2, r2, #20
    b292:	d404      	bmi.n	b29e <shell_vfprintf+0x66>
    b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b296:	b913      	cbnz	r3, b29e <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    b298:	4620      	mov	r0, r4
    b29a:	f7f9 f9bb 	bl	4614 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    b29e:	6960      	ldr	r0, [r4, #20]
    b2a0:	f000 f82f 	bl	b302 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    b2a4:	68a0      	ldr	r0, [r4, #8]
}
    b2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    b2aa:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    b2ae:	f7ff bfc1 	b.w	b234 <k_mutex_unlock.isra.0>

0000b2b2 <shell_fprintf>:
{
    b2b2:	b40c      	push	{r2, r3}
    b2b4:	b507      	push	{r0, r1, r2, lr}
    b2b6:	ab04      	add	r3, sp, #16
    b2b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    b2bc:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    b2be:	f7ff ffbb 	bl	b238 <shell_vfprintf>
}
    b2c2:	b003      	add	sp, #12
    b2c4:	f85d eb04 	ldr.w	lr, [sp], #4
    b2c8:	b002      	add	sp, #8
    b2ca:	4770      	bx	lr

0000b2cc <shell_hexdump>:
{
    b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2d0:	4607      	mov	r7, r0
    b2d2:	460e      	mov	r6, r1
    b2d4:	4614      	mov	r4, r2
	const uint8_t *p = data;
    b2d6:	460d      	mov	r5, r1
	while (len) {
    b2d8:	b90c      	cbnz	r4, b2de <shell_hexdump+0x12>
}
    b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
    b2de:	2c10      	cmp	r4, #16
    b2e0:	46a0      	mov	r8, r4
    b2e2:	bf28      	it	cs
    b2e4:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
    b2e8:	462a      	mov	r2, r5
    b2ea:	1ba9      	subs	r1, r5, r6
    b2ec:	4643      	mov	r3, r8
    b2ee:	4638      	mov	r0, r7
    b2f0:	f7f8 fe28 	bl	3f44 <shell_hexdump_line>
		len -= line_len;
    b2f4:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
    b2f8:	4445      	add	r5, r8
    b2fa:	e7ed      	b.n	b2d8 <shell_hexdump+0xc>

0000b2fc <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    b2fc:	6883      	ldr	r3, [r0, #8]
    b2fe:	6399      	str	r1, [r3, #56]	; 0x38
}
    b300:	4770      	bx	lr

0000b302 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    b302:	6902      	ldr	r2, [r0, #16]
    b304:	6883      	ldr	r3, [r0, #8]
    b306:	6812      	ldr	r2, [r2, #0]
    b308:	6801      	ldr	r1, [r0, #0]
{
    b30a:	b510      	push	{r4, lr}
    b30c:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    b30e:	68c0      	ldr	r0, [r0, #12]
    b310:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    b312:	6923      	ldr	r3, [r4, #16]
    b314:	2200      	movs	r2, #0
    b316:	601a      	str	r2, [r3, #0]
}
    b318:	bd10      	pop	{r4, pc}

0000b31a <out_func>:
{
    b31a:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    b31c:	68cb      	ldr	r3, [r1, #12]
    b31e:	7c1b      	ldrb	r3, [r3, #16]
    b320:	2b02      	cmp	r3, #2
{
    b322:	4605      	mov	r5, r0
    b324:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    b326:	d104      	bne.n	b332 <out_func+0x18>
    b328:	280a      	cmp	r0, #10
    b32a:	d102      	bne.n	b332 <out_func+0x18>
		(void)out_func('\r', ctx);
    b32c:	200d      	movs	r0, #13
    b32e:	f7ff fff4 	bl	b31a <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    b332:	6923      	ldr	r3, [r4, #16]
    b334:	6822      	ldr	r2, [r4, #0]
    b336:	681b      	ldr	r3, [r3, #0]
    b338:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    b33a:	6922      	ldr	r2, [r4, #16]
    b33c:	6813      	ldr	r3, [r2, #0]
    b33e:	3301      	adds	r3, #1
    b340:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    b342:	6862      	ldr	r2, [r4, #4]
    b344:	4293      	cmp	r3, r2
    b346:	d102      	bne.n	b34e <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    b348:	4620      	mov	r0, r4
    b34a:	f7ff ffda 	bl	b302 <z_shell_fprintf_buffer_flush>
}
    b34e:	2000      	movs	r0, #0
    b350:	bd38      	pop	{r3, r4, r5, pc}

0000b352 <z_shell_strlen>:
{
    b352:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    b354:	b110      	cbz	r0, b35c <z_shell_strlen+0xa>
    b356:	f7f5 fd2e 	bl	db6 <strlen>
    b35a:	b280      	uxth	r0, r0
}
    b35c:	bd08      	pop	{r3, pc}

0000b35e <z_column_span_with_buffer_offsets_get>:
{
    b35e:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    b360:	7b03      	ldrb	r3, [r0, #12]
    b362:	8940      	ldrh	r0, [r0, #10]
    b364:	441a      	add	r2, r3
    b366:	4419      	add	r1, r3
    b368:	fbb2 f4f0 	udiv	r4, r2, r0
    b36c:	fbb1 f3f0 	udiv	r3, r1, r0
    b370:	fb00 2214 	mls	r2, r0, r4, r2
    b374:	fb00 1013 	mls	r0, r0, r3, r1
}
    b378:	1a10      	subs	r0, r2, r0
    b37a:	bd10      	pop	{r4, pc}

0000b37c <z_row_span_with_buffer_offsets_get>:
{
    b37c:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    b37e:	7b04      	ldrb	r4, [r0, #12]
    b380:	8943      	ldrh	r3, [r0, #10]
    b382:	4421      	add	r1, r4
    b384:	1910      	adds	r0, r2, r4
    b386:	fbb1 f1f3 	udiv	r1, r1, r3
    b38a:	fbb0 f0f3 	udiv	r0, r0, r3
}
    b38e:	1a40      	subs	r0, r0, r1
    b390:	bd10      	pop	{r4, pc}

0000b392 <z_shell_multiline_data_calc>:
{
    b392:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    b394:	7b05      	ldrb	r5, [r0, #12]
    b396:	8943      	ldrh	r3, [r0, #10]
    b398:	4429      	add	r1, r5
    b39a:	fbb1 f4f3 	udiv	r4, r1, r3
    b39e:	fb03 1114 	mls	r1, r3, r4, r1
    b3a2:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    b3a4:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    b3a6:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    b3a8:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    b3aa:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    b3ae:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    b3b2:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    b3b4:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    b3b6:	1c4c      	adds	r4, r1, #1
    b3b8:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    b3ba:	8042      	strh	r2, [r0, #2]
}
    b3bc:	bd30      	pop	{r4, r5, pc}

0000b3be <z_shell_pattern_remove>:
{
    b3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3c0:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    b3c2:	4611      	mov	r1, r2
{
    b3c4:	4615      	mov	r5, r2
    b3c6:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    b3c8:	f001 fced 	bl	cda6 <strstr>
    b3cc:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    b3ce:	4628      	mov	r0, r5
    b3d0:	f7ff ffbf 	bl	b352 <z_shell_strlen>
    b3d4:	4605      	mov	r5, r0
	if (!pattern_addr) {
    b3d6:	b1c4      	cbz	r4, b40a <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    b3d8:	42a7      	cmp	r7, r4
    b3da:	d207      	bcs.n	b3ec <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    b3dc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b3e0:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    b3e2:	bf02      	ittt	eq
    b3e4:	3501      	addeq	r5, #1
    b3e6:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    b3e8:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    b3ec:	4620      	mov	r0, r4
    b3ee:	f7ff ffb0 	bl	b352 <z_shell_strlen>
	*buff_len -= pattern_len;
    b3f2:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    b3f4:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
    b3f6:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    b3f8:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
    b3fa:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
    b3fc:	1961      	adds	r1, r4, r5
    b3fe:	4620      	mov	r0, r4
    b400:	b292      	uxth	r2, r2
}
    b402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b406:	f001 bb59 	b.w	cabc <memmove>
    b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b40c <z_shell_find_cmd>:
{
    b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b410:	460f      	mov	r7, r1
    b412:	b086      	sub	sp, #24
    b414:	4616      	mov	r6, r2
	if (parent) {
    b416:	4604      	mov	r4, r0
    b418:	b170      	cbz	r0, b438 <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    b41a:	4603      	mov	r3, r0
    b41c:	ac01      	add	r4, sp, #4
    b41e:	f100 0510 	add.w	r5, r0, #16
    b422:	6818      	ldr	r0, [r3, #0]
    b424:	6859      	ldr	r1, [r3, #4]
    b426:	4622      	mov	r2, r4
    b428:	c203      	stmia	r2!, {r0, r1}
    b42a:	3308      	adds	r3, #8
    b42c:	42ab      	cmp	r3, r5
    b42e:	4614      	mov	r4, r2
    b430:	d1f7      	bne.n	b422 <z_shell_find_cmd+0x16>
    b432:	6818      	ldr	r0, [r3, #0]
    b434:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
    b436:	ac01      	add	r4, sp, #4
    b438:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    b43c:	4641      	mov	r1, r8
    b43e:	4632      	mov	r2, r6
    b440:	4620      	mov	r0, r4
    b442:	f7f8 fec7 	bl	41d4 <z_shell_cmd_get>
    b446:	f108 0801 	add.w	r8, r8, #1
    b44a:	4605      	mov	r5, r0
    b44c:	b128      	cbz	r0, b45a <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    b44e:	6829      	ldr	r1, [r5, #0]
    b450:	4638      	mov	r0, r7
    b452:	f7f5 fca6 	bl	da2 <strcmp>
    b456:	2800      	cmp	r0, #0
    b458:	d1f0      	bne.n	b43c <z_shell_find_cmd+0x30>
}
    b45a:	4628      	mov	r0, r5
    b45c:	b006      	add	sp, #24
    b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b462 <z_shell_get_last_command>:
{
    b462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b466:	461c      	mov	r4, r3
    b468:	f8dd 8020 	ldr.w	r8, [sp, #32]
    b46c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    b470:	2300      	movs	r3, #0
{
    b472:	460f      	mov	r7, r1
    b474:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    b476:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
    b478:	6823      	ldr	r3, [r4, #0]
    b47a:	42bb      	cmp	r3, r7
				continue;
    b47c:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    b47e:	d21b      	bcs.n	b4b8 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    b480:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    b484:	f000 fb35 	bl	baf2 <z_shell_has_wildcard>
    b488:	6823      	ldr	r3, [r4, #0]
    b48a:	4682      	mov	sl, r0
    b48c:	b118      	cbz	r0, b496 <z_shell_get_last_command+0x34>
				(*match_arg)++;
    b48e:	3301      	adds	r3, #1
    b490:	6023      	str	r3, [r4, #0]
				continue;
    b492:	4628      	mov	r0, r5
    b494:	e7f0      	b.n	b478 <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    b496:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    b49a:	4642      	mov	r2, r8
    b49c:	4628      	mov	r0, r5
    b49e:	f7ff ffb5 	bl	b40c <z_shell_find_cmd>
		if (entry) {
    b4a2:	b148      	cbz	r0, b4b8 <z_shell_get_last_command+0x56>
			(*match_arg)++;
    b4a4:	6823      	ldr	r3, [r4, #0]
    b4a6:	1c5a      	adds	r2, r3, #1
    b4a8:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
    b4aa:	f1b9 0f00 	cmp.w	r9, #0
    b4ae:	d0e3      	beq.n	b478 <z_shell_get_last_command+0x16>
    b4b0:	4580      	cmp	r8, r0
    b4b2:	d1e1      	bne.n	b478 <z_shell_get_last_command+0x16>
			(*match_arg)--;
    b4b4:	6023      	str	r3, [r4, #0]
			return NULL;
    b4b6:	4655      	mov	r5, sl
}
    b4b8:	4628      	mov	r0, r5
    b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b4be <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
    b4be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b4c2:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
    b4c4:	a801      	add	r0, sp, #4
{
    b4c6:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
    b4c8:	f7fc fa10 	bl	78ec <z_device_get_all_static>
	const struct device *dev_end = dev + len;
    b4cc:	9d01      	ldr	r5, [sp, #4]
    b4ce:	2318      	movs	r3, #24
    b4d0:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
    b4d4:	2600      	movs	r6, #0

	while (dev < dev_end) {
    b4d6:	9801      	ldr	r0, [sp, #4]
    b4d8:	42a8      	cmp	r0, r5
    b4da:	d301      	bcc.n	b4e0 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
    b4dc:	2000      	movs	r0, #0
    b4de:	e00c      	b.n	b4fa <shell_device_lookup+0x3c>
	return z_device_ready(dev) ? 0 : -ENODEV;
    b4e0:	f000 ffa5 	bl	c42e <z_device_ready>
    b4e4:	b1c8      	cbz	r0, b51a <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
    b4e6:	9b01      	ldr	r3, [sp, #4]
    b4e8:	6818      	ldr	r0, [r3, #0]
    b4ea:	b1b0      	cbz	r0, b51a <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
    b4ec:	f7f5 fc63 	bl	db6 <strlen>
    b4f0:	b198      	cbz	r0, b51a <shell_device_lookup+0x5c>
		    && ((prefix == NULL)
    b4f2:	b92c      	cbnz	r4, b500 <shell_device_lookup+0x42>
			if (match_idx == idx) {
    b4f4:	42be      	cmp	r6, r7
    b4f6:	d114      	bne.n	b522 <shell_device_lookup+0x64>
				return dev;
    b4f8:	9801      	ldr	r0, [sp, #4]
}
    b4fa:	b002      	add	sp, #8
    b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
    b500:	9b01      	ldr	r3, [sp, #4]
    b502:	4620      	mov	r0, r4
    b504:	f8d3 8000 	ldr.w	r8, [r3]
    b508:	f7f5 fc55 	bl	db6 <strlen>
    b50c:	4641      	mov	r1, r8
    b50e:	4602      	mov	r2, r0
    b510:	4620      	mov	r0, r4
    b512:	f001 fc15 	bl	cd40 <strncmp>
    b516:	2800      	cmp	r0, #0
    b518:	d0ec      	beq.n	b4f4 <shell_device_lookup+0x36>
		++dev;
    b51a:	9b01      	ldr	r3, [sp, #4]
    b51c:	3318      	adds	r3, #24
    b51e:	9301      	str	r3, [sp, #4]
    b520:	e7d9      	b.n	b4d6 <shell_device_lookup+0x18>
			++match_idx;
    b522:	3601      	adds	r6, #1
    b524:	e7f9      	b.n	b51a <shell_device_lookup+0x5c>

0000b526 <z_shell_raw_fprintf>:
{
    b526:	b40e      	push	{r1, r2, r3}
    b528:	b503      	push	{r0, r1, lr}
    b52a:	aa03      	add	r2, sp, #12
    b52c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b530:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b532:	f7f8 fd73 	bl	401c <z_shell_fprintf_fmt>
}
    b536:	b002      	add	sp, #8
    b538:	f85d eb04 	ldr.w	lr, [sp], #4
    b53c:	b003      	add	sp, #12
    b53e:	4770      	bx	lr

0000b540 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    b540:	6882      	ldr	r2, [r0, #8]
{
    b542:	b538      	push	{r3, r4, r5, lr}
    b544:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    b546:	6810      	ldr	r0, [r2, #0]
    b548:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    b54a:	b110      	cbz	r0, b552 <full_line_cmd+0x12>
    b54c:	f7f5 fc33 	bl	db6 <strlen>
    b550:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    b552:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    b554:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    b556:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    b558:	fbb3 f2f0 	udiv	r2, r3, r0
    b55c:	fb00 3012 	mls	r0, r0, r2, r3
}
    b560:	fab0 f080 	clz	r0, r0
    b564:	0940      	lsrs	r0, r0, #5
    b566:	bd38      	pop	{r3, r4, r5, pc}

0000b568 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    b568:	6882      	ldr	r2, [r0, #8]
{
    b56a:	b538      	push	{r3, r4, r5, lr}
    b56c:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    b56e:	6810      	ldr	r0, [r2, #0]
    b570:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    b572:	b110      	cbz	r0, b57a <z_shell_cursor_in_empty_line+0x12>
    b574:	f7f5 fc1f 	bl	db6 <strlen>
    b578:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    b57a:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    b57c:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    b57e:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    b580:	fbb3 f2f0 	udiv	r2, r3, r0
    b584:	fb00 3012 	mls	r0, r0, r2, r3
}
    b588:	fab0 f080 	clz	r0, r0
    b58c:	0940      	lsrs	r0, r0, #5
    b58e:	bd38      	pop	{r3, r4, r5, pc}

0000b590 <z_shell_op_cond_next_line>:
{
    b590:	b510      	push	{r4, lr}
    b592:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    b594:	f7ff ffe8 	bl	b568 <z_shell_cursor_in_empty_line>
    b598:	b120      	cbz	r0, b5a4 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    b59a:	6960      	ldr	r0, [r4, #20]
}
    b59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    b5a0:	f7f8 beba 	b.w	4318 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    b5a4:	4620      	mov	r0, r4
    b5a6:	f7ff ffcb 	bl	b540 <full_line_cmd>
    b5aa:	2800      	cmp	r0, #0
    b5ac:	d1f5      	bne.n	b59a <z_shell_op_cond_next_line+0xa>
}
    b5ae:	bd10      	pop	{r4, pc}

0000b5b0 <z_shell_op_cursor_position_synchronize>:
{
    b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    b5b2:	6884      	ldr	r4, [r0, #8]
{
    b5b4:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    b5b6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    b5b8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    b5ba:	f104 0020 	add.w	r0, r4, #32
    b5be:	f7ff fee8 	bl	b392 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    b5c2:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    b5c4:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    b5c6:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    b5c8:	f7ff ffba 	bl	b540 <full_line_cmd>
    b5cc:	b110      	cbz	r0, b5d4 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    b5ce:	6968      	ldr	r0, [r5, #20]
    b5d0:	f7f8 fea2 	bl	4318 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    b5d4:	42b7      	cmp	r7, r6
    b5d6:	d107      	bne.n	b5e8 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    b5d8:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    b5da:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    b5dc:	4628      	mov	r0, r5
    b5de:	1ac9      	subs	r1, r1, r3
}
    b5e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    b5e4:	f7f8 beb4 	b.w	4350 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    b5e8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    b5ea:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b5ec:	4628      	mov	r0, r5
    b5ee:	1ac9      	subs	r1, r1, r3
    b5f0:	f7f8 fe98 	bl	4324 <z_shell_op_cursor_vert_move>
    b5f4:	e7f0      	b.n	b5d8 <z_shell_op_cursor_position_synchronize+0x28>

0000b5f6 <z_shell_op_cursor_move>:
{
    b5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5f8:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    b5fa:	6880      	ldr	r0, [r0, #8]
{
    b5fc:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    b5fe:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    b600:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    b602:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    b604:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    b606:	f7ff fec4 	bl	b392 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    b60a:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    b60c:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    b60e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    b610:	462a      	mov	r2, r5
    b612:	3020      	adds	r0, #32
    b614:	f7ff feb2 	bl	b37c <z_row_span_with_buffer_offsets_get>
    b618:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    b61a:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    b61c:	462a      	mov	r2, r5
    b61e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    b620:	3020      	adds	r0, #32
    b622:	f7ff fe9c 	bl	b35e <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    b626:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    b628:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    b62a:	4620      	mov	r0, r4
    b62c:	f7f8 fe7a 	bl	4324 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    b630:	4631      	mov	r1, r6
    b632:	4620      	mov	r0, r4
    b634:	f7f8 fe8c 	bl	4350 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    b638:	68a3      	ldr	r3, [r4, #8]
    b63a:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b63e <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    b63e:	6883      	ldr	r3, [r0, #8]
    b640:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    b642:	4249      	negs	r1, r1
    b644:	b209      	sxth	r1, r1
    b646:	f7ff bfd6 	b.w	b5f6 <z_shell_op_cursor_move>

0000b64a <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    b64a:	6883      	ldr	r3, [r0, #8]
    b64c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    b64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    b650:	1ac9      	subs	r1, r1, r3
    b652:	b209      	sxth	r1, r1
    b654:	f7ff bfcf 	b.w	b5f6 <z_shell_op_cursor_move>

0000b658 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    b658:	6883      	ldr	r3, [r0, #8]
    b65a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    b65c:	b11b      	cbz	r3, b666 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    b65e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b662:	f7ff bfc8 	b.w	b5f6 <z_shell_op_cursor_move>
}
    b666:	4770      	bx	lr

0000b668 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    b668:	6883      	ldr	r3, [r0, #8]
    b66a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    b66c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    b66e:	429a      	cmp	r2, r3
    b670:	d202      	bcs.n	b678 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    b672:	2101      	movs	r1, #1
    b674:	f7ff bfbf 	b.w	b5f6 <z_shell_op_cursor_move>
}
    b678:	4770      	bx	lr

0000b67a <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    b67a:	6883      	ldr	r3, [r0, #8]
    b67c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    b67e:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    b680:	4413      	add	r3, r2
    b682:	2200      	movs	r2, #0
    b684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    b688:	f7f8 be3a 	b.w	4300 <z_clear_eos>

0000b68c <z_shell_cmd_line_erase>:
{
    b68c:	b510      	push	{r4, lr}
    b68e:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    b690:	6880      	ldr	r0, [r0, #8]
    b692:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    b694:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    b696:	3020      	adds	r0, #32
    b698:	f7ff fe7b 	bl	b392 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    b69c:	68a3      	ldr	r3, [r4, #8]
    b69e:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    b6a0:	4620      	mov	r0, r4
    b6a2:	f1c1 0101 	rsb	r1, r1, #1
    b6a6:	f7f8 fe53 	bl	4350 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    b6aa:	68a3      	ldr	r3, [r4, #8]
    b6ac:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    b6ae:	4620      	mov	r0, r4
    b6b0:	3901      	subs	r1, #1
    b6b2:	f7f8 fe37 	bl	4324 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    b6b6:	4620      	mov	r0, r4
}
    b6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    b6bc:	f7f8 be20 	b.w	4300 <z_clear_eos>

0000b6c0 <z_shell_write>:
{
    b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c4:	4605      	mov	r5, r0
    b6c6:	b086      	sub	sp, #24
    b6c8:	460f      	mov	r7, r1
    b6ca:	4614      	mov	r4, r2
	size_t offset = 0;
    b6cc:	2600      	movs	r6, #0
	while (length) {
    b6ce:	b914      	cbnz	r4, b6d6 <z_shell_write+0x16>
}
    b6d0:	b006      	add	sp, #24
    b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    b6d6:	6868      	ldr	r0, [r5, #4]
    b6d8:	6803      	ldr	r3, [r0, #0]
    b6da:	4622      	mov	r2, r4
    b6dc:	f8d3 800c 	ldr.w	r8, [r3, #12]
    b6e0:	19b9      	adds	r1, r7, r6
    b6e2:	466b      	mov	r3, sp
    b6e4:	47c0      	blx	r8
		offset += tmp_cnt;
    b6e6:	9a00      	ldr	r2, [sp, #0]
    b6e8:	4416      	add	r6, r2
		length -= tmp_cnt;
    b6ea:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    b6ec:	2a00      	cmp	r2, #0
    b6ee:	d1ee      	bne.n	b6ce <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    b6f0:	68ab      	ldr	r3, [r5, #8]
    b6f2:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    b6f4:	2903      	cmp	r1, #3
    b6f6:	d0ea      	beq.n	b6ce <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    b6f8:	2902      	cmp	r1, #2
    b6fa:	d813      	bhi.n	b724 <z_shell_write+0x64>
		k_poll_event_init(&event,
    b6fc:	f503 7326 	add.w	r3, r3, #664	; 0x298
    b700:	2101      	movs	r1, #1
    b702:	a801      	add	r0, sp, #4
    b704:	f001 f963 	bl	c9ce <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    b708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b70c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b710:	2101      	movs	r1, #1
    b712:	a801      	add	r0, sp, #4
    b714:	f7fd f94a 	bl	89ac <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    b718:	68a8      	ldr	r0, [r5, #8]
    b71a:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    b71e:	f001 f978 	bl	ca12 <z_impl_k_poll_signal_reset>
    b722:	e7d4      	b.n	b6ce <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    b724:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    b728:	0792      	lsls	r2, r2, #30
    b72a:	d5fb      	bpl.n	b724 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b72c:	f3bf 8f5b 	dmb	ish
    b730:	f503 7319 	add.w	r3, r3, #612	; 0x264
    b734:	e853 2f00 	ldrex	r2, [r3]
    b738:	f022 0202 	bic.w	r2, r2, #2
    b73c:	e843 2100 	strex	r1, r2, [r3]
    b740:	2900      	cmp	r1, #0
    b742:	d1f7      	bne.n	b734 <z_shell_write+0x74>
    b744:	f3bf 8f5b 	dmb	ish
	return ret;
    b748:	e7c1      	b.n	b6ce <z_shell_write+0xe>

0000b74a <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    b74a:	f7ff bfb9 	b.w	b6c0 <z_shell_write>

0000b74e <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    b74e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b750:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
    b752:	6883      	ldr	r3, [r0, #8]
    b754:	4615      	mov	r5, r2
    b756:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    b75a:	06d2      	lsls	r2, r2, #27
{
    b75c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    b75e:	d513      	bpl.n	b788 <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
    b760:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    b764:	428a      	cmp	r2, r1
    b766:	d00f      	beq.n	b788 <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    b768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b76a:	f8ad 3004 	strh.w	r3, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    b76e:	f7f8 fe47 	bl	4400 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    b772:	6960      	ldr	r0, [r4, #20]
    b774:	4632      	mov	r2, r6
    b776:	4629      	mov	r1, r5
    b778:	f7f8 fc50 	bl	401c <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    b77c:	a901      	add	r1, sp, #4
    b77e:	4620      	mov	r0, r4
    b780:	f7f8 fe5e 	bl	4440 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    b784:	b003      	add	sp, #12
    b786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    b788:	6960      	ldr	r0, [r4, #20]
    b78a:	4632      	mov	r2, r6
    b78c:	4629      	mov	r1, r5
}
    b78e:	b003      	add	sp, #12
    b790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    b794:	f7f8 bc42 	b.w	401c <z_shell_fprintf_fmt>

0000b798 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    b798:	b40c      	push	{r2, r3}
    b79a:	b507      	push	{r0, r1, r2, lr}
    b79c:	ab04      	add	r3, sp, #16
    b79e:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    b7a2:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    b7a4:	f7ff ffd3 	bl	b74e <z_shell_vfprintf>
	va_end(args);
}
    b7a8:	b003      	add	sp, #12
    b7aa:	f85d eb04 	ldr.w	lr, [sp], #4
    b7ae:	b002      	add	sp, #8
    b7b0:	4770      	bx	lr

0000b7b2 <data_insert>:
{
    b7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    b7b6:	6886      	ldr	r6, [r0, #8]
    b7b8:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    b7ba:	18ab      	adds	r3, r5, r2
    b7bc:	2bff      	cmp	r3, #255	; 0xff
{
    b7be:	4607      	mov	r7, r0
    b7c0:	4688      	mov	r8, r1
    b7c2:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    b7c4:	dc1e      	bgt.n	b804 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    b7c6:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    b7c8:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    b7ca:	3342      	adds	r3, #66	; 0x42
    b7cc:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    b7ce:	b2ad      	uxth	r5, r5
    b7d0:	462a      	mov	r2, r5
    b7d2:	4631      	mov	r1, r6
    b7d4:	1930      	adds	r0, r6, r4
    b7d6:	f001 f971 	bl	cabc <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b7da:	4622      	mov	r2, r4
    b7dc:	4641      	mov	r1, r8
    b7de:	4630      	mov	r0, r6
    b7e0:	f001 f95e 	bl	caa0 <memcpy>
	shell->ctx->cmd_buff_len += len;
    b7e4:	68b9      	ldr	r1, [r7, #8]
    b7e6:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
    b7e8:	4423      	add	r3, r4
    b7ea:	b29b      	uxth	r3, r3
    b7ec:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    b7ee:	440b      	add	r3, r1
    b7f0:	2200      	movs	r2, #0
    b7f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    b7f6:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    b7fa:	079b      	lsls	r3, r3, #30
    b7fc:	d404      	bmi.n	b808 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
    b7fe:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
    b800:	4414      	add	r4, r2
    b802:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
    b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    b808:	4629      	mov	r1, r5
    b80a:	4638      	mov	r0, r7
}
    b80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    b810:	f7f8 be90 	b.w	4534 <reprint_from_cursor>

0000b814 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    b814:	f7ff bfcd 	b.w	b7b2 <data_insert>

0000b818 <z_shell_op_char_delete>:
{
    b818:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    b81a:	6883      	ldr	r3, [r0, #8]
{
    b81c:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    b81e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    b820:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    b822:	1a24      	subs	r4, r4, r0
    b824:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    b826:	b18c      	cbz	r4, b84c <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    b828:	3042      	adds	r0, #66	; 0x42
    b82a:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
    b82c:	4622      	mov	r2, r4
    b82e:	1c41      	adds	r1, r0, #1
    b830:	f001 f944 	bl	cabc <memmove>
	--shell->ctx->cmd_buff_len;
    b834:	68aa      	ldr	r2, [r5, #8]
    b836:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    b838:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    b83a:	3b01      	subs	r3, #1
    b83c:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    b83e:	4628      	mov	r0, r5
    b840:	2201      	movs	r2, #1
}
    b842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    b846:	b289      	uxth	r1, r1
    b848:	f7f8 be74 	b.w	4534 <reprint_from_cursor>
}
    b84c:	bd38      	pop	{r3, r4, r5, pc}

0000b84e <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    b84e:	6883      	ldr	r3, [r0, #8]
    b850:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    b852:	b510      	push	{r4, lr}
    b854:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    b856:	b152      	cbz	r2, b86e <z_shell_op_char_backspace+0x20>
    b858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    b85a:	b143      	cbz	r3, b86e <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    b85c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b860:	f7ff fec9 	bl	b5f6 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    b864:	4620      	mov	r0, r4
}
    b866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    b86a:	f7ff bfd5 	b.w	b818 <z_shell_op_char_delete>
}
    b86e:	bd10      	pop	{r4, pc}

0000b870 <z_shell_raw_fprintf>:
{
    b870:	b40e      	push	{r1, r2, r3}
    b872:	b503      	push	{r0, r1, lr}
    b874:	aa03      	add	r2, sp, #12
    b876:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b87a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b87c:	f7f8 fbce 	bl	401c <z_shell_fprintf_fmt>
}
    b880:	b002      	add	sp, #8
    b882:	f85d eb04 	ldr.w	lr, [sp], #4
    b886:	b003      	add	sp, #12
    b888:	4770      	bx	lr

0000b88a <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    b88a:	6983      	ldr	r3, [r0, #24]
    b88c:	2000      	movs	r0, #0
    b88e:	6018      	str	r0, [r3, #0]
}
    b890:	4770      	bx	lr

0000b892 <z_shell_raw_fprintf>:
{
    b892:	b40e      	push	{r1, r2, r3}
    b894:	b503      	push	{r0, r1, lr}
    b896:	aa03      	add	r2, sp, #12
    b898:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b89c:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b89e:	f7f8 fbbd 	bl	401c <z_shell_fprintf_fmt>
}
    b8a2:	b002      	add	sp, #8
    b8a4:	f85d eb04 	ldr.w	lr, [sp], #4
    b8a8:	b003      	add	sp, #12
    b8aa:	4770      	bx	lr

0000b8ac <cmd_bacskpace_mode_backspace>:
    b8ac:	6883      	ldr	r3, [r0, #8]
    b8ae:	f3bf 8f5b 	dmb	ish
    b8b2:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b8b6:	e853 2f00 	ldrex	r2, [r3]
    b8ba:	f022 0208 	bic.w	r2, r2, #8
    b8be:	e843 2100 	strex	r1, r2, [r3]
    b8c2:	2900      	cmp	r1, #0
    b8c4:	d1f7      	bne.n	b8b6 <cmd_bacskpace_mode_backspace+0xa>
    b8c6:	f3bf 8f5b 	dmb	ish
}
    b8ca:	2000      	movs	r0, #0
    b8cc:	4770      	bx	lr

0000b8ce <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8ce:	6883      	ldr	r3, [r0, #8]
    b8d0:	f3bf 8f5b 	dmb	ish
    b8d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b8d8:	e853 2f00 	ldrex	r2, [r3]
    b8dc:	f042 0208 	orr.w	r2, r2, #8
    b8e0:	e843 2100 	strex	r1, r2, [r3]
    b8e4:	2900      	cmp	r1, #0
    b8e6:	d1f7      	bne.n	b8d8 <cmd_bacskpace_mode_delete+0xa>
    b8e8:	f3bf 8f5b 	dmb	ish
}
    b8ec:	2000      	movs	r0, #0
    b8ee:	4770      	bx	lr

0000b8f0 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b8f0:	6883      	ldr	r3, [r0, #8]
    b8f2:	f3bf 8f5b 	dmb	ish
    b8f6:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b8fa:	e853 2f00 	ldrex	r2, [r3]
    b8fe:	f022 0202 	bic.w	r2, r2, #2
    b902:	e843 2100 	strex	r1, r2, [r3]
    b906:	2900      	cmp	r1, #0
    b908:	d1f7      	bne.n	b8fa <cmd_echo_off+0xa>
    b90a:	f3bf 8f5b 	dmb	ish
}
    b90e:	2000      	movs	r0, #0
    b910:	4770      	bx	lr

0000b912 <cmd_colors_off>:
    b912:	6883      	ldr	r3, [r0, #8]
    b914:	f3bf 8f5b 	dmb	ish
    b918:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b91c:	e853 2f00 	ldrex	r2, [r3]
    b920:	f022 0210 	bic.w	r2, r2, #16
    b924:	e843 2100 	strex	r1, r2, [r3]
    b928:	2900      	cmp	r1, #0
    b92a:	d1f7      	bne.n	b91c <cmd_colors_off+0xa>
    b92c:	f3bf 8f5b 	dmb	ish
}
    b930:	2000      	movs	r0, #0
    b932:	4770      	bx	lr

0000b934 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b934:	6883      	ldr	r3, [r0, #8]
    b936:	f3bf 8f5b 	dmb	ish
    b93a:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b93e:	e853 2f00 	ldrex	r2, [r3]
    b942:	f042 0210 	orr.w	r2, r2, #16
    b946:	e843 2100 	strex	r1, r2, [r3]
    b94a:	2900      	cmp	r1, #0
    b94c:	d1f7      	bne.n	b93e <cmd_colors_on+0xa>
    b94e:	f3bf 8f5b 	dmb	ish
}
    b952:	2000      	movs	r0, #0
    b954:	4770      	bx	lr

0000b956 <cmd_echo_on>:
    b956:	6883      	ldr	r3, [r0, #8]
    b958:	f3bf 8f5b 	dmb	ish
    b95c:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b960:	e853 2f00 	ldrex	r2, [r3]
    b964:	f042 0202 	orr.w	r2, r2, #2
    b968:	e843 2100 	strex	r1, r2, [r3]
    b96c:	2900      	cmp	r1, #0
    b96e:	d1f7      	bne.n	b960 <cmd_echo_on+0xa>
    b970:	f3bf 8f5b 	dmb	ish
}
    b974:	2000      	movs	r0, #0
    b976:	4770      	bx	lr

0000b978 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    b978:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    b97a:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    b97c:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    b97e:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    b982:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    b984:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    b986:	2200      	movs	r2, #0
	node->prev = NULL;
    b988:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    b98c:	8919      	ldrh	r1, [r3, #8]
    b98e:	895b      	ldrh	r3, [r3, #10]
    b990:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    b992:	310c      	adds	r1, #12
    b994:	f7ff f97d 	bl	ac92 <ring_buf_get_finish>

	return true;
}
    b998:	2001      	movs	r0, #1
    b99a:	bd08      	pop	{r3, pc}

0000b99c <z_shell_history_mode_exit>:
	history->current = NULL;
    b99c:	2300      	movs	r3, #0
    b99e:	60c3      	str	r3, [r0, #12]
}
    b9a0:	4770      	bx	lr

0000b9a2 <z_shell_history_get>:
{
    b9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9a4:	461f      	mov	r7, r3
	return list->head == list;
    b9a6:	4603      	mov	r3, r0
    b9a8:	4616      	mov	r6, r2
    b9aa:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    b9ae:	429c      	cmp	r4, r3
    b9b0:	d102      	bne.n	b9b8 <z_shell_history_get+0x16>
		*len = 0U;
    b9b2:	2000      	movs	r0, #0
    b9b4:	8038      	strh	r0, [r7, #0]
}
    b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    b9b8:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    b9ba:	b9b1      	cbnz	r1, b9ea <z_shell_history_get+0x48>
		if (history->current == NULL) {
    b9bc:	2d00      	cmp	r5, #0
    b9be:	d0f8      	beq.n	b9b2 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    b9c0:	42a5      	cmp	r5, r4
    b9c2:	d102      	bne.n	b9ca <z_shell_history_get+0x28>
	history->current = l_item;
    b9c4:	2300      	movs	r3, #0
    b9c6:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    b9c8:	e7f3      	b.n	b9b2 <z_shell_history_get+0x10>
    b9ca:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    b9cc:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    b9ce:	2c00      	cmp	r4, #0
    b9d0:	d0ef      	beq.n	b9b2 <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b9d2:	8922      	ldrh	r2, [r4, #8]
    b9d4:	f104 010c 	add.w	r1, r4, #12
    b9d8:	4630      	mov	r0, r6
    b9da:	f001 f861 	bl	caa0 <memcpy>
		*len = h_item->len;
    b9de:	8923      	ldrh	r3, [r4, #8]
    b9e0:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    b9e2:	2200      	movs	r2, #0
    b9e4:	54f2      	strb	r2, [r6, r3]
		return true;
    b9e6:	2001      	movs	r0, #1
    b9e8:	e7e5      	b.n	b9b6 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    b9ea:	2d00      	cmp	r5, #0
    b9ec:	d0ee      	beq.n	b9cc <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    b9ee:	6883      	ldr	r3, [r0, #8]
    b9f0:	429d      	cmp	r5, r3
    b9f2:	d0e7      	beq.n	b9c4 <z_shell_history_get+0x22>
    b9f4:	682c      	ldr	r4, [r5, #0]
    b9f6:	e7e9      	b.n	b9cc <z_shell_history_get+0x2a>

0000b9f8 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    b9f8:	b538      	push	{r3, r4, r5, lr}
    b9fa:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    b9fc:	1d05      	adds	r5, r0, #4
    b9fe:	6863      	ldr	r3, [r4, #4]
    ba00:	42ab      	cmp	r3, r5
    ba02:	d004      	beq.n	ba0e <z_shell_history_purge+0x16>
    ba04:	4620      	mov	r0, r4
    ba06:	f7ff ffb7 	bl	b978 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    ba0a:	2800      	cmp	r0, #0
    ba0c:	d1f7      	bne.n	b9fe <z_shell_history_purge+0x6>
	}
}
    ba0e:	bd38      	pop	{r3, r4, r5, pc}

0000ba10 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    ba10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
    ba14:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    ba16:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    ba1a:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    ba1e:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    ba20:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    ba24:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    ba26:	429d      	cmp	r5, r3
{
    ba28:	4604      	mov	r4, r0
    ba2a:	468a      	mov	sl, r1
    ba2c:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    ba2e:	d841      	bhi.n	bab4 <z_shell_history_put+0xa4>
	history->current = NULL;
    ba30:	2300      	movs	r3, #0
    ba32:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    ba34:	2a00      	cmp	r2, #0
    ba36:	d03d      	beq.n	bab4 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    ba38:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    ba3c:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba3e:	4581      	cmp	r9, r0
    ba40:	d12d      	bne.n	ba9e <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    ba42:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    ba44:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    ba48:	6820      	ldr	r0, [r4, #0]
    ba4a:	462a      	mov	r2, r5
    ba4c:	a901      	add	r1, sp, #4
    ba4e:	f7ff f8a1 	bl	ab94 <ring_buf_put_claim>
		if (claim_len < total_len) {
    ba52:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    ba54:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    ba56:	d930      	bls.n	baba <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    ba58:	6820      	ldr	r0, [r4, #0]
    ba5a:	462a      	mov	r2, r5
    ba5c:	a901      	add	r1, sp, #4
    ba5e:	f7ff f899 	bl	ab94 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    ba62:	4285      	cmp	r5, r0
    ba64:	d12a      	bne.n	babc <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    ba66:	4631      	mov	r1, r6
    ba68:	6820      	ldr	r0, [r4, #0]
    ba6a:	f7ff f8af 	bl	abcc <ring_buf_put_finish>
				padding += claim_len;
    ba6e:	44b0      	add	r8, r6
    ba70:	fa1f f888 	uxth.w	r8, r8
    ba74:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    ba76:	9d01      	ldr	r5, [sp, #4]
    ba78:	4651      	mov	r1, sl
	item->len = len;
    ba7a:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    ba7c:	f8a5 800a 	strh.w	r8, [r5, #10]
    ba80:	463a      	mov	r2, r7
    ba82:	f105 000c 	add.w	r0, r5, #12
    ba86:	f001 f80b 	bl	caa0 <memcpy>
	sys_dnode_t *const head = list->head;
    ba8a:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    ba8c:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    ba8e:	e9c5 3900 	strd	r3, r9, [r5]
    ba92:	4631      	mov	r1, r6
	head->prev = node;
    ba94:	605d      	str	r5, [r3, #4]
	list->head = node;
    ba96:	6065      	str	r5, [r4, #4]
    ba98:	f7ff f898 	bl	abcc <ring_buf_put_finish>
			break;
    ba9c:	e00a      	b.n	bab4 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    ba9e:	9001      	str	r0, [sp, #4]
	if (l_item &&
    baa0:	2800      	cmp	r0, #0
    baa2:	d0cf      	beq.n	ba44 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    baa4:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    baa6:	4293      	cmp	r3, r2
    baa8:	d1cc      	bne.n	ba44 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    baaa:	300c      	adds	r0, #12
    baac:	f000 ffe8 	bl	ca80 <memcmp>
	   (h_item->len == len) &&
    bab0:	2800      	cmp	r0, #0
    bab2:	d1c7      	bne.n	ba44 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    bab4:	b003      	add	sp, #12
    bab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    baba:	d0dc      	beq.n	ba76 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    babc:	6820      	ldr	r0, [r4, #0]
    babe:	2100      	movs	r1, #0
    bac0:	f7ff f884 	bl	abcc <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    bac4:	6863      	ldr	r3, [r4, #4]
    bac6:	4599      	cmp	r9, r3
    bac8:	d107      	bne.n	bada <z_shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
    baca:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
    bacc:	e9c3 bb00 	strd	fp, fp, [r3]
__ssp_bos_icheck3(memset, void *, int)
    bad0:	f8c3 b008 	str.w	fp, [r3, #8]
    bad4:	f8c3 b00c 	str.w	fp, [r3, #12]
}
    bad8:	e7b6      	b.n	ba48 <z_shell_history_put+0x38>
    bada:	4620      	mov	r0, r4
    badc:	f7ff ff4c 	bl	b978 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    bae0:	2800      	cmp	r0, #0
    bae2:	d1b1      	bne.n	ba48 <z_shell_history_put+0x38>
    bae4:	e7f1      	b.n	baca <z_shell_history_put+0xba>

0000bae6 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    bae6:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    bae8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    baec:	2300      	movs	r3, #0
    baee:	60c3      	str	r3, [r0, #12]
}
    baf0:	4770      	bx	lr

0000baf2 <z_shell_has_wildcard>:
{
    baf2:	b510      	push	{r4, lr}
    baf4:	4604      	mov	r4, r0
    baf6:	b908      	cbnz	r0, bafc <z_shell_has_wildcard+0xa>
	return false;
    baf8:	2000      	movs	r0, #0
}
    bafa:	bd10      	pop	{r4, pc}
    bafc:	f7f5 f95b 	bl	db6 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    bb00:	2300      	movs	r3, #0
    bb02:	b280      	uxth	r0, r0
    bb04:	4283      	cmp	r3, r0
    bb06:	d2f7      	bcs.n	baf8 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    bb08:	5ce2      	ldrb	r2, [r4, r3]
    bb0a:	2a3f      	cmp	r2, #63	; 0x3f
    bb0c:	d003      	beq.n	bb16 <z_shell_has_wildcard+0x24>
    bb0e:	2a2a      	cmp	r2, #42	; 0x2a
    bb10:	d001      	beq.n	bb16 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    bb12:	3301      	adds	r3, #1
    bb14:	e7f6      	b.n	bb04 <z_shell_has_wildcard+0x12>
			return true;
    bb16:	2001      	movs	r0, #1
    bb18:	e7ef      	b.n	bafa <z_shell_has_wildcard+0x8>

0000bb1a <z_shell_wildcard_prepare>:
{
    bb1a:	b510      	push	{r4, lr}
    bb1c:	4604      	mov	r4, r0
    bb1e:	6880      	ldr	r0, [r0, #8]
    bb20:	f44f 7280 	mov.w	r2, #256	; 0x100
    bb24:	2100      	movs	r1, #0
    bb26:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    bb2a:	f000 ffe1 	bl	caf0 <memset>
	memcpy(shell->ctx->temp_buff,
    bb2e:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bb30:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    bb32:	f100 0142 	add.w	r1, r0, #66	; 0x42
    bb36:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    bb3a:	f000 ffb1 	bl	caa0 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    bb3e:	68a0      	ldr	r0, [r4, #8]
    bb40:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    bb44:	f7f8 fb6c 	bl	4220 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    bb48:	68a3      	ldr	r3, [r4, #8]
    bb4a:	f513 70a1 	adds.w	r0, r3, #322	; 0x142
    bb4e:	d007      	beq.n	bb60 <z_shell_wildcard_prepare+0x46>
    bb50:	f7f5 f931 	bl	db6 <strlen>
    bb54:	b283      	uxth	r3, r0
    bb56:	68a2      	ldr	r2, [r4, #8]
    bb58:	3301      	adds	r3, #1
    bb5a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
    bb5e:	bd10      	pop	{r4, pc}
    bb60:	4603      	mov	r3, r0
    bb62:	e7f8      	b.n	bb56 <z_shell_wildcard_prepare+0x3c>

0000bb64 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    bb64:	b510      	push	{r4, lr}
    bb66:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    bb68:	6880      	ldr	r0, [r0, #8]
    bb6a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    bb6e:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    bb72:	3042      	adds	r0, #66	; 0x42
    bb74:	f000 ff94 	bl	caa0 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    bb78:	68a3      	ldr	r3, [r4, #8]
    bb7a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    bb7e:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    bb80:	bd10      	pop	{r4, pc}

0000bb82 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    bb82:	2200      	movs	r2, #0
    bb84:	e9c0 2200 	strd	r2, r2, [r0]
    bb88:	6082      	str	r2, [r0, #8]
}
    bb8a:	4770      	bx	lr

0000bb8c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    bb8c:	f000 bc7d 	b.w	c48a <z_fatal_error>

0000bb90 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    bb90:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    bb92:	6800      	ldr	r0, [r0, #0]
    bb94:	f000 bc79 	b.w	c48a <z_fatal_error>

0000bb98 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    bb98:	2100      	movs	r1, #0
    bb9a:	2001      	movs	r0, #1
    bb9c:	f7ff bff6 	b.w	bb8c <z_arm_fatal_error>

0000bba0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    bba0:	b508      	push	{r3, lr}
	handler();
    bba2:	f7f9 f99f 	bl	4ee4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    bba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    bbaa:	f7f9 ba85 	b.w	50b8 <z_arm_exc_exit>

0000bbae <malloc_prepare>:
}
    bbae:	2000      	movs	r0, #0
    bbb0:	4770      	bx	lr

0000bbb2 <_stdout_hook_default>:
}
    bbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bbb6:	4770      	bx	lr

0000bbb8 <_stdin_hook_default>:
}
    bbb8:	2000      	movs	r0, #0
    bbba:	4770      	bx	lr

0000bbbc <_read>:
{
    bbbc:	4608      	mov	r0, r1
    bbbe:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    bbc0:	f7f9 bc92 	b.w	54e8 <z_impl_zephyr_read_stdin>

0000bbc4 <_write>:
{
    bbc4:	4608      	mov	r0, r1
    bbc6:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    bbc8:	f7f9 bca2 	b.w	5510 <z_impl_zephyr_write_stdout>

0000bbcc <_close>:
    bbcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bbd0:	4770      	bx	lr

0000bbd2 <_lseek>:
}
    bbd2:	2000      	movs	r0, #0
    bbd4:	4770      	bx	lr

0000bbd6 <_isatty>:
}
    bbd6:	2802      	cmp	r0, #2
    bbd8:	bfcc      	ite	gt
    bbda:	2000      	movgt	r0, #0
    bbdc:	2001      	movle	r0, #1
    bbde:	4770      	bx	lr

0000bbe0 <_kill>:
}
    bbe0:	2000      	movs	r0, #0
    bbe2:	4770      	bx	lr

0000bbe4 <_getpid>:
}
    bbe4:	2000      	movs	r0, #0
    bbe6:	4770      	bx	lr

0000bbe8 <_fstat>:
	st->st_mode = S_IFCHR;
    bbe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bbec:	604b      	str	r3, [r1, #4]
}
    bbee:	2000      	movs	r0, #0
    bbf0:	4770      	bx	lr

0000bbf2 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    bbf2:	b510      	push	{r4, lr}
    bbf4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    bbf6:	2014      	movs	r0, #20
    bbf8:	f7fd f8a0 	bl	8d3c <malloc>
    bbfc:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    bbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
    bc02:	f000 bc84 	b.w	c50e <z_impl_k_mutex_init>

0000bc06 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    bc06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc0e:	f7fc b901 	b.w	7e14 <z_impl_k_mutex_lock>

0000bc12 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    bc12:	f7fc b977 	b.w	7f04 <z_impl_k_mutex_unlock>

0000bc16 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    bc16:	f7fb bea1 	b.w	795c <z_impl_z_errno>

0000bc1a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    bc1a:	b084      	sub	sp, #16
    bc1c:	ab04      	add	r3, sp, #16
    bc1e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    bc22:	f89d 3004 	ldrb.w	r3, [sp, #4]
    bc26:	2b06      	cmp	r3, #6
    bc28:	d108      	bne.n	bc3c <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    bc2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc2e:	2201      	movs	r2, #1
    bc30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    bc34:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    bc38:	bf20      	wfe
    while (true)
    bc3a:	e7fd      	b.n	bc38 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    bc3c:	b004      	add	sp, #16
    bc3e:	4770      	bx	lr

0000bc40 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    bc40:	b084      	sub	sp, #16
    bc42:	ab04      	add	r3, sp, #16
    bc44:	e903 0007 	stmdb	r3, {r0, r1, r2}
    bc48:	2300      	movs	r3, #0
    bc4a:	f383 8811 	msr	BASEPRI, r3
    bc4e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    bc52:	b004      	add	sp, #16
    bc54:	4770      	bx	lr

0000bc56 <z_impl_gpio_pin_configure.constprop.0>:
 */
__syscall int gpio_pin_configure(const struct device *port,
				 gpio_pin_t pin,
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
    bc56:	b430      	push	{r4, r5}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    bc58:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    bc5a:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bc5c:	2301      	movs	r3, #1
    bc5e:	fa03 f201 	lsl.w	r2, r3, r1
    bc62:	6823      	ldr	r3, [r4, #0]
    bc64:	ea23 0302 	bic.w	r3, r3, r2
    bc68:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    bc6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    bc6e:	682b      	ldr	r3, [r5, #0]
}
    bc70:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
    bc72:	4718      	bx	r3

0000bc74 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bc74:	6903      	ldr	r3, [r0, #16]
    bc76:	b2c9      	uxtb	r1, r1
    bc78:	220c      	movs	r2, #12
    bc7a:	fb01 3302 	mla	r3, r1, r2, r3
    bc7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    bc80:	f000 0007 	and.w	r0, r0, #7
    bc84:	4770      	bx	lr

0000bc86 <set_on_state>:
	__asm__ volatile(
    bc86:	f04f 0320 	mov.w	r3, #32
    bc8a:	f3ef 8211 	mrs	r2, BASEPRI
    bc8e:	f383 8812 	msr	BASEPRI_MAX, r3
    bc92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    bc96:	6803      	ldr	r3, [r0, #0]
    bc98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    bc9c:	f043 0302 	orr.w	r3, r3, #2
    bca0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    bca2:	f382 8811 	msr	BASEPRI, r2
    bca6:	f3bf 8f6f 	isb	sy
}
    bcaa:	4770      	bx	lr

0000bcac <stop>:
{
    bcac:	4603      	mov	r3, r0
    bcae:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    bcb0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    bcb2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    bcb4:	f04f 0420 	mov.w	r4, #32
    bcb8:	f3ef 8611 	mrs	r6, BASEPRI
    bcbc:	f384 8812 	msr	BASEPRI_MAX, r4
    bcc0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bcc4:	250c      	movs	r5, #12
    bcc6:	fb05 0401 	mla	r4, r5, r1, r0
    bcca:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bccc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    bcd0:	d001      	beq.n	bcd6 <stop+0x2a>
    bcd2:	42a2      	cmp	r2, r4
    bcd4:	d110      	bne.n	bcf8 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bcd6:	fb05 0001 	mla	r0, r5, r1, r0
    bcda:	2201      	movs	r2, #1
    bcdc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    bcde:	2000      	movs	r0, #0
	__asm__ volatile(
    bce0:	f386 8811 	msr	BASEPRI, r6
    bce4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bce8:	b928      	cbnz	r0, bcf6 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    bcea:	685b      	ldr	r3, [r3, #4]
    bcec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    bcf0:	684b      	ldr	r3, [r1, #4]
    bcf2:	4798      	blx	r3
	return 0;
    bcf4:	2000      	movs	r0, #0
}
    bcf6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    bcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bcfc:	e7f0      	b.n	bce0 <stop+0x34>

0000bcfe <api_stop>:
	return stop(dev, subsys, CTX_API);
    bcfe:	2280      	movs	r2, #128	; 0x80
    bd00:	f7ff bfd4 	b.w	bcac <stop>

0000bd04 <async_start>:
{
    bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd06:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    bd08:	6904      	ldr	r4, [r0, #16]
{
    bd0a:	4605      	mov	r5, r0
    bd0c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    bd0e:	f04f 0020 	mov.w	r0, #32
    bd12:	f3ef 8c11 	mrs	ip, BASEPRI
    bd16:	f380 8812 	msr	BASEPRI_MAX, r0
    bd1a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bd1e:	260c      	movs	r6, #12
    bd20:	fb06 4601 	mla	r6, r6, r1, r4
    bd24:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    bd26:	f000 0e07 	and.w	lr, r0, #7
    bd2a:	f1be 0f01 	cmp.w	lr, #1
    bd2e:	d111      	bne.n	bd54 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    bd30:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    bd32:	2600      	movs	r6, #0
	__asm__ volatile(
    bd34:	f38c 8811 	msr	BASEPRI, ip
    bd38:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bd3c:	b946      	cbnz	r6, bd50 <async_start+0x4c>
	subdata->cb = cb;
    bd3e:	200c      	movs	r0, #12
    bd40:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    bd44:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    bd48:	686b      	ldr	r3, [r5, #4]
    bd4a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    bd4e:	4798      	blx	r3
}
    bd50:	4630      	mov	r0, r6
    bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    bd54:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    bd58:	4287      	cmp	r7, r0
    bd5a:	bf14      	ite	ne
    bd5c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    bd60:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    bd64:	e7e6      	b.n	bd34 <async_start+0x30>

0000bd66 <api_start>:
{
    bd66:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    bd68:	2480      	movs	r4, #128	; 0x80
    bd6a:	9400      	str	r4, [sp, #0]
    bd6c:	f7ff ffca 	bl	bd04 <async_start>
}
    bd70:	b002      	add	sp, #8
    bd72:	bd10      	pop	{r4, pc}

0000bd74 <onoff_started_callback>:
	return &data->mgr[type];
    bd74:	6900      	ldr	r0, [r0, #16]
{
    bd76:	b410      	push	{r4}
	return &data->mgr[type];
    bd78:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    bd7a:	241c      	movs	r4, #28
    bd7c:	fb03 0004 	mla	r0, r3, r4, r0
    bd80:	2100      	movs	r1, #0
}
    bd82:	bc10      	pop	{r4}
	notify(mgr, 0);
    bd84:	4710      	bx	r2

0000bd86 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    bd86:	2000      	movs	r0, #0
    bd88:	f000 ba11 	b.w	c1ae <nrfx_clock_start>

0000bd8c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bd8c:	2000      	movs	r0, #0
    bd8e:	f7fa bea9 	b.w	6ae4 <nrfx_clock_stop>

0000bd92 <blocking_start_callback>:
{
    bd92:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    bd94:	f7fc b8fa 	b.w	7f8c <z_impl_k_sem_give>

0000bd98 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bd98:	6843      	ldr	r3, [r0, #4]
    bd9a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    bd9c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    bda0:	600b      	str	r3, [r1, #0]
}
    bda2:	2000      	movs	r0, #0
    bda4:	4770      	bx	lr

0000bda6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bda6:	6843      	ldr	r3, [r0, #4]
    bda8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    bdaa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    bdae:	4042      	eors	r2, r0
    bdb0:	400a      	ands	r2, r1
    bdb2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    bdb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    bdb8:	2000      	movs	r0, #0
    bdba:	4770      	bx	lr

0000bdbc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdbc:	6843      	ldr	r3, [r0, #4]
    bdbe:	685b      	ldr	r3, [r3, #4]
}
    bdc0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    bdc2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    bdc6:	4770      	bx	lr

0000bdc8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdc8:	6843      	ldr	r3, [r0, #4]
    bdca:	685b      	ldr	r3, [r3, #4]
}
    bdcc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bdce:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    bdd2:	4770      	bx	lr

0000bdd4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bdd4:	6843      	ldr	r3, [r0, #4]
    bdd6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bdd8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    bddc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    bdde:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    bde2:	2000      	movs	r0, #0
    bde4:	4770      	bx	lr

0000bde6 <gpio_nrfx_manage_callback>:
	return port->data;
    bde6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    bde8:	6858      	ldr	r0, [r3, #4]
{
    bdea:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    bdec:	b158      	cbz	r0, be06 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bdee:	2400      	movs	r4, #0
    bdf0:	4281      	cmp	r1, r0
    bdf2:	d112      	bne.n	be1a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    bdf4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    bdf6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    bdf8:	b954      	cbnz	r4, be10 <gpio_nrfx_manage_callback+0x2a>
    bdfa:	428d      	cmp	r5, r1
	list->head = node;
    bdfc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    bdfe:	d100      	bne.n	be02 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    be00:	6098      	str	r0, [r3, #8]
	parent->next = child;
    be02:	2000      	movs	r0, #0
    be04:	6008      	str	r0, [r1, #0]
	if (set) {
    be06:	b96a      	cbnz	r2, be24 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    be08:	2000      	movs	r0, #0
}
    be0a:	bd30      	pop	{r4, r5, pc}
    be0c:	4628      	mov	r0, r5
    be0e:	e7ef      	b.n	bdf0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    be10:	428d      	cmp	r5, r1
	parent->next = child;
    be12:	6020      	str	r0, [r4, #0]
	list->tail = node;
    be14:	bf08      	it	eq
    be16:	609c      	streq	r4, [r3, #8]
}
    be18:	e7f3      	b.n	be02 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    be1a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be1c:	4604      	mov	r4, r0
    be1e:	2d00      	cmp	r5, #0
    be20:	d1f4      	bne.n	be0c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    be22:	b13a      	cbz	r2, be34 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    be24:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    be26:	685a      	ldr	r2, [r3, #4]
    be28:	600a      	str	r2, [r1, #0]
	list->head = node;
    be2a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    be2c:	2800      	cmp	r0, #0
    be2e:	d1eb      	bne.n	be08 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    be30:	6099      	str	r1, [r3, #8]
}
    be32:	e7ea      	b.n	be0a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    be34:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    be38:	e7e7      	b.n	be0a <gpio_nrfx_manage_callback+0x24>

0000be3a <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    be3a:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    be3c:	6884      	ldr	r4, [r0, #8]
    be3e:	68a4      	ldr	r4, [r4, #8]
    be40:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    be42:	bc10      	pop	{r4}
    be44:	4760      	bx	ip

0000be46 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    be46:	07ca      	lsls	r2, r1, #31
	return dev->config;
    be48:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    be4a:	d405      	bmi.n	be58 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    be4c:	f3c1 0242 	ubfx	r2, r1, #1, #3
    be50:	2a01      	cmp	r2, #1
    be52:	d004      	beq.n	be5e <i2c_nrfx_twi_configure+0x18>
    be54:	2a02      	cmp	r2, #2
    be56:	d00b      	beq.n	be70 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    be58:	f06f 0015 	mvn.w	r0, #21
}
    be5c:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    be5e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    be60:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    be64:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    be68:	6903      	ldr	r3, [r0, #16]
	return 0;
    be6a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    be6c:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
    be6e:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    be70:	681b      	ldr	r3, [r3, #0]
    be72:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    be76:	e7f5      	b.n	be64 <i2c_nrfx_twi_configure+0x1e>

0000be78 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    be78:	6902      	ldr	r2, [r0, #16]
{
    be7a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    be7c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    be80:	e883 0003 	stmia.w	r3, {r0, r1}
}
    be84:	2000      	movs	r0, #0
    be86:	4770      	bx	lr

0000be88 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    be88:	6843      	ldr	r3, [r0, #4]
    be8a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    be8c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    be90:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    be94:	4770      	bx	lr

0000be96 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    be96:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    be98:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    be9a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    be9c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bea0:	b148      	cbz	r0, beb6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    bea2:	7d52      	ldrb	r2, [r2, #21]
    bea4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bea6:	2000      	movs	r0, #0
    bea8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    beac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    beb0:	2201      	movs	r2, #1
    beb2:	601a      	str	r2, [r3, #0]
	return 0;
    beb4:	4770      	bx	lr
		return -1;
    beb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    beba:	4770      	bx	lr

0000bebc <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bebc:	2a00      	cmp	r2, #0
{
    bebe:	b510      	push	{r4, lr}
    bec0:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bec2:	dd0f      	ble.n	bee4 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    bec4:	6843      	ldr	r3, [r0, #4]
    bec6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bec8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    becc:	b148      	cbz	r0, bee2 <uarte_nrfx_fifo_read+0x26>
	return dev->data;
    bece:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bed0:	2000      	movs	r0, #0
    bed2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    bed6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    beda:	7d52      	ldrb	r2, [r2, #21]
    bedc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bede:	2001      	movs	r0, #1
    bee0:	6018      	str	r0, [r3, #0]
}
    bee2:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    bee4:	2000      	movs	r0, #0
    bee6:	e7fc      	b.n	bee2 <uarte_nrfx_fifo_read+0x26>

0000bee8 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    bee8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    beea:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    beec:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    beee:	f04f 0020 	mov.w	r0, #32
    bef2:	f3ef 8311 	mrs	r3, BASEPRI
    bef6:	f380 8812 	msr	BASEPRI_MAX, r0
    befa:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    befe:	68c9      	ldr	r1, [r1, #12]
    bf00:	2000      	movs	r0, #0
    bf02:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    bf04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    bf08:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    bf0c:	f383 8811 	msr	BASEPRI, r3
    bf10:	f3bf 8f6f 	isb	sy
}
    bf14:	4770      	bx	lr

0000bf16 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    bf16:	6903      	ldr	r3, [r0, #16]
    bf18:	68db      	ldr	r3, [r3, #12]
    bf1a:	2201      	movs	r2, #1
    bf1c:	739a      	strb	r2, [r3, #14]
}
    bf1e:	4770      	bx	lr

0000bf20 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    bf20:	6903      	ldr	r3, [r0, #16]
    bf22:	68db      	ldr	r3, [r3, #12]
    bf24:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    bf26:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    bf2a:	b962      	cbnz	r2, bf46 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    bf2c:	6842      	ldr	r2, [r0, #4]
    bf2e:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bf30:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    bf34:	b140      	cbz	r0, bf48 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    bf36:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    bf3a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    bf3e:	d003      	beq.n	bf48 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    bf40:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    bf42:	2001      	movs	r0, #1
    bf44:	4770      	bx	lr
    bf46:	2000      	movs	r0, #0
}
    bf48:	4770      	bx	lr

0000bf4a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    bf4a:	6843      	ldr	r3, [r0, #4]
    bf4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bf4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    bf52:	3800      	subs	r0, #0
    bf54:	bf18      	it	ne
    bf56:	2001      	movne	r0, #1
    bf58:	4770      	bx	lr

0000bf5a <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    bf5a:	6843      	ldr	r3, [r0, #4]
    bf5c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    bf5e:	2210      	movs	r2, #16
    bf60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    bf64:	4770      	bx	lr

0000bf66 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    bf66:	6843      	ldr	r3, [r0, #4]
    bf68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    bf6a:	2210      	movs	r2, #16
    bf6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    bf70:	4770      	bx	lr

0000bf72 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    bf72:	6843      	ldr	r3, [r0, #4]
    bf74:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    bf76:	f44f 7200 	mov.w	r2, #512	; 0x200
    bf7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    bf7e:	4770      	bx	lr

0000bf80 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    bf80:	6843      	ldr	r3, [r0, #4]
    bf82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    bf84:	f44f 7200 	mov.w	r2, #512	; 0x200
    bf88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    bf8c:	4770      	bx	lr

0000bf8e <uarte_nrfx_irq_update>:
}
    bf8e:	2001      	movs	r0, #1
    bf90:	4770      	bx	lr

0000bf92 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    bf92:	6903      	ldr	r3, [r0, #16]
    bf94:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    bf96:	e9c3 1200 	strd	r1, r2, [r3]
}
    bf9a:	4770      	bx	lr

0000bf9c <uarte_nrfx_irq_is_pending>:
{
    bf9c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    bf9e:	6843      	ldr	r3, [r0, #4]
    bfa0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    bfa2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    bfa6:	025b      	lsls	r3, r3, #9
{
    bfa8:	4604      	mov	r4, r0
		||
    bfaa:	d405      	bmi.n	bfb8 <uarte_nrfx_irq_is_pending+0x1c>
    bfac:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bfb0:	f010 0010 	ands.w	r0, r0, #16
    bfb4:	d106      	bne.n	bfc4 <uarte_nrfx_irq_is_pending+0x28>
}
    bfb6:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    bfb8:	f7ff ffb2 	bl	bf20 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    bfbc:	2800      	cmp	r0, #0
    bfbe:	d0f5      	beq.n	bfac <uarte_nrfx_irq_is_pending+0x10>
		||
    bfc0:	2001      	movs	r0, #1
    bfc2:	e7f8      	b.n	bfb6 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    bfc4:	4620      	mov	r0, r4
    bfc6:	f7ff ffc0 	bl	bf4a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    bfca:	3800      	subs	r0, #0
    bfcc:	bf18      	it	ne
    bfce:	2001      	movne	r0, #1
    bfd0:	e7f1      	b.n	bfb6 <uarte_nrfx_irq_is_pending+0x1a>

0000bfd2 <nrf_gpio_cfg_input>:
{
    bfd2:	b507      	push	{r0, r1, r2, lr}
    bfd4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    bfd6:	a801      	add	r0, sp, #4
    bfd8:	f7fa f95c 	bl	6294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    bfdc:	9b01      	ldr	r3, [sp, #4]
    bfde:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    bfe2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    bfe4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    bfe8:	b003      	add	sp, #12
    bfea:	f85d fb04 	ldr.w	pc, [sp], #4

0000bfee <tx_start.isra.0>:
	return config->uarte_regs;
    bfee:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bff0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bff4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bff8:	2200      	movs	r2, #0
    bffa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    bffe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    c002:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    c006:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c00a:	6842      	ldr	r2, [r0, #4]
    c00c:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c00e:	bf41      	itttt	mi
    c010:	2208      	movmi	r2, #8
    c012:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    c016:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    c01a:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c01e:	2201      	movs	r2, #1
    c020:	609a      	str	r2, [r3, #8]
}
    c022:	4770      	bx	lr

0000c024 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    c024:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    c026:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c028:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c02c:	b940      	cbnz	r0, c040 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c02e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c030:	079b      	lsls	r3, r3, #30
    c032:	d406      	bmi.n	c042 <is_tx_ready.isra.0+0x1e>
    c034:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    c038:	3800      	subs	r0, #0
    c03a:	bf18      	it	ne
    c03c:	2001      	movne	r0, #1
    c03e:	4770      	bx	lr
    c040:	2001      	movs	r0, #1
}
    c042:	4770      	bx	lr

0000c044 <uarte_nrfx_fifo_fill>:
{
    c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    c046:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    c048:	68f3      	ldr	r3, [r6, #12]
    c04a:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c04c:	f3bf 8f5b 	dmb	ish
    c050:	4294      	cmp	r4, r2
    c052:	bfa8      	it	ge
    c054:	4614      	movge	r4, r2
{
    c056:	4605      	mov	r5, r0
    c058:	3310      	adds	r3, #16
    c05a:	2201      	movs	r2, #1
    c05c:	e853 0f00 	ldrex	r0, [r3]
    c060:	2800      	cmp	r0, #0
    c062:	d103      	bne.n	c06c <uarte_nrfx_fifo_fill+0x28>
    c064:	e843 2700 	strex	r7, r2, [r3]
    c068:	2f00      	cmp	r7, #0
    c06a:	d1f7      	bne.n	c05c <uarte_nrfx_fifo_fill+0x18>
    c06c:	f3bf 8f5b 	dmb	ish
    c070:	bf0c      	ite	eq
    c072:	4613      	moveq	r3, r2
    c074:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    c076:	d01d      	beq.n	c0b4 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    c078:	461c      	mov	r4, r3
}
    c07a:	4620      	mov	r0, r4
    c07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    c07e:	68f2      	ldr	r2, [r6, #12]
    c080:	5cc8      	ldrb	r0, [r1, r3]
    c082:	6892      	ldr	r2, [r2, #8]
    c084:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    c086:	3301      	adds	r3, #1
    c088:	42a3      	cmp	r3, r4
    c08a:	dbf8      	blt.n	c07e <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    c08c:	f04f 0320 	mov.w	r3, #32
    c090:	f3ef 8711 	mrs	r7, BASEPRI
    c094:	f383 8812 	msr	BASEPRI_MAX, r3
    c098:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    c09c:	6868      	ldr	r0, [r5, #4]
    c09e:	f7ff ffc1 	bl	c024 <is_tx_ready.isra.0>
    c0a2:	68f3      	ldr	r3, [r6, #12]
    c0a4:	b940      	cbnz	r0, c0b8 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    c0a6:	6118      	str	r0, [r3, #16]
		len = 0;
    c0a8:	4604      	mov	r4, r0
	__asm__ volatile(
    c0aa:	f387 8811 	msr	BASEPRI, r7
    c0ae:	f3bf 8f6f 	isb	sy
	return len;
    c0b2:	e7e2      	b.n	c07a <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    c0b4:	2300      	movs	r3, #0
    c0b6:	e7e7      	b.n	c088 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    c0b8:	6899      	ldr	r1, [r3, #8]
    c0ba:	6868      	ldr	r0, [r5, #4]
    c0bc:	4622      	mov	r2, r4
    c0be:	f7ff ff96 	bl	bfee <tx_start.isra.0>
    c0c2:	e7f2      	b.n	c0aa <uarte_nrfx_fifo_fill+0x66>

0000c0c4 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    c0c4:	6843      	ldr	r3, [r0, #4]
    c0c6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    c0c8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c0cc:	05d1      	lsls	r1, r2, #23
{
    c0ce:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c0d0:	d518      	bpl.n	c104 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c0d2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    c0d6:	b1aa      	cbz	r2, c104 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    c0d8:	f04f 0120 	mov.w	r1, #32
    c0dc:	f3ef 8211 	mrs	r2, BASEPRI
    c0e0:	f381 8812 	msr	BASEPRI_MAX, r1
    c0e4:	f3bf 8f6f 	isb	sy
    c0e8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c0ec:	b131      	cbz	r1, c0fc <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c0ee:	2100      	movs	r1, #0
    c0f0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c0f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c0f8:	2101      	movs	r1, #1
    c0fa:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c0fc:	f382 8811 	msr	BASEPRI, r2
    c100:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c104:	6842      	ldr	r2, [r0, #4]
    c106:	6852      	ldr	r2, [r2, #4]
    c108:	06d2      	lsls	r2, r2, #27
    c10a:	d51a      	bpl.n	c142 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    c10c:	f04f 0220 	mov.w	r2, #32
    c110:	f3ef 8111 	mrs	r1, BASEPRI
    c114:	f382 8812 	msr	BASEPRI_MAX, r2
    c118:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c11c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c120:	b112      	cbz	r2, c128 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c122:	2200      	movs	r2, #0
    c124:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    c128:	6902      	ldr	r2, [r0, #16]
    c12a:	68d2      	ldr	r2, [r2, #12]
    c12c:	b10a      	cbz	r2, c132 <uarte_nrfx_isr_int+0x6e>
    c12e:	6912      	ldr	r2, [r2, #16]
    c130:	b91a      	cbnz	r2, c13a <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    c132:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c136:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    c13a:	f381 8811 	msr	BASEPRI, r1
    c13e:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    c142:	6902      	ldr	r2, [r0, #16]
    c144:	68d2      	ldr	r2, [r2, #12]
    c146:	b15a      	cbz	r2, c160 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c148:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c14c:	b151      	cbz	r1, c164 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    c14e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    c150:	2100      	movs	r1, #0
    c152:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    c154:	b134      	cbz	r4, c164 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    c156:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c15a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    c15e:	7391      	strb	r1, [r2, #14]
}
    c160:	bc10      	pop	{r4}
    c162:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c164:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    c168:	b121      	cbz	r1, c174 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c16a:	2100      	movs	r1, #0
    c16c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    c170:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    c174:	6813      	ldr	r3, [r2, #0]
    c176:	2b00      	cmp	r3, #0
    c178:	d0f2      	beq.n	c160 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c17a:	6851      	ldr	r1, [r2, #4]
}
    c17c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c17e:	4718      	bx	r3

0000c180 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c180:	4770      	bx	lr

0000c182 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    c186:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    c18a:	f1a0 0308 	sub.w	r3, r0, #8
    c18e:	4258      	negs	r0, r3
    c190:	4158      	adcs	r0, r3
    c192:	4770      	bx	lr

0000c194 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c194:	4700      	bx	r0

0000c196 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c196:	f000 bae4 	b.w	c762 <z_impl_k_busy_wait>

0000c19a <nrfx_clock_enable>:
{
    c19a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    c19c:	2000      	movs	r0, #0
    c19e:	f7f8 fe7b 	bl	4e98 <arch_irq_is_enabled>
    c1a2:	b918      	cbnz	r0, c1ac <nrfx_clock_enable+0x12>
}
    c1a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    c1a8:	f7f8 be66 	b.w	4e78 <arch_irq_enable>
    c1ac:	bd08      	pop	{r3, pc}

0000c1ae <nrfx_clock_start>:
    switch (domain)
    c1ae:	b110      	cbz	r0, c1b6 <nrfx_clock_start+0x8>
    c1b0:	2801      	cmp	r0, #1
    c1b2:	d01d      	beq.n	c1f0 <nrfx_clock_start+0x42>
    c1b4:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c1b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1ba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c1be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    c1c2:	03c9      	lsls	r1, r1, #15
    c1c4:	d512      	bpl.n	c1ec <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    c1c6:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    c1ca:	2a01      	cmp	r2, #1
    c1cc:	d10e      	bne.n	c1ec <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    c1ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1d6:	2200      	movs	r2, #0
    c1d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c1dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    c1e0:	2202      	movs	r2, #2
    c1e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c1e6:	2201      	movs	r2, #1
    c1e8:	609a      	str	r2, [r3, #8]
}
    c1ea:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    c1ec:	2200      	movs	r2, #0
    c1ee:	e7ee      	b.n	c1ce <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c1f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1f4:	2200      	movs	r2, #0
    c1f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c1fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    c1fe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c202:	6018      	str	r0, [r3, #0]
}
    c204:	4770      	bx	lr

0000c206 <nrf_gpio_reconfigure>:
{
    c206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c208:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c20a:	a801      	add	r0, sp, #4
{
    c20c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    c210:	4617      	mov	r7, r2
    c212:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c214:	f7fa fcd6 	bl	6bc4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c218:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c21a:	2f00      	cmp	r7, #0
    c21c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c220:	bf14      	ite	ne
    c222:	2302      	movne	r3, #2
    c224:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c226:	2900      	cmp	r1, #0
    c228:	bf18      	it	ne
    c22a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c22e:	2d00      	cmp	r5, #0
    c230:	bf14      	ite	ne
    c232:	f04f 0c0c 	movne.w	ip, #12
    c236:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c23a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c23c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c240:	bf14      	ite	ne
    c242:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    c246:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c24a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c24c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c250:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c254:	bf14      	ite	ne
    c256:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    c25a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c25e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    c262:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c266:	b101      	cbz	r1, c26a <nrf_gpio_reconfigure+0x64>
    c268:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c26a:	b10f      	cbz	r7, c270 <nrf_gpio_reconfigure+0x6a>
    c26c:	783f      	ldrb	r7, [r7, #0]
    c26e:	007f      	lsls	r7, r7, #1
    c270:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c272:	b10d      	cbz	r5, c278 <nrf_gpio_reconfigure+0x72>
    c274:	782d      	ldrb	r5, [r5, #0]
    c276:	00ad      	lsls	r5, r5, #2
    c278:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    c27a:	b10c      	cbz	r4, c280 <nrf_gpio_reconfigure+0x7a>
    c27c:	7822      	ldrb	r2, [r4, #0]
    c27e:	0214      	lsls	r4, r2, #8
    c280:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    c282:	b10e      	cbz	r6, c288 <nrf_gpio_reconfigure+0x82>
    c284:	7836      	ldrb	r6, [r6, #0]
    c286:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c288:	432c      	orrs	r4, r5
    c28a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    c28c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    c290:	b003      	add	sp, #12
    c292:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c294 <nrf_gpio_cfg_sense_set>:
{
    c294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c296:	f10d 030f 	add.w	r3, sp, #15
    c29a:	9301      	str	r3, [sp, #4]
    c29c:	2300      	movs	r3, #0
{
    c29e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c2a2:	9300      	str	r3, [sp, #0]
    c2a4:	461a      	mov	r2, r3
    c2a6:	4619      	mov	r1, r3
    c2a8:	f7ff ffad 	bl	c206 <nrf_gpio_reconfigure>
}
    c2ac:	b005      	add	sp, #20
    c2ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2b2 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    c2b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    c2b4:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    c2b6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    c2b8:	4298      	cmp	r0, r3
{
    c2ba:	b510      	push	{r4, lr}
    c2bc:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    c2c0:	d205      	bcs.n	c2ce <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    c2c2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    c2c4:	5c09      	ldrb	r1, [r1, r0]
    c2c6:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    c2ca:	4618      	mov	r0, r3
}
    c2cc:	e004      	b.n	c2d8 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    c2ce:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    c2d2:	b110      	cbz	r0, c2da <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c2d4:	61d3      	str	r3, [r2, #28]
            return false;
    c2d6:	2000      	movs	r0, #0
}
    c2d8:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    c2da:	6a0c      	ldr	r4, [r1, #32]
    c2dc:	0664      	lsls	r4, r4, #25
    c2de:	d503      	bpl.n	c2e8 <twi_send_byte+0x36>
    c2e0:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    c2e2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    c2e6:	e7f7      	b.n	c2d8 <twi_send_byte+0x26>
    c2e8:	6153      	str	r3, [r2, #20]
    c2ea:	e7ee      	b.n	c2ca <twi_send_byte+0x18>

0000c2ec <twi_transfer>:
{
    c2ec:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c2ee:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    c2f2:	4604      	mov	r4, r0
    c2f4:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    c2f6:	b12e      	cbz	r6, c304 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c2f8:	2300      	movs	r3, #0
    c2fa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    c2fe:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    c302:	2601      	movs	r6, #1
    if (p_cb->error)
    c304:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    c308:	b320      	cbz	r0, c354 <twi_transfer+0x68>
    c30a:	2300      	movs	r3, #0
    c30c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    c310:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    c314:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    c318:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    c31c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    c320:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    c324:	2e00      	cmp	r6, #0
    c326:	d068      	beq.n	c3fa <twi_transfer+0x10e>
        if (!p_cb->error)
    c328:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    c32c:	2300      	movs	r3, #0
    c32e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    c332:	bb88      	cbnz	r0, c398 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    c334:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c336:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    c338:	429a      	cmp	r2, r3
        return false;
    c33a:	bf1c      	itt	ne
    c33c:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    c33e:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    c340:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    c344:	bf1c      	itt	ne
    c346:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    c34a:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    c34e:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    c352:	e022      	b.n	c39a <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c354:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    c358:	b142      	cbz	r2, c36c <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c35a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    c35e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c362:	2301      	movs	r3, #1
    c364:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    c366:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    c36a:	e7db      	b.n	c324 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c36c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    c370:	b1a3      	cbz	r3, c39c <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c372:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    c376:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    c37a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    c37c:	3301      	adds	r3, #1
    c37e:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c380:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    c384:	b113      	cbz	r3, c38c <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c386:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    c38a:	e7e8      	b.n	c35e <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    c38c:	4629      	mov	r1, r5
    c38e:	4620      	mov	r0, r4
    c390:	f7ff ff8f 	bl	c2b2 <twi_send_byte>
    c394:	2800      	cmp	r0, #0
    c396:	d1c5      	bne.n	c324 <twi_transfer+0x38>
                    return false;
    c398:	2000      	movs	r0, #0
}
    c39a:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c39c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    c3a0:	2a00      	cmp	r2, #0
    c3a2:	d0bf      	beq.n	c324 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c3a4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    c3a8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c3ac:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    c3b0:	b112      	cbz	r2, c3b8 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c3b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    c3b6:	e7d2      	b.n	c35e <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    c3b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    c3ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    c3bc:	4293      	cmp	r3, r2
    c3be:	d2b1      	bcs.n	c324 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    c3c0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    c3c2:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    c3c6:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    c3c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    c3ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    c3cc:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    c3ce:	1e51      	subs	r1, r2, #1
    c3d0:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    c3d2:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    c3d4:	d108      	bne.n	c3e8 <twi_transfer+0xfc>
    c3d6:	6a29      	ldr	r1, [r5, #32]
    c3d8:	0649      	lsls	r1, r1, #25
    c3da:	d410      	bmi.n	c3fe <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    c3dc:	2302      	movs	r3, #2
    c3de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c3e2:	2301      	movs	r3, #1
    c3e4:	6223      	str	r3, [r4, #32]
    c3e6:	e79d      	b.n	c324 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    c3e8:	4293      	cmp	r3, r2
    c3ea:	d1fa      	bne.n	c3e2 <twi_transfer+0xf6>
    c3ec:	6a2b      	ldr	r3, [r5, #32]
    c3ee:	065b      	lsls	r3, r3, #25
    c3f0:	d598      	bpl.n	c324 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    c3f2:	2302      	movs	r3, #2
    c3f4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    c3f8:	e7cf      	b.n	c39a <twi_transfer+0xae>
    return true;
    c3fa:	2001      	movs	r0, #1
    c3fc:	e7cd      	b.n	c39a <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    c3fe:	4293      	cmp	r3, r2
    c400:	d1ef      	bne.n	c3e2 <twi_transfer+0xf6>
    c402:	e7f6      	b.n	c3f2 <twi_transfer+0x106>

0000c404 <nrf_gpio_pin_set>:
{
    c404:	b507      	push	{r0, r1, r2, lr}
    c406:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c408:	a801      	add	r0, sp, #4
    c40a:	f7fb f979 	bl	7700 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c40e:	9a01      	ldr	r2, [sp, #4]
    c410:	2301      	movs	r3, #1
    c412:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    c414:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    c418:	b003      	add	sp, #12
    c41a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c41e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    c41e:	f7fb b9e1 	b.w	77e4 <_DoInit>

0000c422 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    c422:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    c424:	f7ff fffb 	bl	c41e <SEGGER_RTT_Init>

	return 0;
}
    c428:	2000      	movs	r0, #0
    c42a:	bd08      	pop	{r3, pc}

0000c42c <z_device_state_init>:
}
    c42c:	4770      	bx	lr

0000c42e <z_device_ready>:
	if (dev == NULL) {
    c42e:	b138      	cbz	r0, c440 <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    c430:	68c3      	ldr	r3, [r0, #12]
    c432:	8818      	ldrh	r0, [r3, #0]
    c434:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c438:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    c43c:	4258      	negs	r0, r3
    c43e:	4158      	adcs	r0, r3
}
    c440:	4770      	bx	lr

0000c442 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    c442:	6940      	ldr	r0, [r0, #20]
{
    c444:	b470      	push	{r4, r5, r6}
    c446:	4613      	mov	r3, r2
    c448:	460d      	mov	r5, r1
	if (rv != NULL) {
    c44a:	b960      	cbnz	r0, c466 <device_required_foreach+0x24>
	size_t handle_count = 0;
    c44c:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    c44e:	462a      	mov	r2, r5
}
    c450:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    c452:	f7fb b9fd 	b.w	7850 <device_visitor>
			++i;
    c456:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    c458:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    c45c:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    c45e:	b2a4      	uxth	r4, r4
    c460:	4294      	cmp	r4, r2
    c462:	d9f8      	bls.n	c456 <device_required_foreach+0x14>
    c464:	e7f3      	b.n	c44e <device_required_foreach+0xc>
		size_t i = 0;
    c466:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    c468:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    c46c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    c470:	e7f2      	b.n	c458 <device_required_foreach+0x16>

0000c472 <arch_system_halt>:
	__asm__ volatile(
    c472:	f04f 0220 	mov.w	r2, #32
    c476:	f3ef 8311 	mrs	r3, BASEPRI
    c47a:	f382 8812 	msr	BASEPRI_MAX, r2
    c47e:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    c482:	e7fe      	b.n	c482 <arch_system_halt+0x10>

0000c484 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    c484:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    c486:	f7ff fff4 	bl	c472 <arch_system_halt>

0000c48a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c48c:	4605      	mov	r5, r0
    c48e:	460e      	mov	r6, r1
    c490:	f04f 0320 	mov.w	r3, #32
    c494:	f3ef 8711 	mrs	r7, BASEPRI
    c498:	f383 8812 	msr	BASEPRI_MAX, r3
    c49c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    c4a0:	f7fc f8b2 	bl	8608 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    c4a4:	4631      	mov	r1, r6
    c4a6:	4604      	mov	r4, r0
    c4a8:	4628      	mov	r0, r5
    c4aa:	f7ff ffeb 	bl	c484 <k_sys_fatal_error_handler>
	__asm__ volatile(
    c4ae:	f387 8811 	msr	BASEPRI, r7
    c4b2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    c4b6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    c4b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c4bc:	f7f8 bf34 	b.w	5328 <z_impl_k_thread_abort>

0000c4c0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c4c0:	f3ef 8005 	mrs	r0, IPSR
}
    c4c4:	3800      	subs	r0, #0
    c4c6:	bf18      	it	ne
    c4c8:	2001      	movne	r0, #1
    c4ca:	4770      	bx	lr

0000c4cc <k_thread_name_get>:
}
    c4cc:	3078      	adds	r0, #120	; 0x78
    c4ce:	4770      	bx	lr

0000c4d0 <z_impl_k_thread_start>:
	z_sched_start(thread);
    c4d0:	f7fb bee6 	b.w	82a0 <z_sched_start>

0000c4d4 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    c4d4:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    c4d6:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    c4da:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    c4dc:	4293      	cmp	r3, r2
    c4de:	d102      	bne.n	c4e6 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    c4e0:	600b      	str	r3, [r1, #0]

	return 0;
}
    c4e2:	2000      	movs	r0, #0
    c4e4:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    c4e6:	5ce0      	ldrb	r0, [r4, r3]
    c4e8:	28aa      	cmp	r0, #170	; 0xaa
    c4ea:	d1f9      	bne.n	c4e0 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    c4ec:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    c4ee:	e7f5      	b.n	c4dc <z_impl_k_thread_stack_space_get+0x8>

0000c4f0 <z_pm_save_idle_exit>:
{
    c4f0:	b508      	push	{r3, lr}
	pm_system_resume();
    c4f2:	f7f8 fbdf 	bl	4cb4 <pm_system_resume>
}
    c4f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    c4fa:	f7ff be41 	b.w	c180 <sys_clock_idle_exit>

0000c4fe <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    c4fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c502:	428b      	cmp	r3, r1
    c504:	d001      	beq.n	c50a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    c506:	f7fb bf3b 	b.w	8380 <z_set_prio>
}
    c50a:	2000      	movs	r0, #0
    c50c:	4770      	bx	lr

0000c50e <z_impl_k_mutex_init>:
{
    c50e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    c510:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    c512:	e9c3 0002 	strd	r0, r0, [r3, #8]
    c516:	e9c3 3300 	strd	r3, r3, [r3]
}
    c51a:	4770      	bx	lr

0000c51c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    c51c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c520:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c522:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c524:	2300      	movs	r3, #0
	node->prev = NULL;
    c526:	e9c0 3300 	strd	r3, r3, [r0]
}
    c52a:	4770      	bx	lr

0000c52c <unpend_thread_no_timeout>:
{
    c52c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    c52e:	f7ff fff5 	bl	c51c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c532:	7b43      	ldrb	r3, [r0, #13]
    c534:	f023 0302 	bic.w	r3, r3, #2
    c538:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    c53a:	2300      	movs	r3, #0
    c53c:	6083      	str	r3, [r0, #8]
}
    c53e:	bd08      	pop	{r3, pc}

0000c540 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    c540:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    c544:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    c548:	4283      	cmp	r3, r0
		return b2 - b1;
    c54a:	bf14      	ite	ne
    c54c:	1ac0      	subne	r0, r0, r3
	return 0;
    c54e:	2000      	moveq	r0, #0
}
    c550:	4770      	bx	lr

0000c552 <z_unpend_thread>:
{
    c552:	b510      	push	{r4, lr}
	__asm__ volatile(
    c554:	f04f 0320 	mov.w	r3, #32
    c558:	f3ef 8411 	mrs	r4, BASEPRI
    c55c:	f383 8812 	msr	BASEPRI_MAX, r3
    c560:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    c564:	f7ff ffe2 	bl	c52c <unpend_thread_no_timeout>
	__asm__ volatile(
    c568:	f384 8811 	msr	BASEPRI, r4
    c56c:	f3bf 8f6f 	isb	sy
}
    c570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c574:	3018      	adds	r0, #24
    c576:	f000 b8ae 	b.w	c6d6 <z_abort_timeout>

0000c57a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c57a:	4603      	mov	r3, r0
    c57c:	b920      	cbnz	r0, c588 <z_reschedule_irqlock+0xe>
    c57e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    c582:	b90a      	cbnz	r2, c588 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    c584:	f7f8 bcd6 	b.w	4f34 <arch_swap>
    c588:	f383 8811 	msr	BASEPRI, r3
    c58c:	f3bf 8f6f 	isb	sy
}
    c590:	4770      	bx	lr

0000c592 <z_reschedule_unlocked>:
	__asm__ volatile(
    c592:	f04f 0320 	mov.w	r3, #32
    c596:	f3ef 8011 	mrs	r0, BASEPRI
    c59a:	f383 8812 	msr	BASEPRI_MAX, r3
    c59e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c5a2:	f7ff bfea 	b.w	c57a <z_reschedule_irqlock>

0000c5a6 <z_priq_dumb_best>:
{
    c5a6:	4603      	mov	r3, r0
	return list->head == list;
    c5a8:	6800      	ldr	r0, [r0, #0]
}
    c5aa:	4283      	cmp	r3, r0
    c5ac:	bf08      	it	eq
    c5ae:	2000      	moveq	r0, #0
    c5b0:	4770      	bx	lr

0000c5b2 <z_ready_thread>:
{
    c5b2:	b510      	push	{r4, lr}
    c5b4:	f04f 0320 	mov.w	r3, #32
    c5b8:	f3ef 8411 	mrs	r4, BASEPRI
    c5bc:	f383 8812 	msr	BASEPRI_MAX, r3
    c5c0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    c5c4:	f7fb fe36 	bl	8234 <ready_thread>
	__asm__ volatile(
    c5c8:	f384 8811 	msr	BASEPRI, r4
    c5cc:	f3bf 8f6f 	isb	sy
}
    c5d0:	bd10      	pop	{r4, pc}

0000c5d2 <z_thread_timeout>:
{
    c5d2:	b510      	push	{r4, lr}
    c5d4:	4601      	mov	r1, r0
	__asm__ volatile(
    c5d6:	f04f 0320 	mov.w	r3, #32
    c5da:	f3ef 8411 	mrs	r4, BASEPRI
    c5de:	f383 8812 	msr	BASEPRI_MAX, r3
    c5e2:	f3bf 8f6f 	isb	sy
		if (!killed) {
    c5e6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    c5ea:	f013 0f28 	tst.w	r3, #40	; 0x28
    c5ee:	d10d      	bne.n	c60c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    c5f0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    c5f4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    c5f6:	b10b      	cbz	r3, c5fc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    c5f8:	f7ff ff98 	bl	c52c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    c5fc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    c600:	f023 0314 	bic.w	r3, r3, #20
    c604:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    c608:	f7fb fe14 	bl	8234 <ready_thread>
	__asm__ volatile(
    c60c:	f384 8811 	msr	BASEPRI, r4
    c610:	f3bf 8f6f 	isb	sy
}
    c614:	bd10      	pop	{r4, pc}

0000c616 <add_to_waitq_locked>:
{
    c616:	b538      	push	{r3, r4, r5, lr}
    c618:	4604      	mov	r4, r0
    c61a:	460d      	mov	r5, r1
	unready_thread(thread);
    c61c:	f7fb fe5e 	bl	82dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    c620:	7b63      	ldrb	r3, [r4, #13]
    c622:	f043 0302 	orr.w	r3, r3, #2
    c626:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    c628:	b195      	cbz	r5, c650 <add_to_waitq_locked+0x3a>
    c62a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    c62c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c62e:	429d      	cmp	r5, r3
    c630:	d015      	beq.n	c65e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c632:	b1a3      	cbz	r3, c65e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    c634:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    c638:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    c63c:	4291      	cmp	r1, r2
    c63e:	d008      	beq.n	c652 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    c640:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    c642:	2a00      	cmp	r2, #0
    c644:	dd05      	ble.n	c652 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    c646:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c648:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c64c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c64e:	605c      	str	r4, [r3, #4]
}
    c650:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c652:	686a      	ldr	r2, [r5, #4]
    c654:	4293      	cmp	r3, r2
    c656:	d002      	beq.n	c65e <add_to_waitq_locked+0x48>
    c658:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c65a:	2b00      	cmp	r3, #0
    c65c:	d1ec      	bne.n	c638 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    c65e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    c660:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    c664:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c666:	606c      	str	r4, [r5, #4]
}
    c668:	e7f2      	b.n	c650 <add_to_waitq_locked+0x3a>

0000c66a <z_unpend_first_thread>:
{
    c66a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c66c:	f04f 0320 	mov.w	r3, #32
    c670:	f3ef 8511 	mrs	r5, BASEPRI
    c674:	f383 8812 	msr	BASEPRI_MAX, r3
    c678:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c67c:	f7ff ff93 	bl	c5a6 <z_priq_dumb_best>
		if (thread != NULL) {
    c680:	4604      	mov	r4, r0
    c682:	b120      	cbz	r0, c68e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    c684:	f7ff ff52 	bl	c52c <unpend_thread_no_timeout>
    c688:	3018      	adds	r0, #24
    c68a:	f000 f824 	bl	c6d6 <z_abort_timeout>
	__asm__ volatile(
    c68e:	f385 8811 	msr	BASEPRI, r5
    c692:	f3bf 8f6f 	isb	sy
}
    c696:	4620      	mov	r0, r4
    c698:	bd38      	pop	{r3, r4, r5, pc}

0000c69a <z_sched_wake>:
{
    c69a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c69c:	f04f 0320 	mov.w	r3, #32
    c6a0:	f3ef 8511 	mrs	r5, BASEPRI
    c6a4:	f383 8812 	msr	BASEPRI_MAX, r3
    c6a8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c6ac:	f7ff ff7b 	bl	c5a6 <z_priq_dumb_best>
		if (thread != NULL) {
    c6b0:	4604      	mov	r4, r0
    c6b2:	b158      	cbz	r0, c6cc <z_sched_wake+0x32>
    c6b4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c6b8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    c6ba:	f7ff ff37 	bl	c52c <unpend_thread_no_timeout>
    c6be:	3018      	adds	r0, #24
    c6c0:	f000 f809 	bl	c6d6 <z_abort_timeout>
			ready_thread(thread);
    c6c4:	4620      	mov	r0, r4
    c6c6:	f7fb fdb5 	bl	8234 <ready_thread>
			ret = true;
    c6ca:	2001      	movs	r0, #1
	__asm__ volatile(
    c6cc:	f385 8811 	msr	BASEPRI, r5
    c6d0:	f3bf 8f6f 	isb	sy
}
    c6d4:	bd38      	pop	{r3, r4, r5, pc}

0000c6d6 <z_abort_timeout>:
{
    c6d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    c6d8:	f04f 0220 	mov.w	r2, #32
    c6dc:	f3ef 8411 	mrs	r4, BASEPRI
    c6e0:	f382 8812 	msr	BASEPRI_MAX, r2
    c6e4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    c6e8:	6803      	ldr	r3, [r0, #0]
    c6ea:	b13b      	cbz	r3, c6fc <z_abort_timeout+0x26>
			remove_timeout(to);
    c6ec:	f7fc f856 	bl	879c <remove_timeout>
			ret = 0;
    c6f0:	2000      	movs	r0, #0
	__asm__ volatile(
    c6f2:	f384 8811 	msr	BASEPRI, r4
    c6f6:	f3bf 8f6f 	isb	sy
}
    c6fa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    c6fc:	f06f 0015 	mvn.w	r0, #21
    c700:	e7f7      	b.n	c6f2 <z_abort_timeout+0x1c>

0000c702 <z_get_next_timeout_expiry>:
{
    c702:	b510      	push	{r4, lr}
	__asm__ volatile(
    c704:	f04f 0320 	mov.w	r3, #32
    c708:	f3ef 8411 	mrs	r4, BASEPRI
    c70c:	f383 8812 	msr	BASEPRI_MAX, r3
    c710:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    c714:	f7fc f81a 	bl	874c <next_timeout>
	__asm__ volatile(
    c718:	f384 8811 	msr	BASEPRI, r4
    c71c:	f3bf 8f6f 	isb	sy
}
    c720:	bd10      	pop	{r4, pc}

0000c722 <z_set_timeout_expiry>:
{
    c722:	b570      	push	{r4, r5, r6, lr}
    c724:	4604      	mov	r4, r0
    c726:	460d      	mov	r5, r1
	__asm__ volatile(
    c728:	f04f 0320 	mov.w	r3, #32
    c72c:	f3ef 8611 	mrs	r6, BASEPRI
    c730:	f383 8812 	msr	BASEPRI_MAX, r3
    c734:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    c738:	f7fc f808 	bl	874c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    c73c:	2801      	cmp	r0, #1
    c73e:	dd05      	ble.n	c74c <z_set_timeout_expiry+0x2a>
    c740:	42a0      	cmp	r0, r4
    c742:	db03      	blt.n	c74c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    c744:	4629      	mov	r1, r5
    c746:	4620      	mov	r0, r4
    c748:	f7fa f818 	bl	677c <sys_clock_set_timeout>
	__asm__ volatile(
    c74c:	f386 8811 	msr	BASEPRI, r6
    c750:	f3bf 8f6f 	isb	sy
}
    c754:	bd70      	pop	{r4, r5, r6, pc}

0000c756 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    c756:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    c758:	f7fc f910 	bl	897c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    c75c:	bd08      	pop	{r3, pc}

0000c75e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    c75e:	f7fc b90d 	b.w	897c <sys_clock_tick_get>

0000c762 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    c762:	b108      	cbz	r0, c768 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    c764:	f7f8 bf1c 	b.w	55a0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    c768:	4770      	bx	lr

0000c76a <add_event>:
{
    c76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c76c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c76e:	e9d0 2300 	ldrd	r2, r3, [r0]
    c772:	4290      	cmp	r0, r2
    c774:	4604      	mov	r4, r0
    c776:	460d      	mov	r5, r1
    c778:	d105      	bne.n	c786 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
    c77a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    c77c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    c780:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c782:	6065      	str	r5, [r4, #4]
}
    c784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    c786:	2b00      	cmp	r3, #0
    c788:	d0f7      	beq.n	c77a <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    c78a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    c78c:	b100      	cbz	r0, c790 <add_event+0x26>
    c78e:	3860      	subs	r0, #96	; 0x60
    c790:	b107      	cbz	r7, c794 <add_event+0x2a>
    c792:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    c794:	4639      	mov	r1, r7
    c796:	f7ff fed3 	bl	c540 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    c79a:	2800      	cmp	r0, #0
    c79c:	dced      	bgt.n	c77a <add_event+0x10>
	return list->head == list;
    c79e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7a0:	42b4      	cmp	r4, r6
    c7a2:	d0ea      	beq.n	c77a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c7a4:	2e00      	cmp	r6, #0
    c7a6:	d0e8      	beq.n	c77a <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
    c7a8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    c7aa:	b101      	cbz	r1, c7ae <add_event+0x44>
    c7ac:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    c7ae:	4638      	mov	r0, r7
    c7b0:	f7ff fec6 	bl	c540 <z_sched_prio_cmp>
    c7b4:	2800      	cmp	r0, #0
    c7b6:	dd05      	ble.n	c7c4 <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
    c7b8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    c7ba:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    c7be:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c7c0:	6075      	str	r5, [r6, #4]
			return;
    c7c2:	e7df      	b.n	c784 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
    c7c4:	6863      	ldr	r3, [r4, #4]
    c7c6:	42b3      	cmp	r3, r6
    c7c8:	d0d7      	beq.n	c77a <add_event+0x10>
    c7ca:	6836      	ldr	r6, [r6, #0]
    c7cc:	e7ea      	b.n	c7a4 <add_event+0x3a>

0000c7ce <register_events>:
{
    c7ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    c7d2:	2500      	movs	r5, #0
{
    c7d4:	468b      	mov	fp, r1
    c7d6:	4614      	mov	r4, r2
    c7d8:	461f      	mov	r7, r3
    c7da:	4682      	mov	sl, r0
	int events_registered = 0;
    c7dc:	462e      	mov	r6, r5
	event->poller = NULL;
    c7de:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    c7e0:	455d      	cmp	r5, fp
    c7e2:	db02      	blt.n	c7ea <register_events+0x1c>
}
    c7e4:	4630      	mov	r0, r6
    c7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    c7ea:	f04f 0320 	mov.w	r3, #32
    c7ee:	f3ef 8911 	mrs	r9, BASEPRI
    c7f2:	f383 8812 	msr	BASEPRI_MAX, r3
    c7f6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    c7fa:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c7fe:	f003 031f 	and.w	r3, r3, #31
    c802:	3b01      	subs	r3, #1
    c804:	2b07      	cmp	r3, #7
    c806:	d80f      	bhi.n	c828 <register_events+0x5a>
    c808:	e8df f003 	tbb	[pc, r3]
    c80c:	0a0e041e 	.word	0x0a0e041e
    c810:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
    c814:	f8da 3010 	ldr.w	r3, [sl, #16]
    c818:	689b      	ldr	r3, [r3, #8]
    c81a:	b12b      	cbz	r3, c828 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    c81c:	2302      	movs	r3, #2
    c81e:	e020      	b.n	c862 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    c820:	f8da 3010 	ldr.w	r3, [sl, #16]
    c824:	681b      	ldr	r3, [r3, #0]
    c826:	bb8b      	cbnz	r3, c88c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    c828:	bb47      	cbnz	r7, c87c <register_events+0xae>
    c82a:	7823      	ldrb	r3, [r4, #0]
    c82c:	b333      	cbz	r3, c87c <register_events+0xae>
	switch (event->type) {
    c82e:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c832:	f003 031f 	and.w	r3, r3, #31
    c836:	3b01      	subs	r3, #1
    c838:	2b07      	cmp	r3, #7
    c83a:	d830      	bhi.n	c89e <register_events+0xd0>
    c83c:	e8df f003 	tbb	[pc, r3]
    c840:	282f2833 	.word	0x282f2833
    c844:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
    c848:	f8da 3010 	ldr.w	r3, [sl, #16]
    c84c:	689b      	ldr	r3, [r3, #8]
    c84e:	2b00      	cmp	r3, #0
    c850:	d0ea      	beq.n	c828 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    c852:	2301      	movs	r3, #1
    c854:	e005      	b.n	c862 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    c856:	f8da 3010 	ldr.w	r3, [sl, #16]
    c85a:	6a1b      	ldr	r3, [r3, #32]
    c85c:	2b00      	cmp	r3, #0
    c85e:	d0e3      	beq.n	c828 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    c860:	2310      	movs	r3, #16
	event->state |= state;
    c862:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    c866:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    c86a:	f3c2 3145 	ubfx	r1, r2, #13, #6
    c86e:	430b      	orrs	r3, r1
    c870:	f363 3252 	bfi	r2, r3, #13, #6
    c874:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    c878:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    c87c:	f389 8811 	msr	BASEPRI, r9
    c880:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    c884:	3501      	adds	r5, #1
    c886:	f10a 0a14 	add.w	sl, sl, #20
    c88a:	e7a9      	b.n	c7e0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    c88c:	2304      	movs	r3, #4
    c88e:	e7e8      	b.n	c862 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    c890:	f8da 0010 	ldr.w	r0, [sl, #16]
    c894:	4622      	mov	r2, r4
    c896:	4651      	mov	r1, sl
    c898:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    c89a:	f7ff ff66 	bl	c76a <add_event>
	event->poller = poller;
    c89e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    c8a2:	3601      	adds	r6, #1
    c8a4:	e7ea      	b.n	c87c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    c8a6:	f8da 0010 	ldr.w	r0, [sl, #16]
    c8aa:	4622      	mov	r2, r4
    c8ac:	4651      	mov	r1, sl
    c8ae:	e7f4      	b.n	c89a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    c8b0:	f8da 0010 	ldr.w	r0, [sl, #16]
    c8b4:	4622      	mov	r2, r4
    c8b6:	4651      	mov	r1, sl
    c8b8:	3024      	adds	r0, #36	; 0x24
    c8ba:	e7ee      	b.n	c89a <register_events+0xcc>

0000c8bc <signal_poll_event>:
{
    c8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    c8c0:	6884      	ldr	r4, [r0, #8]
{
    c8c2:	4605      	mov	r5, r0
    c8c4:	460e      	mov	r6, r1
	if (poller != NULL) {
    c8c6:	b144      	cbz	r4, c8da <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    c8c8:	7863      	ldrb	r3, [r4, #1]
    c8ca:	2b01      	cmp	r3, #1
    c8cc:	d136      	bne.n	c93c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
    c8ce:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    c8d2:	f013 0302 	ands.w	r3, r3, #2
    c8d6:	d10a      	bne.n	c8ee <signal_poll_event+0x32>
		poller->is_polling = false;
    c8d8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    c8da:	68eb      	ldr	r3, [r5, #12]
    c8dc:	f3c3 3145 	ubfx	r1, r3, #13, #6
    c8e0:	430e      	orrs	r6, r1
	event->poller = NULL;
    c8e2:	2000      	movs	r0, #0
	event->state |= state;
    c8e4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    c8e8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    c8ea:	60eb      	str	r3, [r5, #12]
	return retcode;
    c8ec:	e00b      	b.n	c906 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
    c8ee:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c8f6:	bf08      	it	eq
    c8f8:	f112 0f02 	cmneq.w	r2, #2
    c8fc:	d105      	bne.n	c90a <signal_poll_event+0x4e>
		poller->is_polling = false;
    c8fe:	2300      	movs	r3, #0
    c900:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    c902:	f06f 000a 	mvn.w	r0, #10
}
    c906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    c90a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    c90e:	4640      	mov	r0, r8
    c910:	f7ff fe1f 	bl	c552 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    c914:	2e08      	cmp	r6, #8
    c916:	bf0c      	ite	eq
    c918:	f06f 0303 	mvneq.w	r3, #3
    c91c:	2300      	movne	r3, #0
    c91e:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c920:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    c924:	06db      	lsls	r3, r3, #27
    c926:	d102      	bne.n	c92e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
    c928:	f854 7c48 	ldr.w	r7, [r4, #-72]
    c92c:	b10f      	cbz	r7, c932 <signal_poll_event+0x76>
		poller->is_polling = false;
    c92e:	2300      	movs	r3, #0
    c930:	e7d2      	b.n	c8d8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    c932:	4640      	mov	r0, r8
    c934:	f7ff fe3d 	bl	c5b2 <z_ready_thread>
		poller->is_polling = false;
    c938:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    c93a:	e7ce      	b.n	c8da <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    c93c:	2b02      	cmp	r3, #2
    c93e:	d1f6      	bne.n	c92e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    c940:	7823      	ldrb	r3, [r4, #0]
    c942:	2b00      	cmp	r3, #0
    c944:	d0c9      	beq.n	c8da <signal_poll_event+0x1e>
    c946:	f854 7c04 	ldr.w	r7, [r4, #-4]
    c94a:	2f00      	cmp	r7, #0
    c94c:	d0f4      	beq.n	c938 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    c94e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    c952:	f1a4 0914 	sub.w	r9, r4, #20
    c956:	f104 0014 	add.w	r0, r4, #20
    c95a:	f7ff febc 	bl	c6d6 <z_abort_timeout>
		twork->poll_result = 0;
    c95e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    c962:	4649      	mov	r1, r9
    c964:	4638      	mov	r0, r7
    c966:	f000 f86e 	bl	ca46 <k_work_submit_to_queue>
		poller->is_polling = false;
    c96a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    c96e:	e7b4      	b.n	c8da <signal_poll_event+0x1e>

0000c970 <clear_event_registrations>:
	while (num_events--) {
    c970:	2314      	movs	r3, #20
{
    c972:	b5f0      	push	{r4, r5, r6, r7, lr}
    c974:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    c978:	2400      	movs	r4, #0
    c97a:	2601      	movs	r6, #1
	while (num_events--) {
    c97c:	b901      	cbnz	r1, c980 <clear_event_registrations+0x10>
}
    c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    c980:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    c984:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    c988:	f003 031f 	and.w	r3, r3, #31
    c98c:	2b08      	cmp	r3, #8
    c98e:	f1a0 0714 	sub.w	r7, r0, #20
    c992:	d80d      	bhi.n	c9b0 <clear_event_registrations+0x40>
    c994:	fa06 f303 	lsl.w	r3, r6, r3
    c998:	f413 7f8b 	tst.w	r3, #278	; 0x116
    c99c:	d008      	beq.n	c9b0 <clear_event_registrations+0x40>
	return node->next != NULL;
    c99e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    c9a2:	b12b      	cbz	r3, c9b0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    c9a4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    c9a8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    c9aa:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    c9ac:	e940 4405 	strd	r4, r4, [r0, #-20]
    c9b0:	f382 8811 	msr	BASEPRI, r2
    c9b4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    c9b8:	f04f 0320 	mov.w	r3, #32
    c9bc:	f3ef 8211 	mrs	r2, BASEPRI
    c9c0:	f383 8812 	msr	BASEPRI_MAX, r3
    c9c4:	f3bf 8f6f 	isb	sy
    c9c8:	3901      	subs	r1, #1
    c9ca:	4638      	mov	r0, r7
    c9cc:	e7d6      	b.n	c97c <clear_event_registrations+0xc>

0000c9ce <k_poll_event_init>:
{
    c9ce:	b510      	push	{r4, lr}
	event->type = type;
    c9d0:	04d2      	lsls	r2, r2, #19
    c9d2:	0209      	lsls	r1, r1, #8
    c9d4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    c9d8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    c9dc:	430a      	orrs	r2, r1
    c9de:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    c9e0:	2400      	movs	r4, #0
	event->type = type;
    c9e2:	430a      	orrs	r2, r1
	event->obj = obj;
    c9e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    c9e8:	6084      	str	r4, [r0, #8]
}
    c9ea:	bd10      	pop	{r4, pc}

0000c9ec <z_handle_obj_poll_events>:
{
    c9ec:	4603      	mov	r3, r0
	return list->head == list;
    c9ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    c9f0:	4283      	cmp	r3, r0
    c9f2:	d008      	beq.n	ca06 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    c9f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c9f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c9fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c9fc:	2300      	movs	r3, #0
	node->prev = NULL;
    c9fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    ca02:	f7ff bf5b 	b.w	c8bc <signal_poll_event>
}
    ca06:	4770      	bx	lr

0000ca08 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    ca08:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    ca0a:	e9c0 0000 	strd	r0, r0, [r0]
    ca0e:	6083      	str	r3, [r0, #8]
}
    ca10:	4770      	bx	lr

0000ca12 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    ca12:	2300      	movs	r3, #0
    ca14:	6083      	str	r3, [r0, #8]
}
    ca16:	4770      	bx	lr

0000ca18 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    ca18:	6883      	ldr	r3, [r0, #8]
    ca1a:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    ca1c:	68c3      	ldr	r3, [r0, #12]
    ca1e:	6013      	str	r3, [r2, #0]
}
    ca20:	4770      	bx	lr

0000ca22 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    ca22:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    ca24:	2301      	movs	r3, #1
    ca26:	408b      	lsls	r3, r1
    ca28:	ea22 0303 	bic.w	r3, r2, r3
    ca2c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    ca2e:	fa22 f001 	lsr.w	r0, r2, r1
}
    ca32:	f000 0001 	and.w	r0, r0, #1
    ca36:	4770      	bx	lr

0000ca38 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    ca38:	b120      	cbz	r0, ca44 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ca3a:	2200      	movs	r2, #0
    ca3c:	4611      	mov	r1, r2
    ca3e:	30c0      	adds	r0, #192	; 0xc0
    ca40:	f7ff be2b 	b.w	c69a <z_sched_wake>
}
    ca44:	4770      	bx	lr

0000ca46 <k_work_submit_to_queue>:
{
    ca46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ca48:	9001      	str	r0, [sp, #4]
    ca4a:	4608      	mov	r0, r1
    ca4c:	f04f 0320 	mov.w	r3, #32
    ca50:	f3ef 8511 	mrs	r5, BASEPRI
    ca54:	f383 8812 	msr	BASEPRI_MAX, r3
    ca58:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ca5c:	a901      	add	r1, sp, #4
    ca5e:	f7fc f8e5 	bl	8c2c <submit_to_queue_locked>
    ca62:	4604      	mov	r4, r0
	__asm__ volatile(
    ca64:	f385 8811 	msr	BASEPRI, r5
    ca68:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    ca6c:	2800      	cmp	r0, #0
    ca6e:	dd04      	ble.n	ca7a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    ca70:	f7fb fdd0 	bl	8614 <z_impl_k_is_preempt_thread>
    ca74:	b108      	cbz	r0, ca7a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    ca76:	f7fb fd25 	bl	84c4 <z_impl_k_yield>
}
    ca7a:	4620      	mov	r0, r4
    ca7c:	b003      	add	sp, #12
    ca7e:	bd30      	pop	{r4, r5, pc}

0000ca80 <memcmp>:
    ca80:	b510      	push	{r4, lr}
    ca82:	3901      	subs	r1, #1
    ca84:	4402      	add	r2, r0
    ca86:	4290      	cmp	r0, r2
    ca88:	d101      	bne.n	ca8e <memcmp+0xe>
    ca8a:	2000      	movs	r0, #0
    ca8c:	e005      	b.n	ca9a <memcmp+0x1a>
    ca8e:	7803      	ldrb	r3, [r0, #0]
    ca90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ca94:	42a3      	cmp	r3, r4
    ca96:	d001      	beq.n	ca9c <memcmp+0x1c>
    ca98:	1b18      	subs	r0, r3, r4
    ca9a:	bd10      	pop	{r4, pc}
    ca9c:	3001      	adds	r0, #1
    ca9e:	e7f2      	b.n	ca86 <memcmp+0x6>

0000caa0 <memcpy>:
    caa0:	440a      	add	r2, r1
    caa2:	4291      	cmp	r1, r2
    caa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    caa8:	d100      	bne.n	caac <memcpy+0xc>
    caaa:	4770      	bx	lr
    caac:	b510      	push	{r4, lr}
    caae:	f811 4b01 	ldrb.w	r4, [r1], #1
    cab2:	f803 4f01 	strb.w	r4, [r3, #1]!
    cab6:	4291      	cmp	r1, r2
    cab8:	d1f9      	bne.n	caae <memcpy+0xe>
    caba:	bd10      	pop	{r4, pc}

0000cabc <memmove>:
    cabc:	4288      	cmp	r0, r1
    cabe:	b510      	push	{r4, lr}
    cac0:	eb01 0402 	add.w	r4, r1, r2
    cac4:	d902      	bls.n	cacc <memmove+0x10>
    cac6:	4284      	cmp	r4, r0
    cac8:	4623      	mov	r3, r4
    caca:	d807      	bhi.n	cadc <memmove+0x20>
    cacc:	1e43      	subs	r3, r0, #1
    cace:	42a1      	cmp	r1, r4
    cad0:	d008      	beq.n	cae4 <memmove+0x28>
    cad2:	f811 2b01 	ldrb.w	r2, [r1], #1
    cad6:	f803 2f01 	strb.w	r2, [r3, #1]!
    cada:	e7f8      	b.n	cace <memmove+0x12>
    cadc:	4402      	add	r2, r0
    cade:	4601      	mov	r1, r0
    cae0:	428a      	cmp	r2, r1
    cae2:	d100      	bne.n	cae6 <memmove+0x2a>
    cae4:	bd10      	pop	{r4, pc}
    cae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    caea:	f802 4d01 	strb.w	r4, [r2, #-1]!
    caee:	e7f7      	b.n	cae0 <memmove+0x24>

0000caf0 <memset>:
    caf0:	4402      	add	r2, r0
    caf2:	4603      	mov	r3, r0
    caf4:	4293      	cmp	r3, r2
    caf6:	d100      	bne.n	cafa <memset+0xa>
    caf8:	4770      	bx	lr
    cafa:	f803 1b01 	strb.w	r1, [r3], #1
    cafe:	e7f9      	b.n	caf4 <memset+0x4>

0000cb00 <__cvt>:
    cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb04:	b088      	sub	sp, #32
    cb06:	2b00      	cmp	r3, #0
    cb08:	461f      	mov	r7, r3
    cb0a:	4614      	mov	r4, r2
    cb0c:	bfb8      	it	lt
    cb0e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    cb12:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cb14:	9d10      	ldr	r5, [sp, #64]	; 0x40
    cb16:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    cb1a:	bfb6      	itet	lt
    cb1c:	461f      	movlt	r7, r3
    cb1e:	2300      	movge	r3, #0
    cb20:	232d      	movlt	r3, #45	; 0x2d
    cb22:	7013      	strb	r3, [r2, #0]
    cb24:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb26:	f023 0820 	bic.w	r8, r3, #32
    cb2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    cb2e:	d005      	beq.n	cb3c <__cvt+0x3c>
    cb30:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    cb34:	d100      	bne.n	cb38 <__cvt+0x38>
    cb36:	3501      	adds	r5, #1
    cb38:	2302      	movs	r3, #2
    cb3a:	e000      	b.n	cb3e <__cvt+0x3e>
    cb3c:	2303      	movs	r3, #3
    cb3e:	aa07      	add	r2, sp, #28
    cb40:	9204      	str	r2, [sp, #16]
    cb42:	aa06      	add	r2, sp, #24
    cb44:	e9cd a202 	strd	sl, r2, [sp, #8]
    cb48:	e9cd 3500 	strd	r3, r5, [sp]
    cb4c:	4622      	mov	r2, r4
    cb4e:	463b      	mov	r3, r7
    cb50:	f7f4 fa1a 	bl	f88 <_dtoa_r>
    cb54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    cb58:	4606      	mov	r6, r0
    cb5a:	d102      	bne.n	cb62 <__cvt+0x62>
    cb5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb5e:	07db      	lsls	r3, r3, #31
    cb60:	d522      	bpl.n	cba8 <__cvt+0xa8>
    cb62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    cb66:	eb06 0905 	add.w	r9, r6, r5
    cb6a:	d110      	bne.n	cb8e <__cvt+0x8e>
    cb6c:	7833      	ldrb	r3, [r6, #0]
    cb6e:	2b30      	cmp	r3, #48	; 0x30
    cb70:	d10a      	bne.n	cb88 <__cvt+0x88>
    cb72:	2200      	movs	r2, #0
    cb74:	2300      	movs	r3, #0
    cb76:	4620      	mov	r0, r4
    cb78:	4639      	mov	r1, r7
    cb7a:	f7f3 ff4f 	bl	a1c <__aeabi_dcmpeq>
    cb7e:	b918      	cbnz	r0, cb88 <__cvt+0x88>
    cb80:	f1c5 0501 	rsb	r5, r5, #1
    cb84:	f8ca 5000 	str.w	r5, [sl]
    cb88:	f8da 3000 	ldr.w	r3, [sl]
    cb8c:	4499      	add	r9, r3
    cb8e:	2200      	movs	r2, #0
    cb90:	2300      	movs	r3, #0
    cb92:	4620      	mov	r0, r4
    cb94:	4639      	mov	r1, r7
    cb96:	f7f3 ff41 	bl	a1c <__aeabi_dcmpeq>
    cb9a:	b108      	cbz	r0, cba0 <__cvt+0xa0>
    cb9c:	f8cd 901c 	str.w	r9, [sp, #28]
    cba0:	2230      	movs	r2, #48	; 0x30
    cba2:	9b07      	ldr	r3, [sp, #28]
    cba4:	454b      	cmp	r3, r9
    cba6:	d307      	bcc.n	cbb8 <__cvt+0xb8>
    cba8:	9b07      	ldr	r3, [sp, #28]
    cbaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cbac:	1b9b      	subs	r3, r3, r6
    cbae:	4630      	mov	r0, r6
    cbb0:	6013      	str	r3, [r2, #0]
    cbb2:	b008      	add	sp, #32
    cbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbb8:	1c59      	adds	r1, r3, #1
    cbba:	9107      	str	r1, [sp, #28]
    cbbc:	701a      	strb	r2, [r3, #0]
    cbbe:	e7f0      	b.n	cba2 <__cvt+0xa2>

0000cbc0 <__exponent>:
    cbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cbc2:	4603      	mov	r3, r0
    cbc4:	2900      	cmp	r1, #0
    cbc6:	bfb8      	it	lt
    cbc8:	4249      	neglt	r1, r1
    cbca:	f803 2b02 	strb.w	r2, [r3], #2
    cbce:	bfb4      	ite	lt
    cbd0:	222d      	movlt	r2, #45	; 0x2d
    cbd2:	222b      	movge	r2, #43	; 0x2b
    cbd4:	2909      	cmp	r1, #9
    cbd6:	7042      	strb	r2, [r0, #1]
    cbd8:	dd2a      	ble.n	cc30 <__exponent+0x70>
    cbda:	f10d 0407 	add.w	r4, sp, #7
    cbde:	46a4      	mov	ip, r4
    cbe0:	270a      	movs	r7, #10
    cbe2:	46a6      	mov	lr, r4
    cbe4:	460a      	mov	r2, r1
    cbe6:	fb91 f6f7 	sdiv	r6, r1, r7
    cbea:	fb07 1516 	mls	r5, r7, r6, r1
    cbee:	3530      	adds	r5, #48	; 0x30
    cbf0:	2a63      	cmp	r2, #99	; 0x63
    cbf2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    cbf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
    cbfa:	4631      	mov	r1, r6
    cbfc:	dcf1      	bgt.n	cbe2 <__exponent+0x22>
    cbfe:	3130      	adds	r1, #48	; 0x30
    cc00:	f1ae 0502 	sub.w	r5, lr, #2
    cc04:	f804 1c01 	strb.w	r1, [r4, #-1]
    cc08:	1c44      	adds	r4, r0, #1
    cc0a:	4629      	mov	r1, r5
    cc0c:	4561      	cmp	r1, ip
    cc0e:	d30a      	bcc.n	cc26 <__exponent+0x66>
    cc10:	f10d 0209 	add.w	r2, sp, #9
    cc14:	eba2 020e 	sub.w	r2, r2, lr
    cc18:	4565      	cmp	r5, ip
    cc1a:	bf88      	it	hi
    cc1c:	2200      	movhi	r2, #0
    cc1e:	4413      	add	r3, r2
    cc20:	1a18      	subs	r0, r3, r0
    cc22:	b003      	add	sp, #12
    cc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc26:	f811 2b01 	ldrb.w	r2, [r1], #1
    cc2a:	f804 2f01 	strb.w	r2, [r4, #1]!
    cc2e:	e7ed      	b.n	cc0c <__exponent+0x4c>
    cc30:	2330      	movs	r3, #48	; 0x30
    cc32:	3130      	adds	r1, #48	; 0x30
    cc34:	7083      	strb	r3, [r0, #2]
    cc36:	70c1      	strb	r1, [r0, #3]
    cc38:	1d03      	adds	r3, r0, #4
    cc3a:	e7f1      	b.n	cc20 <__exponent+0x60>

0000cc3c <_printf_common>:
    cc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc40:	4616      	mov	r6, r2
    cc42:	4699      	mov	r9, r3
    cc44:	688a      	ldr	r2, [r1, #8]
    cc46:	690b      	ldr	r3, [r1, #16]
    cc48:	f8dd 8020 	ldr.w	r8, [sp, #32]
    cc4c:	4293      	cmp	r3, r2
    cc4e:	bfb8      	it	lt
    cc50:	4613      	movlt	r3, r2
    cc52:	6033      	str	r3, [r6, #0]
    cc54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    cc58:	4607      	mov	r7, r0
    cc5a:	460c      	mov	r4, r1
    cc5c:	b10a      	cbz	r2, cc62 <_printf_common+0x26>
    cc5e:	3301      	adds	r3, #1
    cc60:	6033      	str	r3, [r6, #0]
    cc62:	6823      	ldr	r3, [r4, #0]
    cc64:	0699      	lsls	r1, r3, #26
    cc66:	bf42      	ittt	mi
    cc68:	6833      	ldrmi	r3, [r6, #0]
    cc6a:	3302      	addmi	r3, #2
    cc6c:	6033      	strmi	r3, [r6, #0]
    cc6e:	6825      	ldr	r5, [r4, #0]
    cc70:	f015 0506 	ands.w	r5, r5, #6
    cc74:	d106      	bne.n	cc84 <_printf_common+0x48>
    cc76:	f104 0a19 	add.w	sl, r4, #25
    cc7a:	68e3      	ldr	r3, [r4, #12]
    cc7c:	6832      	ldr	r2, [r6, #0]
    cc7e:	1a9b      	subs	r3, r3, r2
    cc80:	42ab      	cmp	r3, r5
    cc82:	dc26      	bgt.n	ccd2 <_printf_common+0x96>
    cc84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    cc88:	1e13      	subs	r3, r2, #0
    cc8a:	6822      	ldr	r2, [r4, #0]
    cc8c:	bf18      	it	ne
    cc8e:	2301      	movne	r3, #1
    cc90:	0692      	lsls	r2, r2, #26
    cc92:	d42b      	bmi.n	ccec <_printf_common+0xb0>
    cc94:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cc98:	4649      	mov	r1, r9
    cc9a:	4638      	mov	r0, r7
    cc9c:	47c0      	blx	r8
    cc9e:	3001      	adds	r0, #1
    cca0:	d01e      	beq.n	cce0 <_printf_common+0xa4>
    cca2:	6823      	ldr	r3, [r4, #0]
    cca4:	68e5      	ldr	r5, [r4, #12]
    cca6:	6832      	ldr	r2, [r6, #0]
    cca8:	f003 0306 	and.w	r3, r3, #6
    ccac:	2b04      	cmp	r3, #4
    ccae:	bf08      	it	eq
    ccb0:	1aad      	subeq	r5, r5, r2
    ccb2:	68a3      	ldr	r3, [r4, #8]
    ccb4:	6922      	ldr	r2, [r4, #16]
    ccb6:	bf0c      	ite	eq
    ccb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    ccbc:	2500      	movne	r5, #0
    ccbe:	4293      	cmp	r3, r2
    ccc0:	bfc4      	itt	gt
    ccc2:	1a9b      	subgt	r3, r3, r2
    ccc4:	18ed      	addgt	r5, r5, r3
    ccc6:	2600      	movs	r6, #0
    ccc8:	341a      	adds	r4, #26
    ccca:	42b5      	cmp	r5, r6
    cccc:	d11a      	bne.n	cd04 <_printf_common+0xc8>
    ccce:	2000      	movs	r0, #0
    ccd0:	e008      	b.n	cce4 <_printf_common+0xa8>
    ccd2:	2301      	movs	r3, #1
    ccd4:	4652      	mov	r2, sl
    ccd6:	4649      	mov	r1, r9
    ccd8:	4638      	mov	r0, r7
    ccda:	47c0      	blx	r8
    ccdc:	3001      	adds	r0, #1
    ccde:	d103      	bne.n	cce8 <_printf_common+0xac>
    cce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cce8:	3501      	adds	r5, #1
    ccea:	e7c6      	b.n	cc7a <_printf_common+0x3e>
    ccec:	18e1      	adds	r1, r4, r3
    ccee:	1c5a      	adds	r2, r3, #1
    ccf0:	2030      	movs	r0, #48	; 0x30
    ccf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    ccf6:	4422      	add	r2, r4
    ccf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ccfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    cd00:	3302      	adds	r3, #2
    cd02:	e7c7      	b.n	cc94 <_printf_common+0x58>
    cd04:	2301      	movs	r3, #1
    cd06:	4622      	mov	r2, r4
    cd08:	4649      	mov	r1, r9
    cd0a:	4638      	mov	r0, r7
    cd0c:	47c0      	blx	r8
    cd0e:	3001      	adds	r0, #1
    cd10:	d0e6      	beq.n	cce0 <_printf_common+0xa4>
    cd12:	3601      	adds	r6, #1
    cd14:	e7d9      	b.n	ccca <_printf_common+0x8e>

0000cd16 <strchr>:
    cd16:	b2c9      	uxtb	r1, r1
    cd18:	4603      	mov	r3, r0
    cd1a:	4618      	mov	r0, r3
    cd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd20:	b112      	cbz	r2, cd28 <strchr+0x12>
    cd22:	428a      	cmp	r2, r1
    cd24:	d1f9      	bne.n	cd1a <strchr+0x4>
    cd26:	4770      	bx	lr
    cd28:	2900      	cmp	r1, #0
    cd2a:	bf18      	it	ne
    cd2c:	2000      	movne	r0, #0
    cd2e:	4770      	bx	lr

0000cd30 <strcpy>:
    cd30:	4603      	mov	r3, r0
    cd32:	f811 2b01 	ldrb.w	r2, [r1], #1
    cd36:	f803 2b01 	strb.w	r2, [r3], #1
    cd3a:	2a00      	cmp	r2, #0
    cd3c:	d1f9      	bne.n	cd32 <strcpy+0x2>
    cd3e:	4770      	bx	lr

0000cd40 <strncmp>:
    cd40:	b510      	push	{r4, lr}
    cd42:	4603      	mov	r3, r0
    cd44:	b172      	cbz	r2, cd64 <strncmp+0x24>
    cd46:	3901      	subs	r1, #1
    cd48:	1884      	adds	r4, r0, r2
    cd4a:	f813 0b01 	ldrb.w	r0, [r3], #1
    cd4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    cd52:	4290      	cmp	r0, r2
    cd54:	d101      	bne.n	cd5a <strncmp+0x1a>
    cd56:	42a3      	cmp	r3, r4
    cd58:	d101      	bne.n	cd5e <strncmp+0x1e>
    cd5a:	1a80      	subs	r0, r0, r2
    cd5c:	bd10      	pop	{r4, pc}
    cd5e:	2800      	cmp	r0, #0
    cd60:	d1f3      	bne.n	cd4a <strncmp+0xa>
    cd62:	e7fa      	b.n	cd5a <strncmp+0x1a>
    cd64:	4610      	mov	r0, r2
    cd66:	e7f9      	b.n	cd5c <strncmp+0x1c>

0000cd68 <strncpy>:
    cd68:	b510      	push	{r4, lr}
    cd6a:	3901      	subs	r1, #1
    cd6c:	4603      	mov	r3, r0
    cd6e:	b132      	cbz	r2, cd7e <strncpy+0x16>
    cd70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    cd74:	f803 4b01 	strb.w	r4, [r3], #1
    cd78:	3a01      	subs	r2, #1
    cd7a:	2c00      	cmp	r4, #0
    cd7c:	d1f7      	bne.n	cd6e <strncpy+0x6>
    cd7e:	441a      	add	r2, r3
    cd80:	2100      	movs	r1, #0
    cd82:	4293      	cmp	r3, r2
    cd84:	d100      	bne.n	cd88 <strncpy+0x20>
    cd86:	bd10      	pop	{r4, pc}
    cd88:	f803 1b01 	strb.w	r1, [r3], #1
    cd8c:	e7f9      	b.n	cd82 <strncpy+0x1a>

0000cd8e <strnlen>:
    cd8e:	b510      	push	{r4, lr}
    cd90:	4602      	mov	r2, r0
    cd92:	4401      	add	r1, r0
    cd94:	428a      	cmp	r2, r1
    cd96:	4613      	mov	r3, r2
    cd98:	d003      	beq.n	cda2 <strnlen+0x14>
    cd9a:	781c      	ldrb	r4, [r3, #0]
    cd9c:	3201      	adds	r2, #1
    cd9e:	2c00      	cmp	r4, #0
    cda0:	d1f8      	bne.n	cd94 <strnlen+0x6>
    cda2:	1a18      	subs	r0, r3, r0
    cda4:	bd10      	pop	{r4, pc}

0000cda6 <strstr>:
    cda6:	780a      	ldrb	r2, [r1, #0]
    cda8:	b570      	push	{r4, r5, r6, lr}
    cdaa:	b96a      	cbnz	r2, cdc8 <strstr+0x22>
    cdac:	bd70      	pop	{r4, r5, r6, pc}
    cdae:	429a      	cmp	r2, r3
    cdb0:	d109      	bne.n	cdc6 <strstr+0x20>
    cdb2:	460c      	mov	r4, r1
    cdb4:	4605      	mov	r5, r0
    cdb6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d0f6      	beq.n	cdac <strstr+0x6>
    cdbe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    cdc2:	429e      	cmp	r6, r3
    cdc4:	d0f7      	beq.n	cdb6 <strstr+0x10>
    cdc6:	3001      	adds	r0, #1
    cdc8:	7803      	ldrb	r3, [r0, #0]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d1ef      	bne.n	cdae <strstr+0x8>
    cdce:	4618      	mov	r0, r3
    cdd0:	e7ec      	b.n	cdac <strstr+0x6>

0000cdd2 <quorem>:
    cdd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdd6:	6903      	ldr	r3, [r0, #16]
    cdd8:	690c      	ldr	r4, [r1, #16]
    cdda:	42a3      	cmp	r3, r4
    cddc:	4607      	mov	r7, r0
    cdde:	db7d      	blt.n	cedc <quorem+0x10a>
    cde0:	3c01      	subs	r4, #1
    cde2:	f101 0814 	add.w	r8, r1, #20
    cde6:	f100 0514 	add.w	r5, r0, #20
    cdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    cdee:	9301      	str	r3, [sp, #4]
    cdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    cdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    cdf8:	3301      	adds	r3, #1
    cdfa:	429a      	cmp	r2, r3
    cdfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    ce00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
    ce04:	fbb2 f6f3 	udiv	r6, r2, r3
    ce08:	d32e      	bcc.n	ce68 <quorem+0x96>
    ce0a:	f04f 0e00 	mov.w	lr, #0
    ce0e:	4640      	mov	r0, r8
    ce10:	46ac      	mov	ip, r5
    ce12:	46f2      	mov	sl, lr
    ce14:	f850 2b04 	ldr.w	r2, [r0], #4
    ce18:	b293      	uxth	r3, r2
    ce1a:	fb06 e303 	mla	r3, r6, r3, lr
    ce1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    ce22:	0c12      	lsrs	r2, r2, #16
    ce24:	b29b      	uxth	r3, r3
    ce26:	fb06 e202 	mla	r2, r6, r2, lr
    ce2a:	ebaa 0303 	sub.w	r3, sl, r3
    ce2e:	f8dc a000 	ldr.w	sl, [ip]
    ce32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    ce36:	b292      	uxth	r2, r2
    ce38:	fa13 f38a 	uxtah	r3, r3, sl
    ce3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
    ce40:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ce44:	b29b      	uxth	r3, r3
    ce46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ce4a:	4581      	cmp	r9, r0
    ce4c:	f84c 3b04 	str.w	r3, [ip], #4
    ce50:	ea4f 4a22 	mov.w	sl, r2, asr #16
    ce54:	d2de      	bcs.n	ce14 <quorem+0x42>
    ce56:	f855 300b 	ldr.w	r3, [r5, fp]
    ce5a:	b92b      	cbnz	r3, ce68 <quorem+0x96>
    ce5c:	9b01      	ldr	r3, [sp, #4]
    ce5e:	3b04      	subs	r3, #4
    ce60:	429d      	cmp	r5, r3
    ce62:	461a      	mov	r2, r3
    ce64:	d32e      	bcc.n	cec4 <quorem+0xf2>
    ce66:	613c      	str	r4, [r7, #16]
    ce68:	4638      	mov	r0, r7
    ce6a:	f000 f886 	bl	cf7a <__mcmp>
    ce6e:	2800      	cmp	r0, #0
    ce70:	db24      	blt.n	cebc <quorem+0xea>
    ce72:	3601      	adds	r6, #1
    ce74:	4628      	mov	r0, r5
    ce76:	f04f 0c00 	mov.w	ip, #0
    ce7a:	f858 2b04 	ldr.w	r2, [r8], #4
    ce7e:	f8d0 e000 	ldr.w	lr, [r0]
    ce82:	b293      	uxth	r3, r2
    ce84:	ebac 0303 	sub.w	r3, ip, r3
    ce88:	0c12      	lsrs	r2, r2, #16
    ce8a:	fa13 f38e 	uxtah	r3, r3, lr
    ce8e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
    ce92:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ce96:	b29b      	uxth	r3, r3
    ce98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ce9c:	45c1      	cmp	r9, r8
    ce9e:	f840 3b04 	str.w	r3, [r0], #4
    cea2:	ea4f 4c22 	mov.w	ip, r2, asr #16
    cea6:	d2e8      	bcs.n	ce7a <quorem+0xa8>
    cea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    ceac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    ceb0:	b922      	cbnz	r2, cebc <quorem+0xea>
    ceb2:	3b04      	subs	r3, #4
    ceb4:	429d      	cmp	r5, r3
    ceb6:	461a      	mov	r2, r3
    ceb8:	d30a      	bcc.n	ced0 <quorem+0xfe>
    ceba:	613c      	str	r4, [r7, #16]
    cebc:	4630      	mov	r0, r6
    cebe:	b003      	add	sp, #12
    cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cec4:	6812      	ldr	r2, [r2, #0]
    cec6:	3b04      	subs	r3, #4
    cec8:	2a00      	cmp	r2, #0
    ceca:	d1cc      	bne.n	ce66 <quorem+0x94>
    cecc:	3c01      	subs	r4, #1
    cece:	e7c7      	b.n	ce60 <quorem+0x8e>
    ced0:	6812      	ldr	r2, [r2, #0]
    ced2:	3b04      	subs	r3, #4
    ced4:	2a00      	cmp	r2, #0
    ced6:	d1f0      	bne.n	ceba <quorem+0xe8>
    ced8:	3c01      	subs	r4, #1
    ceda:	e7eb      	b.n	ceb4 <quorem+0xe2>
    cedc:	2000      	movs	r0, #0
    cede:	e7ee      	b.n	cebe <quorem+0xec>

0000cee0 <__hi0bits>:
    cee0:	0c02      	lsrs	r2, r0, #16
    cee2:	0412      	lsls	r2, r2, #16
    cee4:	4603      	mov	r3, r0
    cee6:	b9ca      	cbnz	r2, cf1c <__hi0bits+0x3c>
    cee8:	0403      	lsls	r3, r0, #16
    ceea:	2010      	movs	r0, #16
    ceec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    cef0:	bf04      	itt	eq
    cef2:	021b      	lsleq	r3, r3, #8
    cef4:	3008      	addeq	r0, #8
    cef6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    cefa:	bf04      	itt	eq
    cefc:	011b      	lsleq	r3, r3, #4
    cefe:	3004      	addeq	r0, #4
    cf00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    cf04:	bf04      	itt	eq
    cf06:	009b      	lsleq	r3, r3, #2
    cf08:	3002      	addeq	r0, #2
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	db05      	blt.n	cf1a <__hi0bits+0x3a>
    cf0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    cf12:	f100 0001 	add.w	r0, r0, #1
    cf16:	bf08      	it	eq
    cf18:	2020      	moveq	r0, #32
    cf1a:	4770      	bx	lr
    cf1c:	2000      	movs	r0, #0
    cf1e:	e7e5      	b.n	ceec <__hi0bits+0xc>

0000cf20 <__lo0bits>:
    cf20:	6803      	ldr	r3, [r0, #0]
    cf22:	4602      	mov	r2, r0
    cf24:	f013 0007 	ands.w	r0, r3, #7
    cf28:	d00b      	beq.n	cf42 <__lo0bits+0x22>
    cf2a:	07d9      	lsls	r1, r3, #31
    cf2c:	d421      	bmi.n	cf72 <__lo0bits+0x52>
    cf2e:	0798      	lsls	r0, r3, #30
    cf30:	bf49      	itett	mi
    cf32:	085b      	lsrmi	r3, r3, #1
    cf34:	089b      	lsrpl	r3, r3, #2
    cf36:	2001      	movmi	r0, #1
    cf38:	6013      	strmi	r3, [r2, #0]
    cf3a:	bf5c      	itt	pl
    cf3c:	6013      	strpl	r3, [r2, #0]
    cf3e:	2002      	movpl	r0, #2
    cf40:	4770      	bx	lr
    cf42:	b299      	uxth	r1, r3
    cf44:	b909      	cbnz	r1, cf4a <__lo0bits+0x2a>
    cf46:	0c1b      	lsrs	r3, r3, #16
    cf48:	2010      	movs	r0, #16
    cf4a:	b2d9      	uxtb	r1, r3
    cf4c:	b909      	cbnz	r1, cf52 <__lo0bits+0x32>
    cf4e:	3008      	adds	r0, #8
    cf50:	0a1b      	lsrs	r3, r3, #8
    cf52:	0719      	lsls	r1, r3, #28
    cf54:	bf04      	itt	eq
    cf56:	091b      	lsreq	r3, r3, #4
    cf58:	3004      	addeq	r0, #4
    cf5a:	0799      	lsls	r1, r3, #30
    cf5c:	bf04      	itt	eq
    cf5e:	089b      	lsreq	r3, r3, #2
    cf60:	3002      	addeq	r0, #2
    cf62:	07d9      	lsls	r1, r3, #31
    cf64:	d403      	bmi.n	cf6e <__lo0bits+0x4e>
    cf66:	085b      	lsrs	r3, r3, #1
    cf68:	f100 0001 	add.w	r0, r0, #1
    cf6c:	d003      	beq.n	cf76 <__lo0bits+0x56>
    cf6e:	6013      	str	r3, [r2, #0]
    cf70:	4770      	bx	lr
    cf72:	2000      	movs	r0, #0
    cf74:	4770      	bx	lr
    cf76:	2020      	movs	r0, #32
    cf78:	4770      	bx	lr

0000cf7a <__mcmp>:
    cf7a:	690a      	ldr	r2, [r1, #16]
    cf7c:	4603      	mov	r3, r0
    cf7e:	6900      	ldr	r0, [r0, #16]
    cf80:	1a80      	subs	r0, r0, r2
    cf82:	b530      	push	{r4, r5, lr}
    cf84:	d10d      	bne.n	cfa2 <__mcmp+0x28>
    cf86:	3314      	adds	r3, #20
    cf88:	3114      	adds	r1, #20
    cf8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    cf8e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    cf92:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    cf96:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    cf9a:	4295      	cmp	r5, r2
    cf9c:	d002      	beq.n	cfa4 <__mcmp+0x2a>
    cf9e:	d304      	bcc.n	cfaa <__mcmp+0x30>
    cfa0:	2001      	movs	r0, #1
    cfa2:	bd30      	pop	{r4, r5, pc}
    cfa4:	42a3      	cmp	r3, r4
    cfa6:	d3f4      	bcc.n	cf92 <__mcmp+0x18>
    cfa8:	e7fb      	b.n	cfa2 <__mcmp+0x28>
    cfaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cfae:	e7f8      	b.n	cfa2 <__mcmp+0x28>

0000cfb0 <_calloc_r>:
    cfb0:	b538      	push	{r3, r4, r5, lr}
    cfb2:	fb02 f501 	mul.w	r5, r2, r1
    cfb6:	4629      	mov	r1, r5
    cfb8:	f7fb ff12 	bl	8de0 <_malloc_r>
    cfbc:	4604      	mov	r4, r0
    cfbe:	b118      	cbz	r0, cfc8 <_calloc_r+0x18>
    cfc0:	462a      	mov	r2, r5
    cfc2:	2100      	movs	r1, #0
    cfc4:	f7ff fd94 	bl	caf0 <memset>
    cfc8:	4620      	mov	r0, r4
    cfca:	bd38      	pop	{r3, r4, r5, pc}

0000cfcc <__ssputs_r>:
    cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfd0:	688e      	ldr	r6, [r1, #8]
    cfd2:	429e      	cmp	r6, r3
    cfd4:	4682      	mov	sl, r0
    cfd6:	460c      	mov	r4, r1
    cfd8:	4690      	mov	r8, r2
    cfda:	461f      	mov	r7, r3
    cfdc:	d838      	bhi.n	d050 <__ssputs_r+0x84>
    cfde:	898a      	ldrh	r2, [r1, #12]
    cfe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    cfe4:	d032      	beq.n	d04c <__ssputs_r+0x80>
    cfe6:	6825      	ldr	r5, [r4, #0]
    cfe8:	6909      	ldr	r1, [r1, #16]
    cfea:	eba5 0901 	sub.w	r9, r5, r1
    cfee:	6965      	ldr	r5, [r4, #20]
    cff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    cff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    cff8:	3301      	adds	r3, #1
    cffa:	444b      	add	r3, r9
    cffc:	106d      	asrs	r5, r5, #1
    cffe:	429d      	cmp	r5, r3
    d000:	bf38      	it	cc
    d002:	461d      	movcc	r5, r3
    d004:	0553      	lsls	r3, r2, #21
    d006:	d531      	bpl.n	d06c <__ssputs_r+0xa0>
    d008:	4629      	mov	r1, r5
    d00a:	f7fb fee9 	bl	8de0 <_malloc_r>
    d00e:	4606      	mov	r6, r0
    d010:	b950      	cbnz	r0, d028 <__ssputs_r+0x5c>
    d012:	230c      	movs	r3, #12
    d014:	f8ca 3000 	str.w	r3, [sl]
    d018:	89a3      	ldrh	r3, [r4, #12]
    d01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d01e:	81a3      	strh	r3, [r4, #12]
    d020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d028:	6921      	ldr	r1, [r4, #16]
    d02a:	464a      	mov	r2, r9
    d02c:	f7ff fd38 	bl	caa0 <memcpy>
    d030:	89a3      	ldrh	r3, [r4, #12]
    d032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    d036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d03a:	81a3      	strh	r3, [r4, #12]
    d03c:	6126      	str	r6, [r4, #16]
    d03e:	6165      	str	r5, [r4, #20]
    d040:	444e      	add	r6, r9
    d042:	eba5 0509 	sub.w	r5, r5, r9
    d046:	6026      	str	r6, [r4, #0]
    d048:	60a5      	str	r5, [r4, #8]
    d04a:	463e      	mov	r6, r7
    d04c:	42be      	cmp	r6, r7
    d04e:	d900      	bls.n	d052 <__ssputs_r+0x86>
    d050:	463e      	mov	r6, r7
    d052:	6820      	ldr	r0, [r4, #0]
    d054:	4632      	mov	r2, r6
    d056:	4641      	mov	r1, r8
    d058:	f7ff fd30 	bl	cabc <memmove>
    d05c:	68a3      	ldr	r3, [r4, #8]
    d05e:	1b9b      	subs	r3, r3, r6
    d060:	60a3      	str	r3, [r4, #8]
    d062:	6823      	ldr	r3, [r4, #0]
    d064:	4433      	add	r3, r6
    d066:	6023      	str	r3, [r4, #0]
    d068:	2000      	movs	r0, #0
    d06a:	e7db      	b.n	d024 <__ssputs_r+0x58>
    d06c:	462a      	mov	r2, r5
    d06e:	f000 f81a 	bl	d0a6 <_realloc_r>
    d072:	4606      	mov	r6, r0
    d074:	2800      	cmp	r0, #0
    d076:	d1e1      	bne.n	d03c <__ssputs_r+0x70>
    d078:	6921      	ldr	r1, [r4, #16]
    d07a:	4650      	mov	r0, sl
    d07c:	f7fb fe66 	bl	8d4c <_free_r>
    d080:	e7c7      	b.n	d012 <__ssputs_r+0x46>

0000d082 <__ascii_mbtowc>:
    d082:	b082      	sub	sp, #8
    d084:	b901      	cbnz	r1, d088 <__ascii_mbtowc+0x6>
    d086:	a901      	add	r1, sp, #4
    d088:	b142      	cbz	r2, d09c <__ascii_mbtowc+0x1a>
    d08a:	b14b      	cbz	r3, d0a0 <__ascii_mbtowc+0x1e>
    d08c:	7813      	ldrb	r3, [r2, #0]
    d08e:	600b      	str	r3, [r1, #0]
    d090:	7812      	ldrb	r2, [r2, #0]
    d092:	1e10      	subs	r0, r2, #0
    d094:	bf18      	it	ne
    d096:	2001      	movne	r0, #1
    d098:	b002      	add	sp, #8
    d09a:	4770      	bx	lr
    d09c:	4610      	mov	r0, r2
    d09e:	e7fb      	b.n	d098 <__ascii_mbtowc+0x16>
    d0a0:	f06f 0001 	mvn.w	r0, #1
    d0a4:	e7f8      	b.n	d098 <__ascii_mbtowc+0x16>

0000d0a6 <_realloc_r>:
    d0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0a8:	4607      	mov	r7, r0
    d0aa:	4614      	mov	r4, r2
    d0ac:	460e      	mov	r6, r1
    d0ae:	b921      	cbnz	r1, d0ba <_realloc_r+0x14>
    d0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d0b4:	4611      	mov	r1, r2
    d0b6:	f7fb be93 	b.w	8de0 <_malloc_r>
    d0ba:	b922      	cbnz	r2, d0c6 <_realloc_r+0x20>
    d0bc:	f7fb fe46 	bl	8d4c <_free_r>
    d0c0:	4625      	mov	r5, r4
    d0c2:	4628      	mov	r0, r5
    d0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0c6:	f000 f8a9 	bl	d21c <_malloc_usable_size_r>
    d0ca:	42a0      	cmp	r0, r4
    d0cc:	d20f      	bcs.n	d0ee <_realloc_r+0x48>
    d0ce:	4621      	mov	r1, r4
    d0d0:	4638      	mov	r0, r7
    d0d2:	f7fb fe85 	bl	8de0 <_malloc_r>
    d0d6:	4605      	mov	r5, r0
    d0d8:	2800      	cmp	r0, #0
    d0da:	d0f2      	beq.n	d0c2 <_realloc_r+0x1c>
    d0dc:	4631      	mov	r1, r6
    d0de:	4622      	mov	r2, r4
    d0e0:	f7ff fcde 	bl	caa0 <memcpy>
    d0e4:	4631      	mov	r1, r6
    d0e6:	4638      	mov	r0, r7
    d0e8:	f7fb fe30 	bl	8d4c <_free_r>
    d0ec:	e7e9      	b.n	d0c2 <_realloc_r+0x1c>
    d0ee:	4635      	mov	r5, r6
    d0f0:	e7e7      	b.n	d0c2 <_realloc_r+0x1c>

0000d0f2 <__sfputc_r>:
    d0f2:	6893      	ldr	r3, [r2, #8]
    d0f4:	3b01      	subs	r3, #1
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	b410      	push	{r4}
    d0fa:	6093      	str	r3, [r2, #8]
    d0fc:	da07      	bge.n	d10e <__sfputc_r+0x1c>
    d0fe:	6994      	ldr	r4, [r2, #24]
    d100:	42a3      	cmp	r3, r4
    d102:	db01      	blt.n	d108 <__sfputc_r+0x16>
    d104:	290a      	cmp	r1, #10
    d106:	d102      	bne.n	d10e <__sfputc_r+0x1c>
    d108:	bc10      	pop	{r4}
    d10a:	f7fd b8dd 	b.w	a2c8 <__swbuf_r>
    d10e:	6813      	ldr	r3, [r2, #0]
    d110:	1c58      	adds	r0, r3, #1
    d112:	6010      	str	r0, [r2, #0]
    d114:	7019      	strb	r1, [r3, #0]
    d116:	4608      	mov	r0, r1
    d118:	bc10      	pop	{r4}
    d11a:	4770      	bx	lr

0000d11c <__sfputs_r>:
    d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d11e:	4606      	mov	r6, r0
    d120:	460f      	mov	r7, r1
    d122:	4614      	mov	r4, r2
    d124:	18d5      	adds	r5, r2, r3
    d126:	42ac      	cmp	r4, r5
    d128:	d101      	bne.n	d12e <__sfputs_r+0x12>
    d12a:	2000      	movs	r0, #0
    d12c:	e007      	b.n	d13e <__sfputs_r+0x22>
    d12e:	f814 1b01 	ldrb.w	r1, [r4], #1
    d132:	463a      	mov	r2, r7
    d134:	4630      	mov	r0, r6
    d136:	f7ff ffdc 	bl	d0f2 <__sfputc_r>
    d13a:	1c43      	adds	r3, r0, #1
    d13c:	d1f3      	bne.n	d126 <__sfputs_r+0xa>
    d13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d140 <__ascii_wctomb>:
    d140:	4603      	mov	r3, r0
    d142:	4608      	mov	r0, r1
    d144:	b141      	cbz	r1, d158 <__ascii_wctomb+0x18>
    d146:	2aff      	cmp	r2, #255	; 0xff
    d148:	d904      	bls.n	d154 <__ascii_wctomb+0x14>
    d14a:	228a      	movs	r2, #138	; 0x8a
    d14c:	601a      	str	r2, [r3, #0]
    d14e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d152:	4770      	bx	lr
    d154:	700a      	strb	r2, [r1, #0]
    d156:	2001      	movs	r0, #1
    d158:	4770      	bx	lr

0000d15a <abort>:
    d15a:	b508      	push	{r3, lr}
    d15c:	2006      	movs	r0, #6
    d15e:	f7fd fb31 	bl	a7c4 <raise>
    d162:	2001      	movs	r0, #1
    d164:	f7f8 f9ec 	bl	5540 <_exit>

0000d168 <__sfmoreglue>:
    d168:	b570      	push	{r4, r5, r6, lr}
    d16a:	2268      	movs	r2, #104	; 0x68
    d16c:	1e4d      	subs	r5, r1, #1
    d16e:	4355      	muls	r5, r2
    d170:	460e      	mov	r6, r1
    d172:	f105 0174 	add.w	r1, r5, #116	; 0x74
    d176:	f7fb fe33 	bl	8de0 <_malloc_r>
    d17a:	4604      	mov	r4, r0
    d17c:	b140      	cbz	r0, d190 <__sfmoreglue+0x28>
    d17e:	2100      	movs	r1, #0
    d180:	e9c0 1600 	strd	r1, r6, [r0]
    d184:	300c      	adds	r0, #12
    d186:	60a0      	str	r0, [r4, #8]
    d188:	f105 0268 	add.w	r2, r5, #104	; 0x68
    d18c:	f7ff fcb0 	bl	caf0 <memset>
    d190:	4620      	mov	r0, r4
    d192:	bd70      	pop	{r4, r5, r6, pc}

0000d194 <_fwalk_reent>:
    d194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d198:	4606      	mov	r6, r0
    d19a:	4688      	mov	r8, r1
    d19c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    d1a0:	2700      	movs	r7, #0
    d1a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    d1a6:	f1b9 0901 	subs.w	r9, r9, #1
    d1aa:	d505      	bpl.n	d1b8 <_fwalk_reent+0x24>
    d1ac:	6824      	ldr	r4, [r4, #0]
    d1ae:	2c00      	cmp	r4, #0
    d1b0:	d1f7      	bne.n	d1a2 <_fwalk_reent+0xe>
    d1b2:	4638      	mov	r0, r7
    d1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d1b8:	89ab      	ldrh	r3, [r5, #12]
    d1ba:	2b01      	cmp	r3, #1
    d1bc:	d907      	bls.n	d1ce <_fwalk_reent+0x3a>
    d1be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    d1c2:	3301      	adds	r3, #1
    d1c4:	d003      	beq.n	d1ce <_fwalk_reent+0x3a>
    d1c6:	4629      	mov	r1, r5
    d1c8:	4630      	mov	r0, r6
    d1ca:	47c0      	blx	r8
    d1cc:	4307      	orrs	r7, r0
    d1ce:	3568      	adds	r5, #104	; 0x68
    d1d0:	e7e9      	b.n	d1a6 <_fwalk_reent+0x12>

0000d1d2 <__swhatbuf_r>:
    d1d2:	b570      	push	{r4, r5, r6, lr}
    d1d4:	460e      	mov	r6, r1
    d1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d1da:	2900      	cmp	r1, #0
    d1dc:	b096      	sub	sp, #88	; 0x58
    d1de:	4614      	mov	r4, r2
    d1e0:	461d      	mov	r5, r3
    d1e2:	da08      	bge.n	d1f6 <__swhatbuf_r+0x24>
    d1e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
    d1e8:	2200      	movs	r2, #0
    d1ea:	602a      	str	r2, [r5, #0]
    d1ec:	061a      	lsls	r2, r3, #24
    d1ee:	d410      	bmi.n	d212 <__swhatbuf_r+0x40>
    d1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d1f4:	e00e      	b.n	d214 <__swhatbuf_r+0x42>
    d1f6:	466a      	mov	r2, sp
    d1f8:	f7fd fb20 	bl	a83c <_fstat_r>
    d1fc:	2800      	cmp	r0, #0
    d1fe:	dbf1      	blt.n	d1e4 <__swhatbuf_r+0x12>
    d200:	9a01      	ldr	r2, [sp, #4]
    d202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    d206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    d20a:	425a      	negs	r2, r3
    d20c:	415a      	adcs	r2, r3
    d20e:	602a      	str	r2, [r5, #0]
    d210:	e7ee      	b.n	d1f0 <__swhatbuf_r+0x1e>
    d212:	2340      	movs	r3, #64	; 0x40
    d214:	2000      	movs	r0, #0
    d216:	6023      	str	r3, [r4, #0]
    d218:	b016      	add	sp, #88	; 0x58
    d21a:	bd70      	pop	{r4, r5, r6, pc}

0000d21c <_malloc_usable_size_r>:
    d21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d220:	1f18      	subs	r0, r3, #4
    d222:	2b00      	cmp	r3, #0
    d224:	bfbc      	itt	lt
    d226:	580b      	ldrlt	r3, [r1, r0]
    d228:	18c0      	addlt	r0, r0, r3
    d22a:	4770      	bx	lr

0000d22c <_raise_r>:
    d22c:	291f      	cmp	r1, #31
    d22e:	b538      	push	{r3, r4, r5, lr}
    d230:	4604      	mov	r4, r0
    d232:	460d      	mov	r5, r1
    d234:	d904      	bls.n	d240 <_raise_r+0x14>
    d236:	2316      	movs	r3, #22
    d238:	6003      	str	r3, [r0, #0]
    d23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d23e:	bd38      	pop	{r3, r4, r5, pc}
    d240:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d242:	b112      	cbz	r2, d24a <_raise_r+0x1e>
    d244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    d248:	b94b      	cbnz	r3, d25e <_raise_r+0x32>
    d24a:	4620      	mov	r0, r4
    d24c:	f000 f816 	bl	d27c <_getpid_r>
    d250:	462a      	mov	r2, r5
    d252:	4601      	mov	r1, r0
    d254:	4620      	mov	r0, r4
    d256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d25a:	f7fd babb 	b.w	a7d4 <_kill_r>
    d25e:	2b01      	cmp	r3, #1
    d260:	d00a      	beq.n	d278 <_raise_r+0x4c>
    d262:	1c59      	adds	r1, r3, #1
    d264:	d103      	bne.n	d26e <_raise_r+0x42>
    d266:	2316      	movs	r3, #22
    d268:	6003      	str	r3, [r0, #0]
    d26a:	2001      	movs	r0, #1
    d26c:	e7e7      	b.n	d23e <_raise_r+0x12>
    d26e:	2400      	movs	r4, #0
    d270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    d274:	4628      	mov	r0, r5
    d276:	4798      	blx	r3
    d278:	2000      	movs	r0, #0
    d27a:	e7e0      	b.n	d23e <_raise_r+0x12>

0000d27c <_getpid_r>:
    d27c:	f7fe bcb2 	b.w	bbe4 <_getpid>

0000d280 <__sread>:
    d280:	b510      	push	{r4, lr}
    d282:	460c      	mov	r4, r1
    d284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d288:	f7fd fb0c 	bl	a8a4 <_read_r>
    d28c:	2800      	cmp	r0, #0
    d28e:	bfab      	itete	ge
    d290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d292:	89a3      	ldrhlt	r3, [r4, #12]
    d294:	181b      	addge	r3, r3, r0
    d296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d29a:	bfac      	ite	ge
    d29c:	6563      	strge	r3, [r4, #84]	; 0x54
    d29e:	81a3      	strhlt	r3, [r4, #12]
    d2a0:	bd10      	pop	{r4, pc}

0000d2a2 <__swrite>:
    d2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2a6:	461f      	mov	r7, r3
    d2a8:	898b      	ldrh	r3, [r1, #12]
    d2aa:	05db      	lsls	r3, r3, #23
    d2ac:	4605      	mov	r5, r0
    d2ae:	460c      	mov	r4, r1
    d2b0:	4616      	mov	r6, r2
    d2b2:	d505      	bpl.n	d2c0 <__swrite+0x1e>
    d2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d2b8:	2302      	movs	r3, #2
    d2ba:	2200      	movs	r2, #0
    d2bc:	f7fd fae0 	bl	a880 <_lseek_r>
    d2c0:	89a3      	ldrh	r3, [r4, #12]
    d2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d2ca:	81a3      	strh	r3, [r4, #12]
    d2cc:	4632      	mov	r2, r6
    d2ce:	463b      	mov	r3, r7
    d2d0:	4628      	mov	r0, r5
    d2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2d6:	f7fd ba8f 	b.w	a7f8 <_write_r>

0000d2da <__sseek>:
    d2da:	b510      	push	{r4, lr}
    d2dc:	460c      	mov	r4, r1
    d2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d2e2:	f7fd facd 	bl	a880 <_lseek_r>
    d2e6:	1c43      	adds	r3, r0, #1
    d2e8:	89a3      	ldrh	r3, [r4, #12]
    d2ea:	bf15      	itete	ne
    d2ec:	6560      	strne	r0, [r4, #84]	; 0x54
    d2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d2f6:	81a3      	strheq	r3, [r4, #12]
    d2f8:	bf18      	it	ne
    d2fa:	81a3      	strhne	r3, [r4, #12]
    d2fc:	bd10      	pop	{r4, pc}

0000d2fe <__sclose>:
    d2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d302:	f7fd ba8b 	b.w	a81c <_close_r>
	...

0000d308 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d308:	f7f9 baac 	b.w	6864 <SystemInit>
